// Code generated by go-bindata.
// sources:
// dist/images/favicon.ico
// dist/images/wrench.svg
// dist/scripts/application.js
// dist/scripts/vendor.js
// dist/styles/application.css
// dist/styles/vendor.css
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x57\xe9\x73\x53\x55\x14\x8f\x7f\x80\x33\x7e\xf2\x33\x23\x34\x20\x56\x14\x71\x41\x44\xc5\x0d\xc5\x11\x75\x70\xc5\x81\x19\xbf\x38\xa3\xce\x38\x88\xa8\xe3\x36\x8a\x8c\x4a\xcb\x22\x50\xb6\xca\x56\xa0\x6c\x0a\x08\xa5\x40\x15\x0a\x28\x14\xb4\xd9\x9a\xa4\x2b\x6d\xba\x37\x6d\xd3\xb4\xd9\x9a\x66\x4f\x8f\xe7\x9c\xfb\xde\x4b\x5e\xf2\xd2\x49\xf5\x83\x87\xb9\x43\xe6\xf5\xdd\xfb\x3b\xf7\x9c\xdf\xf9\x9d\xf3\x74\xba\x5b\xf0\xdf\x94\x29\xf4\xff\x14\xdd\xb1\xdb\x74\xba\xdb\x75\x3a\xdd\x0c\x5c\xf8\x48\xb7\x40\x27\x9e\xb3\xe1\xdf\x9a\x6f\x15\x4b\x36\x98\x84\x8d\x27\xe3\x10\x0d\x0c\x42\xa0\xa7\x16\xdc\x0d\xa7\xc1\x65\x2e\x87\x41\xd3\x41\x70\xdb\x4f\x82\xbf\xb3\x06\x22\xde\x1e\x18\x4f\x44\x27\x73\x64\x5e\x16\x1b\x1b\x86\xe1\xc6\x33\xd0\x7e\xf6\x13\xa8\xdf\xb7\x18\x2c\x5b\x1e\x04\xd3\x86\x42\x30\x14\xcf\xe0\x65\x5c\x7f\x17\x98\x37\xcf\x01\xfb\xae\x67\xa1\xed\xd4\x07\xe0\xb2\x1c\x81\x88\xaf\x17\x1d\x1e\xff\x4f\xb8\x89\xc8\x28\x0c\xd9\x7e\x81\xc6\x03\xaf\x32\x46\xed\xda\x69\x50\x5b\x44\xab\x40\xfc\xc6\x65\x28\x9e\x2e\x2d\x3d\x18\xa4\xe7\xe4\x93\x7d\xf7\x73\xd0\x7f\xa3\x14\x62\xa3\x43\xff\x0a\x7b\xcc\xd5\x04\xad\x27\xdf\x43\xdc\x42\x71\x66\x91\x9e\xff\x37\xae\x9f\x09\x75\xdb\xe7\x43\x43\xd9\x4b\xd0\xb0\x7f\x09\x18\x37\xdc\x9d\xe6\xc3\x74\x7c\xa7\x40\xf8\x81\x8b\xfc\x68\x2a\x7f\x83\x73\x83\xc9\xcb\x1b\xdb\xd7\x71\x0d\xec\x7b\x16\x49\x77\xd1\xf3\x59\x96\x92\x87\xc0\x71\x66\x15\x8c\x34\x9d\x85\xf0\x48\x07\xc6\x26\x80\x3e\x36\x43\xdd\xb6\x47\xd8\x37\xc2\x26\x5f\x6e\x1e\x7f\x07\x6c\x3b\x9f\x10\xcf\x24\x9f\xeb\xb6\xcd\x03\xb7\xed\x04\xba\x90\xc8\x0b\xdb\x8a\xfb\xc5\x3d\xf4\x7c\xa6\xe3\xf4\x0a\x18\xed\x33\x23\xf7\x06\x60\xa0\x76\x0f\xf4\x5d\xdb\xc2\x5c\x0b\x8f\x74\xe2\xd9\xf3\x25\x7c\x3d\x98\x36\xdd\x87\xef\x59\x20\x34\xec\x80\xae\x0b\x6b\x90\x13\xf7\x73\x2c\x68\xd1\x6f\xca\xe5\x44\x71\xa0\xfb\xf0\xbd\x8b\x04\xb6\x19\x79\x36\x68\x2c\x83\x64\x6c\x8c\xff\xee\xb2\x1c\x16\x77\xfa\xe1\x0e\xe8\xbd\xb2\x9e\xe3\x6a\xde\x34\x47\xe4\x9e\xf0\x7f\xbc\x17\x46\x9d\x75\xfc\x2e\xd5\xca\x48\x4b\x15\xd8\x4a\x9f\x52\x7c\xb0\x94\x3c\x0c\x5e\xc7\x15\x4d\xec\x44\xc4\xcf\xf9\x96\xb1\x89\xe3\xee\xfa\x5f\x91\xc2\xa9\x98\xd1\xbd\x65\x2e\xd0\xb9\xf6\x5d\x0b\x25\xec\xe9\x29\x7c\x8c\x53\xba\xf9\xbb\xff\xe6\xf7\x98\xb3\xc8\x5d\xe2\x0d\xc5\x2e\xd3\x5c\x75\x47\x99\xe3\x22\xe6\x85\x30\x60\x28\xcb\x8a\x55\x3a\x3e\xc5\xbd\xf9\xc8\x32\x30\x6d\x9c\xa5\xc2\x0f\xf4\x1a\xb3\xce\xf6\xb6\x5d\x62\xfe\x08\x4e\x14\x40\xcf\xa5\xb5\x78\xaf\xd4\xd9\xb1\xa0\x1b\x6b\x6c\x89\x52\x5b\x6d\x15\x2b\x20\x11\x1d\x53\x9d\x11\xf1\x74\x33\x9e\x1c\x4b\xfb\xee\x45\xa8\x09\x15\x60\xdd\xf1\x58\x2a\xff\x1b\xef\x61\x6d\xca\x34\xc2\xea\xbb\xba\x59\xf8\x89\x7b\xad\xdb\x1f\xe5\x5c\xcb\x36\xdc\x58\x29\xdd\x1d\x73\xb4\x75\x2e\x73\x28\xd3\x28\xd7\x26\xae\x35\x29\xde\xeb\x66\x70\x3c\xac\x3b\x17\x28\xfc\x27\x7c\x7f\xf7\x5f\x59\x7b\xc9\xa2\x7e\x27\x6b\x57\xad\x54\x9b\xb4\x97\x7d\x43\x9e\xb4\x57\xae\x52\xf4\xc4\x71\xe6\x23\xd4\xd0\x58\xd6\xfe\xd0\xd0\x4d\xcc\xdd\x8b\x4a\x5d\x51\x8d\x0c\x59\x7f\xc6\xfb\x3f\x9e\x86\x3f\x0b\xfc\x5d\xd7\x35\xf1\xc9\x9c\xd7\xb7\x2b\x35\xd9\x58\xfe\x3a\xc4\xc7\x3c\xec\x97\x7d\xcf\xf3\xec\x13\x69\x0b\xc5\x54\xcb\x28\x47\xad\x27\xde\x95\xf8\x59\xc0\xfa\xd6\x71\xfe\x73\xcc\xf9\x6c\x25\x26\x84\x4f\xf5\x9b\xcb\x82\xfd\x36\x89\x07\x42\x4f\x02\x3d\x06\x08\x20\x3f\x2d\x5b\x1e\xe0\x73\x49\xd7\x42\xee\x36\xcd\xbd\xe4\x17\xf9\xa7\x68\x9d\x74\x8f\x74\xed\xa3\xfc\xf8\xda\xff\xcc\x89\x1f\x0f\xfb\x90\x67\xaf\x28\x3a\x4a\xf5\xec\xae\x3f\xc5\x7c\xa7\x67\x0d\x65\x2f\x43\x3c\xe4\xd5\xdc\x4b\xf5\x91\x8e\xa5\xb5\x48\xab\x72\xd5\x37\x19\xe5\x9a\xb4\x4c\xf6\xbb\xe7\x72\x31\xf6\xcf\x72\xe6\x12\x3d\x23\x7e\x27\x63\x61\xad\x9d\xd0\x75\x71\x4d\xd6\x7d\xb3\xf1\x0b\xb9\xd6\x72\x1b\x9e\xf3\xfb\xd7\x4a\x0d\x77\x9c\xff\x02\xf1\x0f\x70\x9f\x10\xf8\xcb\x21\x19\xcf\xc6\x4f\x84\xfd\xd0\x78\xf0\xb5\xfc\xf0\x5b\xab\x27\xc0\x07\xc4\xff\x26\x85\x7f\xee\x33\xd4\xe4\xe3\x4a\x6f\x6d\xc0\xdc\x50\x5f\xc9\xc2\x8f\x06\xa1\xe5\xd8\xdb\xf8\xce\x54\x55\xbf\x95\xfb\x53\xaa\xef\xea\xc1\x59\xb3\x95\xef\xa9\x1d\xff\x04\xd7\x97\xfc\x6e\x77\xf5\x77\xc8\x97\xab\xac\xe1\xc4\x3f\xaa\xa9\xb0\xa7\x4b\x73\x2f\x69\x42\xd3\xa1\xa5\x92\xfe\xe8\xb9\xee\x3a\xce\x7d\x8a\x7a\x31\x8f\xb5\xb8\xf5\xe4\xfb\x58\x5f\x3b\x50\xff\x4c\x39\x7b\x4c\x22\x3a\x8a\x67\xbc\x29\xf0\x31\xe7\x03\x86\x7d\xdc\xc3\x6c\xa5\x4f\x8b\xfa\x23\xfe\x4c\x90\x3f\x59\x7f\xe5\x5c\x51\xfd\x06\x9d\x36\xd6\xf3\x64\x1e\x73\x17\x69\x88\xe8\xd7\x05\x7c\x67\xaa\x15\xca\x37\xd7\xb5\x34\xdb\x74\x5d\xf8\x36\xe7\xdc\xa4\xc6\x5f\xc6\x79\x99\x8c\xd1\xac\xc8\x5c\x43\xfc\xfa\xbd\x2f\x60\x3f\xef\x17\xcf\xcd\x87\xc4\x2c\x87\xcf\x6d\xa5\x4f\x62\xff\xd6\xd6\x80\x4c\xfc\x64\x46\x8f\x98\xc8\xe2\x21\x0f\x34\x1f\x5e\x2a\x7a\xcc\x5a\xf5\x3d\xc3\xd8\x5b\x6c\x3f\x2d\x54\x7a\x6f\x77\xf5\xf7\x5c\xab\xb9\xf0\xe5\xfe\x33\xd2\x54\xc9\xf9\xf2\xb6\x55\x2b\x8b\xfa\x84\x3c\x2f\xa4\x9b\xcb\x72\x48\xe9\xaf\x34\xab\x06\x32\xfa\x44\xdf\xb5\x12\x45\xd7\x68\x56\xf1\xb4\xfc\x96\x8d\x8f\xdc\x4e\xaf\x41\xe3\xba\x3b\x55\x8b\x38\x6d\xc3\x5e\x1f\xf1\xf5\xa9\xf6\x91\xee\xca\x73\x88\xe8\x31\x2b\x31\xef\x11\xd5\x3b\x51\x7f\x3f\xd7\x1f\xc5\x87\xf3\xb0\xeb\x19\xd4\x67\x75\x2f\xa7\x19\xdc\xb0\x6e\x66\xda\xcc\xa1\xae\x45\x33\xea\xf8\xa0\xf1\x80\x2a\x76\x34\x2b\x52\xdd\xc8\x7d\x83\x7a\x6f\xd0\x69\xd5\xcc\x11\x69\xa7\xa5\x64\x6e\xaa\xc7\xe3\x3c\xef\x75\x5c\x56\x66\x20\xd2\x66\x47\xc5\x4a\x49\x2f\xa6\x8a\x85\xef\x51\xdf\x6d\x39\xba\x5c\xbc\x9b\x36\x63\xd2\xbd\x05\xb6\x5e\x99\x25\x89\x83\xb9\xf4\x81\xea\xd6\x85\x5c\xa4\x39\x46\x9e\x55\xa8\x4f\x51\xde\x69\xf6\x24\x23\x2d\x1c\x69\x3e\x0f\xbd\x7f\x6c\x60\xfd\x70\xde\xd8\xc1\x3d\x8f\x9e\xcb\x16\x0f\xf9\xb0\x5f\x1c\x01\x2b\xc6\x5c\xcc\xe1\x78\x16\xe6\xa7\x1b\xe7\x1e\x2d\x7d\x55\xb9\x80\xbd\x9f\x34\x99\x38\x20\x72\x21\x62\x5d\xbf\x77\x31\x62\xed\x84\xe0\x60\xa3\xa8\x3b\x55\x8d\x8e\x73\x2d\x50\xef\xa4\x9e\xd6\x74\xf8\x2d\x65\x9e\x31\x70\x5f\x2f\x64\x4e\x6b\x69\xab\x76\x18\x12\xc8\xbf\x2a\xa8\xc7\xb9\x40\x3e\xc3\x20\xdd\x83\xe2\x41\xdf\x43\x8e\x8a\x0f\xb1\x86\x56\xf3\x9c\xdd\x5e\xf9\x31\x63\x52\xff\xe6\x5e\x56\x34\x4d\xe1\x04\xcd\x89\x83\xc6\xfd\x58\x13\xa1\xbc\xb0\xd3\x8d\xb8\x43\xfd\x82\x38\x21\x66\xc3\x69\x0a\x87\x53\x6b\x6a\xea\x5b\x4c\x9a\xad\xe8\xb7\x69\xd3\x6c\xfe\x16\xe4\x59\x6e\x12\xdf\x3e\x59\xb1\xc0\x7c\x10\x8f\x7a\xae\x14\xf3\x7c\x40\xb5\x4b\x77\x94\xe7\x30\xb9\x1f\x90\x7e\x11\x6f\x68\x2e\xea\xac\xfa\x12\x7c\xac\x03\x93\xbf\x73\x6e\x47\xc6\x71\x06\x1b\x42\xae\xd5\xe0\x37\xd0\x5e\x8c\xcb\x6a\xae\x85\x36\x9c\x27\x3a\xab\xbe\x62\x6e\x78\x5a\x2f\xf2\x77\x6f\x3e\xdf\x59\xb2\xe9\xfe\x67\xfb\x27\x00\x00\xff\xff\x7c\x9f\x33\xb5\xbe\x10\x00\x00")

func imagesFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_imagesFaviconIco,
		"images/favicon.ico",
	)
}

func imagesFaviconIco() (*asset, error) {
	bytes, err := imagesFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/favicon.ico", size: 4286, mode: os.FileMode(420), modTime: time.Unix(1457005400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesWrenchSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\x6b\x4f\xdb\x48\x14\xfd\x9c\xfc\x8a\xd9\xd9\x4f\x2b\x79\x9e\x7e\x8d\xa3\x04\x04\x01\xb1\x48\xec\x16\xa9\x94\xaa\x9f\xaa\xe0\x98\xd8\xc2\xb5\x23\xc7\x79\xc0\xaf\xef\xb9\x63\x08\xad\x84\xaa\xc8\xe3\xeb\xb9\xe7\x9e\x73\x5f\x99\x9e\x1e\x7e\xd4\x6c\x57\x74\x9b\xaa\x6d\x66\xdc\x48\xcd\x59\xd1\xe4\xed\xb2\x6a\x56\x33\xbe\xed\x1f\x85\xe3\xa7\x27\xe3\xe9\x5f\x42\xb0\xab\xa2\x29\xba\x45\xdf\x76\x13\x76\xb6\x6c\x1f\x0a\x76\x5d\xd7\xdb\x4d\xef\xaf\x98\x71\x52\x4b\x1d\xb0\xcf\xf7\x57\xec\xf2\xb0\x6e\xbb\x9e\xdd\xd6\xdb\x95\xb8\x6e\x98\xf4\x97\xf7\x83\xc6\x84\x25\x52\x6b\x76\xbe\xad\xea\x25\xd3\xff\x30\x26\x04\xd1\x5f\x7c\x9a\xdf\x7d\xbb\xbd\x64\x9b\xdd\x8a\xdd\x7e\x39\xbf\xb9\x9e\x33\x2e\x94\xfa\x1a\xce\x95\xba\xb8\xbb\xf0\x0c\x46\x1a\xa5\x2e\xff\xe7\x8c\x97\x7d\xbf\x9e\x28\xb5\xdf\xef\xe5\x3e\x94\x6d\xb7\x52\x57\xdd\x62\x5d\x56\xf9\x46\x01\xa8\x08\x88\x20\x05\x32\x63\xe4\xb2\x5f\x72\x48\x10\xf3\x2f\x75\x1a\xce\xaa\xe5\x8c\xdf\x2c\x9e\x8b\xee\x3b\x3e\xd0\x86\x66\x33\xfb\x80\xd9\x6a\xad\x89\xe9\x15\x32\x39\xd4\x55\xf3\xf4\x11\xd0\x64\x59\xa6\xbc\x17\xd0\x19\xd7\xeb\x03\x67\xcf\xc3\x7b\x3c\x62\xbb\xaa\xd8\x9f\xb7\x74\xcf\x34\x33\xda\x3f\xd4\xea\xc5\x43\x5d\x88\x87\x45\xfe\xb4\xea\xda\x6d\x83\x8c\x9a\x62\xcf\x7e\xc3\x40\x76\xb2\x59\x2f\xf2\x62\xc6\xd7\x5d\xb1\x29\xba\x5d\x41\xf5\xac\x4e\xc6\xa3\xe9\x7a\xd1\x97\xec\xb1\xaa\xeb\x19\xff\xdb\xa6\x2e\x9b\x9f\x71\x06\x8e\xff\x62\x2d\xc3\xc0\x48\x3b\xb7\xa1\x4c\xc8\xc0\x93\x05\xd6\xe2\x20\x23\xca\x64\x9a\xeb\xc0\x26\x32\x0d\xac\xc1\x11\x39\x19\xbd\x1f\xb9\x77\x68\x6f\x8b\xa3\x5f\xd0\x31\x1e\x8d\xe6\x99\xa3\x30\xe2\x4a\x53\x69\x3c\xfb\x9b\xde\x0b\x1b\xa4\x9d\x93\x36\xa7\xd0\x30\xd0\x22\x74\x32\x16\x26\x95\xe1\x60\xd1\x91\xeb\xc1\x79\xbc\x0d\xde\x5d\x43\x94\xbf\xf0\xfe\xe0\xe8\x27\x71\x30\x43\x57\xd3\x61\x50\x1a\x09\x05\x47\xc9\x17\xae\xfe\xd4\x95\x84\x72\xce\xb4\x4c\x6b\x0d\xb1\x28\x96\xb6\x86\x96\xc0\x87\xbf\x40\xa1\xb5\x30\x91\x74\x22\x24\x4b\x53\x95\x68\x06\x0c\x87\x2a\x2c\x55\x82\x06\x69\xe4\x9e\x40\x59\x0b\x63\x7d\x79\xf4\x42\x7c\x42\x01\xc8\xb0\xc4\x3f\xc1\xed\x00\x4d\xd0\x61\x82\x46\xc2\xd7\xef\xe8\x95\x03\x4d\x21\x06\x94\x80\x0d\xc6\x30\x0c\xfa\x0d\x6d\x37\xb1\x0c\x01\x44\xd1\x5a\x44\x50\xc4\xb2\xfa\x37\xf2\x05\x2e\x44\x84\x0d\x90\x65\x40\x83\x19\x46\x42\x39\x62\x74\x68\x05\xe5\x1a\xd1\xa8\xe1\x8b\x91\x3c\x58\xf1\x05\x4e\xca\x18\xb7\x71\x29\xac\xb4\x3b\xcc\xad\xb4\x9e\x2e\xf2\xee\x41\x38\x7d\x15\x20\x49\x92\xc3\xe3\x49\xc2\x61\x1b\x64\x26\xcc\x40\x2f\x62\x3f\x0c\x74\x42\xfb\x59\x69\x52\xa6\x3e\xe5\x14\x08\xa8\xd7\x8b\x40\x95\xd5\xa4\xed\x3c\x6d\xec\x49\x90\x07\x96\x06\xc3\xfa\x97\xc6\x81\x85\xc1\x32\xba\x20\x41\x91\x1e\x94\xf8\x3c\x62\x0f\x42\x77\x92\x52\x44\x5e\x26\xa5\xb6\x11\x39\xe5\x5f\x5a\xa8\xef\x04\x55\x21\xac\x77\x3b\xef\x8e\xbd\x3b\x9c\x47\xb4\x97\x44\x49\x8b\xeb\x5e\xad\x37\x19\xbf\x24\x53\xb5\xa2\x03\xff\xeb\x93\xf1\xcf\x00\x00\x00\xff\xff\x47\x9d\xee\xab\x04\x05\x00\x00")

func imagesWrenchSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesWrenchSvg,
		"images/wrench.svg",
	)
}

func imagesWrenchSvg() (*asset, error) {
	bytes, err := imagesWrenchSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/wrench.svg", size: 1284, mode: os.FileMode(420), modTime: time.Unix(1441506399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsApplicationJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func scriptsApplicationJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsApplicationJs,
		"scripts/application.js",
	)
}

func scriptsApplicationJs() (*asset, error) {
	bytes, err := scriptsApplicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/application.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(1457007387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsVendorJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func scriptsVendorJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsVendorJs,
		"scripts/vendor.js",
	)
}

func scriptsVendorJs() (*asset, error) {
	bytes, err := scriptsVendorJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/vendor.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(1457007390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesApplicationCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stylesApplicationCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesApplicationCss,
		"styles/application.css",
	)
}

func stylesApplicationCss() (*asset, error) {
	bytes, err := stylesApplicationCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles/application.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1457007392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesVendorCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stylesVendorCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesVendorCss,
		"styles/vendor.css",
	)
}

func stylesVendorCss() (*asset, error) {
	bytes, err := stylesVendorCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles/vendor.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1457007395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/favicon.ico":     imagesFaviconIco,
	"images/wrench.svg":      imagesWrenchSvg,
	"scripts/application.js": scriptsApplicationJs,
	"scripts/vendor.js":      scriptsVendorJs,
	"styles/application.css": stylesApplicationCss,
	"styles/vendor.css":      stylesVendorCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{imagesFaviconIco, map[string]*bintree{}},
		"wrench.svg":  &bintree{imagesWrenchSvg, map[string]*bintree{}},
	}},
	"scripts": &bintree{nil, map[string]*bintree{
		"application.js": &bintree{scriptsApplicationJs, map[string]*bintree{}},
		"vendor.js":      &bintree{scriptsVendorJs, map[string]*bintree{}},
	}},
	"styles": &bintree{nil, map[string]*bintree{
		"application.css": &bintree{stylesApplicationCss, map[string]*bintree{}},
		"vendor.css":      &bintree{stylesVendorCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
