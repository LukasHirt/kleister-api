// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// AppendTeamToPackOKCode is the HTTP code returned for type AppendTeamToPackOK
const AppendTeamToPackOKCode int = 200

/*AppendTeamToPackOK Plain success message

swagger:response appendTeamToPackOK
*/
type AppendTeamToPackOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToPackOK creates AppendTeamToPackOK with default headers values
func NewAppendTeamToPackOK() *AppendTeamToPackOK {

	return &AppendTeamToPackOK{}
}

// WithPayload adds the payload to the append team to pack o k response
func (o *AppendTeamToPackOK) WithPayload(payload *models.GeneralError) *AppendTeamToPackOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to pack o k response
func (o *AppendTeamToPackOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToPackOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToPackForbiddenCode is the HTTP code returned for type AppendTeamToPackForbidden
const AppendTeamToPackForbiddenCode int = 403

/*AppendTeamToPackForbidden User is not authorized

swagger:response appendTeamToPackForbidden
*/
type AppendTeamToPackForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToPackForbidden creates AppendTeamToPackForbidden with default headers values
func NewAppendTeamToPackForbidden() *AppendTeamToPackForbidden {

	return &AppendTeamToPackForbidden{}
}

// WithPayload adds the payload to the append team to pack forbidden response
func (o *AppendTeamToPackForbidden) WithPayload(payload *models.GeneralError) *AppendTeamToPackForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to pack forbidden response
func (o *AppendTeamToPackForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToPackForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToPackPreconditionFailedCode is the HTTP code returned for type AppendTeamToPackPreconditionFailed
const AppendTeamToPackPreconditionFailedCode int = 412

/*AppendTeamToPackPreconditionFailed Failed to parse request body

swagger:response appendTeamToPackPreconditionFailed
*/
type AppendTeamToPackPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToPackPreconditionFailed creates AppendTeamToPackPreconditionFailed with default headers values
func NewAppendTeamToPackPreconditionFailed() *AppendTeamToPackPreconditionFailed {

	return &AppendTeamToPackPreconditionFailed{}
}

// WithPayload adds the payload to the append team to pack precondition failed response
func (o *AppendTeamToPackPreconditionFailed) WithPayload(payload *models.GeneralError) *AppendTeamToPackPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to pack precondition failed response
func (o *AppendTeamToPackPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToPackPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToPackUnprocessableEntityCode is the HTTP code returned for type AppendTeamToPackUnprocessableEntity
const AppendTeamToPackUnprocessableEntityCode int = 422

/*AppendTeamToPackUnprocessableEntity Pack is already assigned

swagger:response appendTeamToPackUnprocessableEntity
*/
type AppendTeamToPackUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToPackUnprocessableEntity creates AppendTeamToPackUnprocessableEntity with default headers values
func NewAppendTeamToPackUnprocessableEntity() *AppendTeamToPackUnprocessableEntity {

	return &AppendTeamToPackUnprocessableEntity{}
}

// WithPayload adds the payload to the append team to pack unprocessable entity response
func (o *AppendTeamToPackUnprocessableEntity) WithPayload(payload *models.GeneralError) *AppendTeamToPackUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to pack unprocessable entity response
func (o *AppendTeamToPackUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToPackUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AppendTeamToPackDefault Some error unrelated to the handler

swagger:response appendTeamToPackDefault
*/
type AppendTeamToPackDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToPackDefault creates AppendTeamToPackDefault with default headers values
func NewAppendTeamToPackDefault(code int) *AppendTeamToPackDefault {
	if code <= 0 {
		code = 500
	}

	return &AppendTeamToPackDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the append team to pack default response
func (o *AppendTeamToPackDefault) WithStatusCode(code int) *AppendTeamToPackDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the append team to pack default response
func (o *AppendTeamToPackDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the append team to pack default response
func (o *AppendTeamToPackDefault) WithPayload(payload *models.GeneralError) *AppendTeamToPackDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to pack default response
func (o *AppendTeamToPackDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToPackDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
