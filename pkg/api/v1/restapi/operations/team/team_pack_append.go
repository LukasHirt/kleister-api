// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TeamPackAppendHandlerFunc turns a function with the right signature into a team pack append handler
type TeamPackAppendHandlerFunc func(TeamPackAppendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TeamPackAppendHandlerFunc) Handle(params TeamPackAppendParams) middleware.Responder {
	return fn(params)
}

// TeamPackAppendHandler interface for that can handle valid team pack append params
type TeamPackAppendHandler interface {
	Handle(TeamPackAppendParams) middleware.Responder
}

// NewTeamPackAppend creates a new http.Handler for the team pack append operation
func NewTeamPackAppend(ctx *middleware.Context, handler TeamPackAppendHandler) *TeamPackAppend {
	return &TeamPackAppend{Context: ctx, Handler: handler}
}

/*TeamPackAppend swagger:route POST /teams/{teamID}/packs team teamPackAppend

Assign a pack to team

*/
type TeamPackAppend struct {
	Context *middleware.Context
	Handler TeamPackAppendHandler
}

func (o *TeamPackAppend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTeamPackAppendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
