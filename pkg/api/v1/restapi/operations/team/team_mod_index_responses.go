// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// TeamModIndexOKCode is the HTTP code returned for type TeamModIndexOK
const TeamModIndexOKCode int = 200

/*TeamModIndexOK A collection of team mods

swagger:response teamModIndexOK
*/
type TeamModIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.TeamMod `json:"body,omitempty"`
}

// NewTeamModIndexOK creates TeamModIndexOK with default headers values
func NewTeamModIndexOK() *TeamModIndexOK {

	return &TeamModIndexOK{}
}

// WithPayload adds the payload to the team mod index o k response
func (o *TeamModIndexOK) WithPayload(payload []*models.TeamMod) *TeamModIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod index o k response
func (o *TeamModIndexOK) SetPayload(payload []*models.TeamMod) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.TeamMod, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// TeamModIndexForbiddenCode is the HTTP code returned for type TeamModIndexForbidden
const TeamModIndexForbiddenCode int = 403

/*TeamModIndexForbidden User is not authorized

swagger:response teamModIndexForbidden
*/
type TeamModIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamModIndexForbidden creates TeamModIndexForbidden with default headers values
func NewTeamModIndexForbidden() *TeamModIndexForbidden {

	return &TeamModIndexForbidden{}
}

// WithPayload adds the payload to the team mod index forbidden response
func (o *TeamModIndexForbidden) WithPayload(payload *models.GeneralError) *TeamModIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod index forbidden response
func (o *TeamModIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TeamModIndexDefault Some error unrelated to the handler

swagger:response teamModIndexDefault
*/
type TeamModIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamModIndexDefault creates TeamModIndexDefault with default headers values
func NewTeamModIndexDefault(code int) *TeamModIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &TeamModIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the team mod index default response
func (o *TeamModIndexDefault) WithStatusCode(code int) *TeamModIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the team mod index default response
func (o *TeamModIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the team mod index default response
func (o *TeamModIndexDefault) WithPayload(payload *models.GeneralError) *TeamModIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod index default response
func (o *TeamModIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
