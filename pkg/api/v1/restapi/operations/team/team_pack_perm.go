// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TeamPackPermHandlerFunc turns a function with the right signature into a team pack perm handler
type TeamPackPermHandlerFunc func(TeamPackPermParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TeamPackPermHandlerFunc) Handle(params TeamPackPermParams) middleware.Responder {
	return fn(params)
}

// TeamPackPermHandler interface for that can handle valid team pack perm params
type TeamPackPermHandler interface {
	Handle(TeamPackPermParams) middleware.Responder
}

// NewTeamPackPerm creates a new http.Handler for the team pack perm operation
func NewTeamPackPerm(ctx *middleware.Context, handler TeamPackPermHandler) *TeamPackPerm {
	return &TeamPackPerm{Context: ctx, Handler: handler}
}

/*TeamPackPerm swagger:route PUT /teams/{teamID}/packs team teamPackPerm

Update pack perms for team

*/
type TeamPackPerm struct {
	Context *middleware.Context
	Handler TeamPackPermHandler
}

func (o *TeamPackPerm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTeamPackPermParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
