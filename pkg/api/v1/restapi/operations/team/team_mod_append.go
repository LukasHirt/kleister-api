// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TeamModAppendHandlerFunc turns a function with the right signature into a team mod append handler
type TeamModAppendHandlerFunc func(TeamModAppendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TeamModAppendHandlerFunc) Handle(params TeamModAppendParams) middleware.Responder {
	return fn(params)
}

// TeamModAppendHandler interface for that can handle valid team mod append params
type TeamModAppendHandler interface {
	Handle(TeamModAppendParams) middleware.Responder
}

// NewTeamModAppend creates a new http.Handler for the team mod append operation
func NewTeamModAppend(ctx *middleware.Context, handler TeamModAppendHandler) *TeamModAppend {
	return &TeamModAppend{Context: ctx, Handler: handler}
}

/*TeamModAppend swagger:route POST /teams/{teamID}/mods team teamModAppend

Assign a mod to team

*/
type TeamModAppend struct {
	Context *middleware.Context
	Handler TeamModAppendHandler
}

func (o *TeamModAppend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTeamModAppendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
