// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// TeamPackIndexOKCode is the HTTP code returned for type TeamPackIndexOK
const TeamPackIndexOKCode int = 200

/*TeamPackIndexOK A collection of team packs

swagger:response teamPackIndexOK
*/
type TeamPackIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.TeamPack `json:"body,omitempty"`
}

// NewTeamPackIndexOK creates TeamPackIndexOK with default headers values
func NewTeamPackIndexOK() *TeamPackIndexOK {

	return &TeamPackIndexOK{}
}

// WithPayload adds the payload to the team pack index o k response
func (o *TeamPackIndexOK) WithPayload(payload []*models.TeamPack) *TeamPackIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack index o k response
func (o *TeamPackIndexOK) SetPayload(payload []*models.TeamPack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.TeamPack, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// TeamPackIndexForbiddenCode is the HTTP code returned for type TeamPackIndexForbidden
const TeamPackIndexForbiddenCode int = 403

/*TeamPackIndexForbidden User is not authorized

swagger:response teamPackIndexForbidden
*/
type TeamPackIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamPackIndexForbidden creates TeamPackIndexForbidden with default headers values
func NewTeamPackIndexForbidden() *TeamPackIndexForbidden {

	return &TeamPackIndexForbidden{}
}

// WithPayload adds the payload to the team pack index forbidden response
func (o *TeamPackIndexForbidden) WithPayload(payload *models.GeneralError) *TeamPackIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack index forbidden response
func (o *TeamPackIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TeamPackIndexDefault Some error unrelated to the handler

swagger:response teamPackIndexDefault
*/
type TeamPackIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamPackIndexDefault creates TeamPackIndexDefault with default headers values
func NewTeamPackIndexDefault(code int) *TeamPackIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &TeamPackIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the team pack index default response
func (o *TeamPackIndexDefault) WithStatusCode(code int) *TeamPackIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the team pack index default response
func (o *TeamPackIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the team pack index default response
func (o *TeamPackIndexDefault) WithPayload(payload *models.GeneralError) *TeamPackIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack index default response
func (o *TeamPackIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
