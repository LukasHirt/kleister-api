// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// TeamPackAppendOKCode is the HTTP code returned for type TeamPackAppendOK
const TeamPackAppendOKCode int = 200

/*TeamPackAppendOK Plain success message

swagger:response teamPackAppendOK
*/
type TeamPackAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamPackAppendOK creates TeamPackAppendOK with default headers values
func NewTeamPackAppendOK() *TeamPackAppendOK {

	return &TeamPackAppendOK{}
}

// WithPayload adds the payload to the team pack append o k response
func (o *TeamPackAppendOK) WithPayload(payload *models.GeneralError) *TeamPackAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack append o k response
func (o *TeamPackAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamPackAppendForbiddenCode is the HTTP code returned for type TeamPackAppendForbidden
const TeamPackAppendForbiddenCode int = 403

/*TeamPackAppendForbidden User is not authorized

swagger:response teamPackAppendForbidden
*/
type TeamPackAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamPackAppendForbidden creates TeamPackAppendForbidden with default headers values
func NewTeamPackAppendForbidden() *TeamPackAppendForbidden {

	return &TeamPackAppendForbidden{}
}

// WithPayload adds the payload to the team pack append forbidden response
func (o *TeamPackAppendForbidden) WithPayload(payload *models.GeneralError) *TeamPackAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack append forbidden response
func (o *TeamPackAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamPackAppendPreconditionFailedCode is the HTTP code returned for type TeamPackAppendPreconditionFailed
const TeamPackAppendPreconditionFailedCode int = 412

/*TeamPackAppendPreconditionFailed Failed to parse request body

swagger:response teamPackAppendPreconditionFailed
*/
type TeamPackAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamPackAppendPreconditionFailed creates TeamPackAppendPreconditionFailed with default headers values
func NewTeamPackAppendPreconditionFailed() *TeamPackAppendPreconditionFailed {

	return &TeamPackAppendPreconditionFailed{}
}

// WithPayload adds the payload to the team pack append precondition failed response
func (o *TeamPackAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *TeamPackAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack append precondition failed response
func (o *TeamPackAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamPackAppendUnprocessableEntityCode is the HTTP code returned for type TeamPackAppendUnprocessableEntity
const TeamPackAppendUnprocessableEntityCode int = 422

/*TeamPackAppendUnprocessableEntity Pack is already assigned

swagger:response teamPackAppendUnprocessableEntity
*/
type TeamPackAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamPackAppendUnprocessableEntity creates TeamPackAppendUnprocessableEntity with default headers values
func NewTeamPackAppendUnprocessableEntity() *TeamPackAppendUnprocessableEntity {

	return &TeamPackAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the team pack append unprocessable entity response
func (o *TeamPackAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *TeamPackAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack append unprocessable entity response
func (o *TeamPackAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TeamPackAppendDefault Some error unrelated to the handler

swagger:response teamPackAppendDefault
*/
type TeamPackAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamPackAppendDefault creates TeamPackAppendDefault with default headers values
func NewTeamPackAppendDefault(code int) *TeamPackAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &TeamPackAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the team pack append default response
func (o *TeamPackAppendDefault) WithStatusCode(code int) *TeamPackAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the team pack append default response
func (o *TeamPackAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the team pack append default response
func (o *TeamPackAppendDefault) WithPayload(payload *models.GeneralError) *TeamPackAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team pack append default response
func (o *TeamPackAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamPackAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
