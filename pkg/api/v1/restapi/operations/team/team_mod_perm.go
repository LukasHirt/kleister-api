// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TeamModPermHandlerFunc turns a function with the right signature into a team mod perm handler
type TeamModPermHandlerFunc func(TeamModPermParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TeamModPermHandlerFunc) Handle(params TeamModPermParams) middleware.Responder {
	return fn(params)
}

// TeamModPermHandler interface for that can handle valid team mod perm params
type TeamModPermHandler interface {
	Handle(TeamModPermParams) middleware.Responder
}

// NewTeamModPerm creates a new http.Handler for the team mod perm operation
func NewTeamModPerm(ctx *middleware.Context, handler TeamModPermHandler) *TeamModPerm {
	return &TeamModPerm{Context: ctx, Handler: handler}
}

/*TeamModPerm swagger:route PUT /teams/{teamID}/mods team teamModPerm

Update mod perms for team

*/
type TeamModPerm struct {
	Context *middleware.Context
	Handler TeamModPermHandler
}

func (o *TeamModPerm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTeamModPermParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
