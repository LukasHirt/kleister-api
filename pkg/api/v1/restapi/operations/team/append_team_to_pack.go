// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AppendTeamToPackHandlerFunc turns a function with the right signature into a append team to pack handler
type AppendTeamToPackHandlerFunc func(AppendTeamToPackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppendTeamToPackHandlerFunc) Handle(params AppendTeamToPackParams) middleware.Responder {
	return fn(params)
}

// AppendTeamToPackHandler interface for that can handle valid append team to pack params
type AppendTeamToPackHandler interface {
	Handle(AppendTeamToPackParams) middleware.Responder
}

// NewAppendTeamToPack creates a new http.Handler for the append team to pack operation
func NewAppendTeamToPack(ctx *middleware.Context, handler AppendTeamToPackHandler) *AppendTeamToPack {
	return &AppendTeamToPack{Context: ctx, Handler: handler}
}

/*AppendTeamToPack swagger:route POST /teams/{teamID}/packs team appendTeamToPack

Assign a pack to team

*/
type AppendTeamToPack struct {
	Context *middleware.Context
	Handler AppendTeamToPackHandler
}

func (o *AppendTeamToPack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppendTeamToPackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
