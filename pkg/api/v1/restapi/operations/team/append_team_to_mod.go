// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AppendTeamToModHandlerFunc turns a function with the right signature into a append team to mod handler
type AppendTeamToModHandlerFunc func(AppendTeamToModParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppendTeamToModHandlerFunc) Handle(params AppendTeamToModParams) middleware.Responder {
	return fn(params)
}

// AppendTeamToModHandler interface for that can handle valid append team to mod params
type AppendTeamToModHandler interface {
	Handle(AppendTeamToModParams) middleware.Responder
}

// NewAppendTeamToMod creates a new http.Handler for the append team to mod operation
func NewAppendTeamToMod(ctx *middleware.Context, handler AppendTeamToModHandler) *AppendTeamToMod {
	return &AppendTeamToMod{Context: ctx, Handler: handler}
}

/*AppendTeamToMod swagger:route POST /teams/{teamID}/mods team appendTeamToMod

Assign a mod to team

*/
type AppendTeamToMod struct {
	Context *middleware.Context
	Handler AppendTeamToModHandler
}

func (o *AppendTeamToMod) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppendTeamToModParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
