// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// TeamModAppendOKCode is the HTTP code returned for type TeamModAppendOK
const TeamModAppendOKCode int = 200

/*TeamModAppendOK Plain success message

swagger:response teamModAppendOK
*/
type TeamModAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamModAppendOK creates TeamModAppendOK with default headers values
func NewTeamModAppendOK() *TeamModAppendOK {

	return &TeamModAppendOK{}
}

// WithPayload adds the payload to the team mod append o k response
func (o *TeamModAppendOK) WithPayload(payload *models.GeneralError) *TeamModAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod append o k response
func (o *TeamModAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamModAppendForbiddenCode is the HTTP code returned for type TeamModAppendForbidden
const TeamModAppendForbiddenCode int = 403

/*TeamModAppendForbidden User is not authorized

swagger:response teamModAppendForbidden
*/
type TeamModAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamModAppendForbidden creates TeamModAppendForbidden with default headers values
func NewTeamModAppendForbidden() *TeamModAppendForbidden {

	return &TeamModAppendForbidden{}
}

// WithPayload adds the payload to the team mod append forbidden response
func (o *TeamModAppendForbidden) WithPayload(payload *models.GeneralError) *TeamModAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod append forbidden response
func (o *TeamModAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamModAppendPreconditionFailedCode is the HTTP code returned for type TeamModAppendPreconditionFailed
const TeamModAppendPreconditionFailedCode int = 412

/*TeamModAppendPreconditionFailed Failed to parse request body

swagger:response teamModAppendPreconditionFailed
*/
type TeamModAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamModAppendPreconditionFailed creates TeamModAppendPreconditionFailed with default headers values
func NewTeamModAppendPreconditionFailed() *TeamModAppendPreconditionFailed {

	return &TeamModAppendPreconditionFailed{}
}

// WithPayload adds the payload to the team mod append precondition failed response
func (o *TeamModAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *TeamModAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod append precondition failed response
func (o *TeamModAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamModAppendUnprocessableEntityCode is the HTTP code returned for type TeamModAppendUnprocessableEntity
const TeamModAppendUnprocessableEntityCode int = 422

/*TeamModAppendUnprocessableEntity Mod is already assigned

swagger:response teamModAppendUnprocessableEntity
*/
type TeamModAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamModAppendUnprocessableEntity creates TeamModAppendUnprocessableEntity with default headers values
func NewTeamModAppendUnprocessableEntity() *TeamModAppendUnprocessableEntity {

	return &TeamModAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the team mod append unprocessable entity response
func (o *TeamModAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *TeamModAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod append unprocessable entity response
func (o *TeamModAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TeamModAppendDefault Some error unrelated to the handler

swagger:response teamModAppendDefault
*/
type TeamModAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamModAppendDefault creates TeamModAppendDefault with default headers values
func NewTeamModAppendDefault(code int) *TeamModAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &TeamModAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the team mod append default response
func (o *TeamModAppendDefault) WithStatusCode(code int) *TeamModAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the team mod append default response
func (o *TeamModAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the team mod append default response
func (o *TeamModAppendDefault) WithPayload(payload *models.GeneralError) *TeamModAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team mod append default response
func (o *TeamModAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamModAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
