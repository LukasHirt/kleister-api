// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PermitTeamModHandlerFunc turns a function with the right signature into a permit team mod handler
type PermitTeamModHandlerFunc func(PermitTeamModParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PermitTeamModHandlerFunc) Handle(params PermitTeamModParams) middleware.Responder {
	return fn(params)
}

// PermitTeamModHandler interface for that can handle valid permit team mod params
type PermitTeamModHandler interface {
	Handle(PermitTeamModParams) middleware.Responder
}

// NewPermitTeamMod creates a new http.Handler for the permit team mod operation
func NewPermitTeamMod(ctx *middleware.Context, handler PermitTeamModHandler) *PermitTeamMod {
	return &PermitTeamMod{Context: ctx, Handler: handler}
}

/*PermitTeamMod swagger:route PUT /teams/{teamID}/mods team permitTeamMod

Update mod perms for team

*/
type PermitTeamMod struct {
	Context *middleware.Context
	Handler PermitTeamModHandler
}

func (o *PermitTeamMod) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPermitTeamModParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
