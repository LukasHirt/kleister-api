// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// AppendTeamToModOKCode is the HTTP code returned for type AppendTeamToModOK
const AppendTeamToModOKCode int = 200

/*
AppendTeamToModOK Plain success message

swagger:response appendTeamToModOK
*/
type AppendTeamToModOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToModOK creates AppendTeamToModOK with default headers values
func NewAppendTeamToModOK() *AppendTeamToModOK {

	return &AppendTeamToModOK{}
}

// WithPayload adds the payload to the append team to mod o k response
func (o *AppendTeamToModOK) WithPayload(payload *models.GeneralError) *AppendTeamToModOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to mod o k response
func (o *AppendTeamToModOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToModOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToModForbiddenCode is the HTTP code returned for type AppendTeamToModForbidden
const AppendTeamToModForbiddenCode int = 403

/*
AppendTeamToModForbidden User is not authorized

swagger:response appendTeamToModForbidden
*/
type AppendTeamToModForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToModForbidden creates AppendTeamToModForbidden with default headers values
func NewAppendTeamToModForbidden() *AppendTeamToModForbidden {

	return &AppendTeamToModForbidden{}
}

// WithPayload adds the payload to the append team to mod forbidden response
func (o *AppendTeamToModForbidden) WithPayload(payload *models.GeneralError) *AppendTeamToModForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to mod forbidden response
func (o *AppendTeamToModForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToModForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToModNotFoundCode is the HTTP code returned for type AppendTeamToModNotFound
const AppendTeamToModNotFoundCode int = 404

/*
AppendTeamToModNotFound Team or user not found

swagger:response appendTeamToModNotFound
*/
type AppendTeamToModNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToModNotFound creates AppendTeamToModNotFound with default headers values
func NewAppendTeamToModNotFound() *AppendTeamToModNotFound {

	return &AppendTeamToModNotFound{}
}

// WithPayload adds the payload to the append team to mod not found response
func (o *AppendTeamToModNotFound) WithPayload(payload *models.GeneralError) *AppendTeamToModNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to mod not found response
func (o *AppendTeamToModNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToModNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToModPreconditionFailedCode is the HTTP code returned for type AppendTeamToModPreconditionFailed
const AppendTeamToModPreconditionFailedCode int = 412

/*
AppendTeamToModPreconditionFailed Mod is already assigned

swagger:response appendTeamToModPreconditionFailed
*/
type AppendTeamToModPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToModPreconditionFailed creates AppendTeamToModPreconditionFailed with default headers values
func NewAppendTeamToModPreconditionFailed() *AppendTeamToModPreconditionFailed {

	return &AppendTeamToModPreconditionFailed{}
}

// WithPayload adds the payload to the append team to mod precondition failed response
func (o *AppendTeamToModPreconditionFailed) WithPayload(payload *models.GeneralError) *AppendTeamToModPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to mod precondition failed response
func (o *AppendTeamToModPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToModPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToModUnprocessableEntityCode is the HTTP code returned for type AppendTeamToModUnprocessableEntity
const AppendTeamToModUnprocessableEntityCode int = 422

/*
AppendTeamToModUnprocessableEntity Failed to validate request

swagger:response appendTeamToModUnprocessableEntity
*/
type AppendTeamToModUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewAppendTeamToModUnprocessableEntity creates AppendTeamToModUnprocessableEntity with default headers values
func NewAppendTeamToModUnprocessableEntity() *AppendTeamToModUnprocessableEntity {

	return &AppendTeamToModUnprocessableEntity{}
}

// WithPayload adds the payload to the append team to mod unprocessable entity response
func (o *AppendTeamToModUnprocessableEntity) WithPayload(payload *models.ValidationError) *AppendTeamToModUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to mod unprocessable entity response
func (o *AppendTeamToModUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToModUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
AppendTeamToModDefault Some error unrelated to the handler

swagger:response appendTeamToModDefault
*/
type AppendTeamToModDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToModDefault creates AppendTeamToModDefault with default headers values
func NewAppendTeamToModDefault(code int) *AppendTeamToModDefault {
	if code <= 0 {
		code = 500
	}

	return &AppendTeamToModDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the append team to mod default response
func (o *AppendTeamToModDefault) WithStatusCode(code int) *AppendTeamToModDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the append team to mod default response
func (o *AppendTeamToModDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the append team to mod default response
func (o *AppendTeamToModDefault) WithPayload(payload *models.GeneralError) *AppendTeamToModDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to mod default response
func (o *AppendTeamToModDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToModDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
