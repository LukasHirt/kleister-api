// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ModTeamIndexOKCode is the HTTP code returned for type ModTeamIndexOK
const ModTeamIndexOKCode int = 200

/*ModTeamIndexOK A collection of mod teams

swagger:response modTeamIndexOK
*/
type ModTeamIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.TeamMod `json:"body,omitempty"`
}

// NewModTeamIndexOK creates ModTeamIndexOK with default headers values
func NewModTeamIndexOK() *ModTeamIndexOK {

	return &ModTeamIndexOK{}
}

// WithPayload adds the payload to the mod team index o k response
func (o *ModTeamIndexOK) WithPayload(payload []*models.TeamMod) *ModTeamIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team index o k response
func (o *ModTeamIndexOK) SetPayload(payload []*models.TeamMod) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.TeamMod, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ModTeamIndexForbiddenCode is the HTTP code returned for type ModTeamIndexForbidden
const ModTeamIndexForbiddenCode int = 403

/*ModTeamIndexForbidden User is not authorized

swagger:response modTeamIndexForbidden
*/
type ModTeamIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamIndexForbidden creates ModTeamIndexForbidden with default headers values
func NewModTeamIndexForbidden() *ModTeamIndexForbidden {

	return &ModTeamIndexForbidden{}
}

// WithPayload adds the payload to the mod team index forbidden response
func (o *ModTeamIndexForbidden) WithPayload(payload *models.GeneralError) *ModTeamIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team index forbidden response
func (o *ModTeamIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ModTeamIndexDefault Some error unrelated to the handler

swagger:response modTeamIndexDefault
*/
type ModTeamIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamIndexDefault creates ModTeamIndexDefault with default headers values
func NewModTeamIndexDefault(code int) *ModTeamIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &ModTeamIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the mod team index default response
func (o *ModTeamIndexDefault) WithStatusCode(code int) *ModTeamIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the mod team index default response
func (o *ModTeamIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the mod team index default response
func (o *ModTeamIndexDefault) WithPayload(payload *models.GeneralError) *ModTeamIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team index default response
func (o *ModTeamIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
