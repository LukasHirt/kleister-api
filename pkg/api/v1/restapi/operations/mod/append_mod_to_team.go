// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AppendModToTeamHandlerFunc turns a function with the right signature into a append mod to team handler
type AppendModToTeamHandlerFunc func(AppendModToTeamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppendModToTeamHandlerFunc) Handle(params AppendModToTeamParams) middleware.Responder {
	return fn(params)
}

// AppendModToTeamHandler interface for that can handle valid append mod to team params
type AppendModToTeamHandler interface {
	Handle(AppendModToTeamParams) middleware.Responder
}

// NewAppendModToTeam creates a new http.Handler for the append mod to team operation
func NewAppendModToTeam(ctx *middleware.Context, handler AppendModToTeamHandler) *AppendModToTeam {
	return &AppendModToTeam{Context: ctx, Handler: handler}
}

/*AppendModToTeam swagger:route POST /mods/{modID}/teams mod appendModToTeam

Assign a team to mod

*/
type AppendModToTeam struct {
	Context *middleware.Context
	Handler AppendModToTeamHandler
}

func (o *AppendModToTeam) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppendModToTeamParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
