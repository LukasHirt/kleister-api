// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// DeleteModOKCode is the HTTP code returned for type DeleteModOK
const DeleteModOKCode int = 200

/*
DeleteModOK Plain success message

swagger:response deleteModOK
*/
type DeleteModOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeleteModOK creates DeleteModOK with default headers values
func NewDeleteModOK() *DeleteModOK {

	return &DeleteModOK{}
}

// WithPayload adds the payload to the delete mod o k response
func (o *DeleteModOK) WithPayload(payload *models.GeneralError) *DeleteModOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete mod o k response
func (o *DeleteModOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteModOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteModBadRequestCode is the HTTP code returned for type DeleteModBadRequest
const DeleteModBadRequestCode int = 400

/*
DeleteModBadRequest Failed to delete the mod

swagger:response deleteModBadRequest
*/
type DeleteModBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeleteModBadRequest creates DeleteModBadRequest with default headers values
func NewDeleteModBadRequest() *DeleteModBadRequest {

	return &DeleteModBadRequest{}
}

// WithPayload adds the payload to the delete mod bad request response
func (o *DeleteModBadRequest) WithPayload(payload *models.GeneralError) *DeleteModBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete mod bad request response
func (o *DeleteModBadRequest) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteModBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteModForbiddenCode is the HTTP code returned for type DeleteModForbidden
const DeleteModForbiddenCode int = 403

/*
DeleteModForbidden User is not authorized

swagger:response deleteModForbidden
*/
type DeleteModForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeleteModForbidden creates DeleteModForbidden with default headers values
func NewDeleteModForbidden() *DeleteModForbidden {

	return &DeleteModForbidden{}
}

// WithPayload adds the payload to the delete mod forbidden response
func (o *DeleteModForbidden) WithPayload(payload *models.GeneralError) *DeleteModForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete mod forbidden response
func (o *DeleteModForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteModForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteModNotFoundCode is the HTTP code returned for type DeleteModNotFound
const DeleteModNotFoundCode int = 404

/*
DeleteModNotFound Mod not found

swagger:response deleteModNotFound
*/
type DeleteModNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeleteModNotFound creates DeleteModNotFound with default headers values
func NewDeleteModNotFound() *DeleteModNotFound {

	return &DeleteModNotFound{}
}

// WithPayload adds the payload to the delete mod not found response
func (o *DeleteModNotFound) WithPayload(payload *models.GeneralError) *DeleteModNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete mod not found response
func (o *DeleteModNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteModNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
DeleteModDefault Some error unrelated to the handler

swagger:response deleteModDefault
*/
type DeleteModDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeleteModDefault creates DeleteModDefault with default headers values
func NewDeleteModDefault(code int) *DeleteModDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteModDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete mod default response
func (o *DeleteModDefault) WithStatusCode(code int) *DeleteModDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete mod default response
func (o *DeleteModDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete mod default response
func (o *DeleteModDefault) WithPayload(payload *models.GeneralError) *DeleteModDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete mod default response
func (o *DeleteModDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteModDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
