// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ModTeamPermOKCode is the HTTP code returned for type ModTeamPermOK
const ModTeamPermOKCode int = 200

/*ModTeamPermOK Plain success message

swagger:response modTeamPermOK
*/
type ModTeamPermOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamPermOK creates ModTeamPermOK with default headers values
func NewModTeamPermOK() *ModTeamPermOK {

	return &ModTeamPermOK{}
}

// WithPayload adds the payload to the mod team perm o k response
func (o *ModTeamPermOK) WithPayload(payload *models.GeneralError) *ModTeamPermOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team perm o k response
func (o *ModTeamPermOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamPermOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModTeamPermForbiddenCode is the HTTP code returned for type ModTeamPermForbidden
const ModTeamPermForbiddenCode int = 403

/*ModTeamPermForbidden User is not authorized

swagger:response modTeamPermForbidden
*/
type ModTeamPermForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamPermForbidden creates ModTeamPermForbidden with default headers values
func NewModTeamPermForbidden() *ModTeamPermForbidden {

	return &ModTeamPermForbidden{}
}

// WithPayload adds the payload to the mod team perm forbidden response
func (o *ModTeamPermForbidden) WithPayload(payload *models.GeneralError) *ModTeamPermForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team perm forbidden response
func (o *ModTeamPermForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamPermForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModTeamPermPreconditionFailedCode is the HTTP code returned for type ModTeamPermPreconditionFailed
const ModTeamPermPreconditionFailedCode int = 412

/*ModTeamPermPreconditionFailed Failed to parse request body

swagger:response modTeamPermPreconditionFailed
*/
type ModTeamPermPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamPermPreconditionFailed creates ModTeamPermPreconditionFailed with default headers values
func NewModTeamPermPreconditionFailed() *ModTeamPermPreconditionFailed {

	return &ModTeamPermPreconditionFailed{}
}

// WithPayload adds the payload to the mod team perm precondition failed response
func (o *ModTeamPermPreconditionFailed) WithPayload(payload *models.GeneralError) *ModTeamPermPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team perm precondition failed response
func (o *ModTeamPermPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamPermPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModTeamPermUnprocessableEntityCode is the HTTP code returned for type ModTeamPermUnprocessableEntity
const ModTeamPermUnprocessableEntityCode int = 422

/*ModTeamPermUnprocessableEntity Team is not assigned

swagger:response modTeamPermUnprocessableEntity
*/
type ModTeamPermUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamPermUnprocessableEntity creates ModTeamPermUnprocessableEntity with default headers values
func NewModTeamPermUnprocessableEntity() *ModTeamPermUnprocessableEntity {

	return &ModTeamPermUnprocessableEntity{}
}

// WithPayload adds the payload to the mod team perm unprocessable entity response
func (o *ModTeamPermUnprocessableEntity) WithPayload(payload *models.GeneralError) *ModTeamPermUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team perm unprocessable entity response
func (o *ModTeamPermUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamPermUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ModTeamPermDefault Some error unrelated to the handler

swagger:response modTeamPermDefault
*/
type ModTeamPermDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamPermDefault creates ModTeamPermDefault with default headers values
func NewModTeamPermDefault(code int) *ModTeamPermDefault {
	if code <= 0 {
		code = 500
	}

	return &ModTeamPermDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the mod team perm default response
func (o *ModTeamPermDefault) WithStatusCode(code int) *ModTeamPermDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the mod team perm default response
func (o *ModTeamPermDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the mod team perm default response
func (o *ModTeamPermDefault) WithPayload(payload *models.GeneralError) *ModTeamPermDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team perm default response
func (o *ModTeamPermDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamPermDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
