// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// AppendModToUserOKCode is the HTTP code returned for type AppendModToUserOK
const AppendModToUserOKCode int = 200

/*AppendModToUserOK Plain success message

swagger:response appendModToUserOK
*/
type AppendModToUserOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendModToUserOK creates AppendModToUserOK with default headers values
func NewAppendModToUserOK() *AppendModToUserOK {

	return &AppendModToUserOK{}
}

// WithPayload adds the payload to the append mod to user o k response
func (o *AppendModToUserOK) WithPayload(payload *models.GeneralError) *AppendModToUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append mod to user o k response
func (o *AppendModToUserOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendModToUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendModToUserForbiddenCode is the HTTP code returned for type AppendModToUserForbidden
const AppendModToUserForbiddenCode int = 403

/*AppendModToUserForbidden User is not authorized

swagger:response appendModToUserForbidden
*/
type AppendModToUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendModToUserForbidden creates AppendModToUserForbidden with default headers values
func NewAppendModToUserForbidden() *AppendModToUserForbidden {

	return &AppendModToUserForbidden{}
}

// WithPayload adds the payload to the append mod to user forbidden response
func (o *AppendModToUserForbidden) WithPayload(payload *models.GeneralError) *AppendModToUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append mod to user forbidden response
func (o *AppendModToUserForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendModToUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendModToUserNotFoundCode is the HTTP code returned for type AppendModToUserNotFound
const AppendModToUserNotFoundCode int = 404

/*AppendModToUserNotFound Mod or user not found

swagger:response appendModToUserNotFound
*/
type AppendModToUserNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendModToUserNotFound creates AppendModToUserNotFound with default headers values
func NewAppendModToUserNotFound() *AppendModToUserNotFound {

	return &AppendModToUserNotFound{}
}

// WithPayload adds the payload to the append mod to user not found response
func (o *AppendModToUserNotFound) WithPayload(payload *models.GeneralError) *AppendModToUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append mod to user not found response
func (o *AppendModToUserNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendModToUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendModToUserPreconditionFailedCode is the HTTP code returned for type AppendModToUserPreconditionFailed
const AppendModToUserPreconditionFailedCode int = 412

/*AppendModToUserPreconditionFailed User is already assigned

swagger:response appendModToUserPreconditionFailed
*/
type AppendModToUserPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendModToUserPreconditionFailed creates AppendModToUserPreconditionFailed with default headers values
func NewAppendModToUserPreconditionFailed() *AppendModToUserPreconditionFailed {

	return &AppendModToUserPreconditionFailed{}
}

// WithPayload adds the payload to the append mod to user precondition failed response
func (o *AppendModToUserPreconditionFailed) WithPayload(payload *models.GeneralError) *AppendModToUserPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append mod to user precondition failed response
func (o *AppendModToUserPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendModToUserPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendModToUserUnprocessableEntityCode is the HTTP code returned for type AppendModToUserUnprocessableEntity
const AppendModToUserUnprocessableEntityCode int = 422

/*AppendModToUserUnprocessableEntity Failed to validate request

swagger:response appendModToUserUnprocessableEntity
*/
type AppendModToUserUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewAppendModToUserUnprocessableEntity creates AppendModToUserUnprocessableEntity with default headers values
func NewAppendModToUserUnprocessableEntity() *AppendModToUserUnprocessableEntity {

	return &AppendModToUserUnprocessableEntity{}
}

// WithPayload adds the payload to the append mod to user unprocessable entity response
func (o *AppendModToUserUnprocessableEntity) WithPayload(payload *models.ValidationError) *AppendModToUserUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append mod to user unprocessable entity response
func (o *AppendModToUserUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendModToUserUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AppendModToUserDefault Some error unrelated to the handler

swagger:response appendModToUserDefault
*/
type AppendModToUserDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendModToUserDefault creates AppendModToUserDefault with default headers values
func NewAppendModToUserDefault(code int) *AppendModToUserDefault {
	if code <= 0 {
		code = 500
	}

	return &AppendModToUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the append mod to user default response
func (o *AppendModToUserDefault) WithStatusCode(code int) *AppendModToUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the append mod to user default response
func (o *AppendModToUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the append mod to user default response
func (o *AppendModToUserDefault) WithPayload(payload *models.GeneralError) *AppendModToUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append mod to user default response
func (o *AppendModToUserDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendModToUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
