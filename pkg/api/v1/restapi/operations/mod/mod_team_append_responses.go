// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ModTeamAppendOKCode is the HTTP code returned for type ModTeamAppendOK
const ModTeamAppendOKCode int = 200

/*ModTeamAppendOK Plain success message

swagger:response modTeamAppendOK
*/
type ModTeamAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamAppendOK creates ModTeamAppendOK with default headers values
func NewModTeamAppendOK() *ModTeamAppendOK {

	return &ModTeamAppendOK{}
}

// WithPayload adds the payload to the mod team append o k response
func (o *ModTeamAppendOK) WithPayload(payload *models.GeneralError) *ModTeamAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team append o k response
func (o *ModTeamAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModTeamAppendForbiddenCode is the HTTP code returned for type ModTeamAppendForbidden
const ModTeamAppendForbiddenCode int = 403

/*ModTeamAppendForbidden User is not authorized

swagger:response modTeamAppendForbidden
*/
type ModTeamAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamAppendForbidden creates ModTeamAppendForbidden with default headers values
func NewModTeamAppendForbidden() *ModTeamAppendForbidden {

	return &ModTeamAppendForbidden{}
}

// WithPayload adds the payload to the mod team append forbidden response
func (o *ModTeamAppendForbidden) WithPayload(payload *models.GeneralError) *ModTeamAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team append forbidden response
func (o *ModTeamAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModTeamAppendPreconditionFailedCode is the HTTP code returned for type ModTeamAppendPreconditionFailed
const ModTeamAppendPreconditionFailedCode int = 412

/*ModTeamAppendPreconditionFailed Failed to parse request body

swagger:response modTeamAppendPreconditionFailed
*/
type ModTeamAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamAppendPreconditionFailed creates ModTeamAppendPreconditionFailed with default headers values
func NewModTeamAppendPreconditionFailed() *ModTeamAppendPreconditionFailed {

	return &ModTeamAppendPreconditionFailed{}
}

// WithPayload adds the payload to the mod team append precondition failed response
func (o *ModTeamAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *ModTeamAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team append precondition failed response
func (o *ModTeamAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModTeamAppendUnprocessableEntityCode is the HTTP code returned for type ModTeamAppendUnprocessableEntity
const ModTeamAppendUnprocessableEntityCode int = 422

/*ModTeamAppendUnprocessableEntity Team is already assigned

swagger:response modTeamAppendUnprocessableEntity
*/
type ModTeamAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamAppendUnprocessableEntity creates ModTeamAppendUnprocessableEntity with default headers values
func NewModTeamAppendUnprocessableEntity() *ModTeamAppendUnprocessableEntity {

	return &ModTeamAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the mod team append unprocessable entity response
func (o *ModTeamAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *ModTeamAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team append unprocessable entity response
func (o *ModTeamAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ModTeamAppendDefault Some error unrelated to the handler

swagger:response modTeamAppendDefault
*/
type ModTeamAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModTeamAppendDefault creates ModTeamAppendDefault with default headers values
func NewModTeamAppendDefault(code int) *ModTeamAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &ModTeamAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the mod team append default response
func (o *ModTeamAppendDefault) WithStatusCode(code int) *ModTeamAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the mod team append default response
func (o *ModTeamAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the mod team append default response
func (o *ModTeamAppendDefault) WithPayload(payload *models.GeneralError) *ModTeamAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod team append default response
func (o *ModTeamAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModTeamAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
