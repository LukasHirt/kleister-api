// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ModCreateOKCode is the HTTP code returned for type ModCreateOK
const ModCreateOKCode int = 200

/*ModCreateOK The created mod data

swagger:response modCreateOK
*/
type ModCreateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Mod `json:"body,omitempty"`
}

// NewModCreateOK creates ModCreateOK with default headers values
func NewModCreateOK() *ModCreateOK {

	return &ModCreateOK{}
}

// WithPayload adds the payload to the mod create o k response
func (o *ModCreateOK) WithPayload(payload *models.Mod) *ModCreateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod create o k response
func (o *ModCreateOK) SetPayload(payload *models.Mod) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModCreateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModCreateForbiddenCode is the HTTP code returned for type ModCreateForbidden
const ModCreateForbiddenCode int = 403

/*ModCreateForbidden User is not authorized

swagger:response modCreateForbidden
*/
type ModCreateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModCreateForbidden creates ModCreateForbidden with default headers values
func NewModCreateForbidden() *ModCreateForbidden {

	return &ModCreateForbidden{}
}

// WithPayload adds the payload to the mod create forbidden response
func (o *ModCreateForbidden) WithPayload(payload *models.GeneralError) *ModCreateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod create forbidden response
func (o *ModCreateForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModCreateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModCreatePreconditionFailedCode is the HTTP code returned for type ModCreatePreconditionFailed
const ModCreatePreconditionFailedCode int = 412

/*ModCreatePreconditionFailed Failed to parse request body

swagger:response modCreatePreconditionFailed
*/
type ModCreatePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModCreatePreconditionFailed creates ModCreatePreconditionFailed with default headers values
func NewModCreatePreconditionFailed() *ModCreatePreconditionFailed {

	return &ModCreatePreconditionFailed{}
}

// WithPayload adds the payload to the mod create precondition failed response
func (o *ModCreatePreconditionFailed) WithPayload(payload *models.GeneralError) *ModCreatePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod create precondition failed response
func (o *ModCreatePreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModCreatePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModCreateUnprocessableEntityCode is the HTTP code returned for type ModCreateUnprocessableEntity
const ModCreateUnprocessableEntityCode int = 422

/*ModCreateUnprocessableEntity Failed to validate request

swagger:response modCreateUnprocessableEntity
*/
type ModCreateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewModCreateUnprocessableEntity creates ModCreateUnprocessableEntity with default headers values
func NewModCreateUnprocessableEntity() *ModCreateUnprocessableEntity {

	return &ModCreateUnprocessableEntity{}
}

// WithPayload adds the payload to the mod create unprocessable entity response
func (o *ModCreateUnprocessableEntity) WithPayload(payload *models.ValidationError) *ModCreateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod create unprocessable entity response
func (o *ModCreateUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModCreateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ModCreateDefault Some error unrelated to the handler

swagger:response modCreateDefault
*/
type ModCreateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModCreateDefault creates ModCreateDefault with default headers values
func NewModCreateDefault(code int) *ModCreateDefault {
	if code <= 0 {
		code = 500
	}

	return &ModCreateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the mod create default response
func (o *ModCreateDefault) WithStatusCode(code int) *ModCreateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the mod create default response
func (o *ModCreateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the mod create default response
func (o *ModCreateDefault) WithPayload(payload *models.GeneralError) *ModCreateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod create default response
func (o *ModCreateDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModCreateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
