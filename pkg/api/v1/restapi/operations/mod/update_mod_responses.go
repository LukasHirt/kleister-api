// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// UpdateModOKCode is the HTTP code returned for type UpdateModOK
const UpdateModOKCode int = 200

/*
UpdateModOK The updated mod details

swagger:response updateModOK
*/
type UpdateModOK struct {

	/*
	  In: Body
	*/
	Payload *models.Mod `json:"body,omitempty"`
}

// NewUpdateModOK creates UpdateModOK with default headers values
func NewUpdateModOK() *UpdateModOK {

	return &UpdateModOK{}
}

// WithPayload adds the payload to the update mod o k response
func (o *UpdateModOK) WithPayload(payload *models.Mod) *UpdateModOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update mod o k response
func (o *UpdateModOK) SetPayload(payload *models.Mod) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateModOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateModForbiddenCode is the HTTP code returned for type UpdateModForbidden
const UpdateModForbiddenCode int = 403

/*
UpdateModForbidden User is not authorized

swagger:response updateModForbidden
*/
type UpdateModForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUpdateModForbidden creates UpdateModForbidden with default headers values
func NewUpdateModForbidden() *UpdateModForbidden {

	return &UpdateModForbidden{}
}

// WithPayload adds the payload to the update mod forbidden response
func (o *UpdateModForbidden) WithPayload(payload *models.GeneralError) *UpdateModForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update mod forbidden response
func (o *UpdateModForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateModForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateModNotFoundCode is the HTTP code returned for type UpdateModNotFound
const UpdateModNotFoundCode int = 404

/*
UpdateModNotFound Mod not found

swagger:response updateModNotFound
*/
type UpdateModNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUpdateModNotFound creates UpdateModNotFound with default headers values
func NewUpdateModNotFound() *UpdateModNotFound {

	return &UpdateModNotFound{}
}

// WithPayload adds the payload to the update mod not found response
func (o *UpdateModNotFound) WithPayload(payload *models.GeneralError) *UpdateModNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update mod not found response
func (o *UpdateModNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateModNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateModUnprocessableEntityCode is the HTTP code returned for type UpdateModUnprocessableEntity
const UpdateModUnprocessableEntityCode int = 422

/*
UpdateModUnprocessableEntity Failed to validate request

swagger:response updateModUnprocessableEntity
*/
type UpdateModUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewUpdateModUnprocessableEntity creates UpdateModUnprocessableEntity with default headers values
func NewUpdateModUnprocessableEntity() *UpdateModUnprocessableEntity {

	return &UpdateModUnprocessableEntity{}
}

// WithPayload adds the payload to the update mod unprocessable entity response
func (o *UpdateModUnprocessableEntity) WithPayload(payload *models.ValidationError) *UpdateModUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update mod unprocessable entity response
func (o *UpdateModUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateModUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
UpdateModDefault Some error unrelated to the handler

swagger:response updateModDefault
*/
type UpdateModDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUpdateModDefault creates UpdateModDefault with default headers values
func NewUpdateModDefault(code int) *UpdateModDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateModDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update mod default response
func (o *UpdateModDefault) WithStatusCode(code int) *UpdateModDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update mod default response
func (o *UpdateModDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update mod default response
func (o *UpdateModDefault) WithPayload(payload *models.GeneralError) *UpdateModDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update mod default response
func (o *UpdateModDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateModDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
