// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ModUserIndexOKCode is the HTTP code returned for type ModUserIndexOK
const ModUserIndexOKCode int = 200

/*ModUserIndexOK A collection of mod users

swagger:response modUserIndexOK
*/
type ModUserIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.UserMod `json:"body,omitempty"`
}

// NewModUserIndexOK creates ModUserIndexOK with default headers values
func NewModUserIndexOK() *ModUserIndexOK {

	return &ModUserIndexOK{}
}

// WithPayload adds the payload to the mod user index o k response
func (o *ModUserIndexOK) WithPayload(payload []*models.UserMod) *ModUserIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user index o k response
func (o *ModUserIndexOK) SetPayload(payload []*models.UserMod) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserMod, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ModUserIndexForbiddenCode is the HTTP code returned for type ModUserIndexForbidden
const ModUserIndexForbiddenCode int = 403

/*ModUserIndexForbidden User is not authorized

swagger:response modUserIndexForbidden
*/
type ModUserIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUserIndexForbidden creates ModUserIndexForbidden with default headers values
func NewModUserIndexForbidden() *ModUserIndexForbidden {

	return &ModUserIndexForbidden{}
}

// WithPayload adds the payload to the mod user index forbidden response
func (o *ModUserIndexForbidden) WithPayload(payload *models.GeneralError) *ModUserIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user index forbidden response
func (o *ModUserIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ModUserIndexDefault Some error unrelated to the handler

swagger:response modUserIndexDefault
*/
type ModUserIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUserIndexDefault creates ModUserIndexDefault with default headers values
func NewModUserIndexDefault(code int) *ModUserIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &ModUserIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the mod user index default response
func (o *ModUserIndexDefault) WithStatusCode(code int) *ModUserIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the mod user index default response
func (o *ModUserIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the mod user index default response
func (o *ModUserIndexDefault) WithPayload(payload *models.GeneralError) *ModUserIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user index default response
func (o *ModUserIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
