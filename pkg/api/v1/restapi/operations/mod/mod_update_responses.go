// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ModUpdateOKCode is the HTTP code returned for type ModUpdateOK
const ModUpdateOKCode int = 200

/*ModUpdateOK The updated mod details

swagger:response modUpdateOK
*/
type ModUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Mod `json:"body,omitempty"`
}

// NewModUpdateOK creates ModUpdateOK with default headers values
func NewModUpdateOK() *ModUpdateOK {

	return &ModUpdateOK{}
}

// WithPayload adds the payload to the mod update o k response
func (o *ModUpdateOK) WithPayload(payload *models.Mod) *ModUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod update o k response
func (o *ModUpdateOK) SetPayload(payload *models.Mod) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModUpdateForbiddenCode is the HTTP code returned for type ModUpdateForbidden
const ModUpdateForbiddenCode int = 403

/*ModUpdateForbidden User is not authorized

swagger:response modUpdateForbidden
*/
type ModUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUpdateForbidden creates ModUpdateForbidden with default headers values
func NewModUpdateForbidden() *ModUpdateForbidden {

	return &ModUpdateForbidden{}
}

// WithPayload adds the payload to the mod update forbidden response
func (o *ModUpdateForbidden) WithPayload(payload *models.GeneralError) *ModUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod update forbidden response
func (o *ModUpdateForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModUpdatePreconditionFailedCode is the HTTP code returned for type ModUpdatePreconditionFailed
const ModUpdatePreconditionFailedCode int = 412

/*ModUpdatePreconditionFailed Failed to parse request body

swagger:response modUpdatePreconditionFailed
*/
type ModUpdatePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUpdatePreconditionFailed creates ModUpdatePreconditionFailed with default headers values
func NewModUpdatePreconditionFailed() *ModUpdatePreconditionFailed {

	return &ModUpdatePreconditionFailed{}
}

// WithPayload adds the payload to the mod update precondition failed response
func (o *ModUpdatePreconditionFailed) WithPayload(payload *models.GeneralError) *ModUpdatePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod update precondition failed response
func (o *ModUpdatePreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUpdatePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModUpdateUnprocessableEntityCode is the HTTP code returned for type ModUpdateUnprocessableEntity
const ModUpdateUnprocessableEntityCode int = 422

/*ModUpdateUnprocessableEntity Failed to validate request

swagger:response modUpdateUnprocessableEntity
*/
type ModUpdateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewModUpdateUnprocessableEntity creates ModUpdateUnprocessableEntity with default headers values
func NewModUpdateUnprocessableEntity() *ModUpdateUnprocessableEntity {

	return &ModUpdateUnprocessableEntity{}
}

// WithPayload adds the payload to the mod update unprocessable entity response
func (o *ModUpdateUnprocessableEntity) WithPayload(payload *models.ValidationError) *ModUpdateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod update unprocessable entity response
func (o *ModUpdateUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUpdateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ModUpdateDefault Some error unrelated to the handler

swagger:response modUpdateDefault
*/
type ModUpdateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUpdateDefault creates ModUpdateDefault with default headers values
func NewModUpdateDefault(code int) *ModUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &ModUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the mod update default response
func (o *ModUpdateDefault) WithStatusCode(code int) *ModUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the mod update default response
func (o *ModUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the mod update default response
func (o *ModUpdateDefault) WithPayload(payload *models.GeneralError) *ModUpdateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod update default response
func (o *ModUpdateDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
