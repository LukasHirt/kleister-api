// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ModTeamIndexHandlerFunc turns a function with the right signature into a mod team index handler
type ModTeamIndexHandlerFunc func(ModTeamIndexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ModTeamIndexHandlerFunc) Handle(params ModTeamIndexParams) middleware.Responder {
	return fn(params)
}

// ModTeamIndexHandler interface for that can handle valid mod team index params
type ModTeamIndexHandler interface {
	Handle(ModTeamIndexParams) middleware.Responder
}

// NewModTeamIndex creates a new http.Handler for the mod team index operation
func NewModTeamIndex(ctx *middleware.Context, handler ModTeamIndexHandler) *ModTeamIndex {
	return &ModTeamIndex{Context: ctx, Handler: handler}
}

/*ModTeamIndex swagger:route GET /mods/{modID}/teams mod modTeamIndex

Fetch all teams assigned to mod

*/
type ModTeamIndex struct {
	Context *middleware.Context
	Handler ModTeamIndexHandler
}

func (o *ModTeamIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewModTeamIndexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
