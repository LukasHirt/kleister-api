// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// VersionBuildAppendOKCode is the HTTP code returned for type VersionBuildAppendOK
const VersionBuildAppendOKCode int = 200

/*VersionBuildAppendOK Plain success message

swagger:response versionBuildAppendOK
*/
type VersionBuildAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewVersionBuildAppendOK creates VersionBuildAppendOK with default headers values
func NewVersionBuildAppendOK() *VersionBuildAppendOK {

	return &VersionBuildAppendOK{}
}

// WithPayload adds the payload to the version build append o k response
func (o *VersionBuildAppendOK) WithPayload(payload *models.GeneralError) *VersionBuildAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the version build append o k response
func (o *VersionBuildAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VersionBuildAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VersionBuildAppendForbiddenCode is the HTTP code returned for type VersionBuildAppendForbidden
const VersionBuildAppendForbiddenCode int = 403

/*VersionBuildAppendForbidden User is not authorized

swagger:response versionBuildAppendForbidden
*/
type VersionBuildAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewVersionBuildAppendForbidden creates VersionBuildAppendForbidden with default headers values
func NewVersionBuildAppendForbidden() *VersionBuildAppendForbidden {

	return &VersionBuildAppendForbidden{}
}

// WithPayload adds the payload to the version build append forbidden response
func (o *VersionBuildAppendForbidden) WithPayload(payload *models.GeneralError) *VersionBuildAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the version build append forbidden response
func (o *VersionBuildAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VersionBuildAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VersionBuildAppendPreconditionFailedCode is the HTTP code returned for type VersionBuildAppendPreconditionFailed
const VersionBuildAppendPreconditionFailedCode int = 412

/*VersionBuildAppendPreconditionFailed Failed to parse request body

swagger:response versionBuildAppendPreconditionFailed
*/
type VersionBuildAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewVersionBuildAppendPreconditionFailed creates VersionBuildAppendPreconditionFailed with default headers values
func NewVersionBuildAppendPreconditionFailed() *VersionBuildAppendPreconditionFailed {

	return &VersionBuildAppendPreconditionFailed{}
}

// WithPayload adds the payload to the version build append precondition failed response
func (o *VersionBuildAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *VersionBuildAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the version build append precondition failed response
func (o *VersionBuildAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VersionBuildAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VersionBuildAppendUnprocessableEntityCode is the HTTP code returned for type VersionBuildAppendUnprocessableEntity
const VersionBuildAppendUnprocessableEntityCode int = 422

/*VersionBuildAppendUnprocessableEntity Build is already appended

swagger:response versionBuildAppendUnprocessableEntity
*/
type VersionBuildAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewVersionBuildAppendUnprocessableEntity creates VersionBuildAppendUnprocessableEntity with default headers values
func NewVersionBuildAppendUnprocessableEntity() *VersionBuildAppendUnprocessableEntity {

	return &VersionBuildAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the version build append unprocessable entity response
func (o *VersionBuildAppendUnprocessableEntity) WithPayload(payload *models.ValidationError) *VersionBuildAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the version build append unprocessable entity response
func (o *VersionBuildAppendUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VersionBuildAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*VersionBuildAppendDefault Some error unrelated to the handler

swagger:response versionBuildAppendDefault
*/
type VersionBuildAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewVersionBuildAppendDefault creates VersionBuildAppendDefault with default headers values
func NewVersionBuildAppendDefault(code int) *VersionBuildAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &VersionBuildAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the version build append default response
func (o *VersionBuildAppendDefault) WithStatusCode(code int) *VersionBuildAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the version build append default response
func (o *VersionBuildAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the version build append default response
func (o *VersionBuildAppendDefault) WithPayload(payload *models.GeneralError) *VersionBuildAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the version build append default response
func (o *VersionBuildAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VersionBuildAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
