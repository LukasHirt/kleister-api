// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ModUserAppendOKCode is the HTTP code returned for type ModUserAppendOK
const ModUserAppendOKCode int = 200

/*ModUserAppendOK Plain success message

swagger:response modUserAppendOK
*/
type ModUserAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUserAppendOK creates ModUserAppendOK with default headers values
func NewModUserAppendOK() *ModUserAppendOK {

	return &ModUserAppendOK{}
}

// WithPayload adds the payload to the mod user append o k response
func (o *ModUserAppendOK) WithPayload(payload *models.GeneralError) *ModUserAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user append o k response
func (o *ModUserAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModUserAppendForbiddenCode is the HTTP code returned for type ModUserAppendForbidden
const ModUserAppendForbiddenCode int = 403

/*ModUserAppendForbidden User is not authorized

swagger:response modUserAppendForbidden
*/
type ModUserAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUserAppendForbidden creates ModUserAppendForbidden with default headers values
func NewModUserAppendForbidden() *ModUserAppendForbidden {

	return &ModUserAppendForbidden{}
}

// WithPayload adds the payload to the mod user append forbidden response
func (o *ModUserAppendForbidden) WithPayload(payload *models.GeneralError) *ModUserAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user append forbidden response
func (o *ModUserAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModUserAppendPreconditionFailedCode is the HTTP code returned for type ModUserAppendPreconditionFailed
const ModUserAppendPreconditionFailedCode int = 412

/*ModUserAppendPreconditionFailed Failed to parse request body

swagger:response modUserAppendPreconditionFailed
*/
type ModUserAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUserAppendPreconditionFailed creates ModUserAppendPreconditionFailed with default headers values
func NewModUserAppendPreconditionFailed() *ModUserAppendPreconditionFailed {

	return &ModUserAppendPreconditionFailed{}
}

// WithPayload adds the payload to the mod user append precondition failed response
func (o *ModUserAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *ModUserAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user append precondition failed response
func (o *ModUserAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ModUserAppendUnprocessableEntityCode is the HTTP code returned for type ModUserAppendUnprocessableEntity
const ModUserAppendUnprocessableEntityCode int = 422

/*ModUserAppendUnprocessableEntity User is already assigned

swagger:response modUserAppendUnprocessableEntity
*/
type ModUserAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUserAppendUnprocessableEntity creates ModUserAppendUnprocessableEntity with default headers values
func NewModUserAppendUnprocessableEntity() *ModUserAppendUnprocessableEntity {

	return &ModUserAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the mod user append unprocessable entity response
func (o *ModUserAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *ModUserAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user append unprocessable entity response
func (o *ModUserAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ModUserAppendDefault Some error unrelated to the handler

swagger:response modUserAppendDefault
*/
type ModUserAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewModUserAppendDefault creates ModUserAppendDefault with default headers values
func NewModUserAppendDefault(code int) *ModUserAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &ModUserAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the mod user append default response
func (o *ModUserAppendDefault) WithStatusCode(code int) *ModUserAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the mod user append default response
func (o *ModUserAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the mod user append default response
func (o *ModUserAppendDefault) WithPayload(payload *models.GeneralError) *ModUserAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mod user append default response
func (o *ModUserAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ModUserAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
