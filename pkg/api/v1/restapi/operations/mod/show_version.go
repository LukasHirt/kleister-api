// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ShowVersionHandlerFunc turns a function with the right signature into a show version handler
type ShowVersionHandlerFunc func(ShowVersionParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowVersionHandlerFunc) Handle(params ShowVersionParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// ShowVersionHandler interface for that can handle valid show version params
type ShowVersionHandler interface {
	Handle(ShowVersionParams, *models.User) middleware.Responder
}

// NewShowVersion creates a new http.Handler for the show version operation
func NewShowVersion(ctx *middleware.Context, handler ShowVersionHandler) *ShowVersion {
	return &ShowVersion{Context: ctx, Handler: handler}
}

/*
	ShowVersion swagger:route GET /mods/{mod_id}/versions/{version_id} mod showVersion

Fetch a specific version for a mod
*/
type ShowVersion struct {
	Context *middleware.Context
	Handler ShowVersionHandler
}

func (o *ShowVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShowVersionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
