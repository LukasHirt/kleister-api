// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ModUserPermHandlerFunc turns a function with the right signature into a mod user perm handler
type ModUserPermHandlerFunc func(ModUserPermParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ModUserPermHandlerFunc) Handle(params ModUserPermParams) middleware.Responder {
	return fn(params)
}

// ModUserPermHandler interface for that can handle valid mod user perm params
type ModUserPermHandler interface {
	Handle(ModUserPermParams) middleware.Responder
}

// NewModUserPerm creates a new http.Handler for the mod user perm operation
func NewModUserPerm(ctx *middleware.Context, handler ModUserPermHandler) *ModUserPerm {
	return &ModUserPerm{Context: ctx, Handler: handler}
}

/*ModUserPerm swagger:route PUT /mods/{modID}/users mod modUserPerm

Update user perms for mod

*/
type ModUserPerm struct {
	Context *middleware.Context
	Handler ModUserPermHandler
}

func (o *ModUserPerm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewModUserPermParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
