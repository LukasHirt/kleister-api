// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListModsHandlerFunc turns a function with the right signature into a list mods handler
type ListModsHandlerFunc func(ListModsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListModsHandlerFunc) Handle(params ListModsParams) middleware.Responder {
	return fn(params)
}

// ListModsHandler interface for that can handle valid list mods params
type ListModsHandler interface {
	Handle(ListModsParams) middleware.Responder
}

// NewListMods creates a new http.Handler for the list mods operation
func NewListMods(ctx *middleware.Context, handler ListModsHandler) *ListMods {
	return &ListMods{Context: ctx, Handler: handler}
}

/*ListMods swagger:route GET /mods mod listMods

Fetch all available mods

*/
type ListMods struct {
	Context *middleware.Context
	Handler ListModsHandler
}

func (o *ListMods) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListModsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
