// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// UserModAppendOKCode is the HTTP code returned for type UserModAppendOK
const UserModAppendOKCode int = 200

/*UserModAppendOK Plain success message

swagger:response userModAppendOK
*/
type UserModAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserModAppendOK creates UserModAppendOK with default headers values
func NewUserModAppendOK() *UserModAppendOK {

	return &UserModAppendOK{}
}

// WithPayload adds the payload to the user mod append o k response
func (o *UserModAppendOK) WithPayload(payload *models.GeneralError) *UserModAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod append o k response
func (o *UserModAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserModAppendForbiddenCode is the HTTP code returned for type UserModAppendForbidden
const UserModAppendForbiddenCode int = 403

/*UserModAppendForbidden User is not authorized

swagger:response userModAppendForbidden
*/
type UserModAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserModAppendForbidden creates UserModAppendForbidden with default headers values
func NewUserModAppendForbidden() *UserModAppendForbidden {

	return &UserModAppendForbidden{}
}

// WithPayload adds the payload to the user mod append forbidden response
func (o *UserModAppendForbidden) WithPayload(payload *models.GeneralError) *UserModAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod append forbidden response
func (o *UserModAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserModAppendPreconditionFailedCode is the HTTP code returned for type UserModAppendPreconditionFailed
const UserModAppendPreconditionFailedCode int = 412

/*UserModAppendPreconditionFailed Failed to parse request body

swagger:response userModAppendPreconditionFailed
*/
type UserModAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserModAppendPreconditionFailed creates UserModAppendPreconditionFailed with default headers values
func NewUserModAppendPreconditionFailed() *UserModAppendPreconditionFailed {

	return &UserModAppendPreconditionFailed{}
}

// WithPayload adds the payload to the user mod append precondition failed response
func (o *UserModAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *UserModAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod append precondition failed response
func (o *UserModAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserModAppendUnprocessableEntityCode is the HTTP code returned for type UserModAppendUnprocessableEntity
const UserModAppendUnprocessableEntityCode int = 422

/*UserModAppendUnprocessableEntity Mod is already assigned

swagger:response userModAppendUnprocessableEntity
*/
type UserModAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserModAppendUnprocessableEntity creates UserModAppendUnprocessableEntity with default headers values
func NewUserModAppendUnprocessableEntity() *UserModAppendUnprocessableEntity {

	return &UserModAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the user mod append unprocessable entity response
func (o *UserModAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *UserModAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod append unprocessable entity response
func (o *UserModAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UserModAppendDefault Some error unrelated to the handler

swagger:response userModAppendDefault
*/
type UserModAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserModAppendDefault creates UserModAppendDefault with default headers values
func NewUserModAppendDefault(code int) *UserModAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &UserModAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user mod append default response
func (o *UserModAppendDefault) WithStatusCode(code int) *UserModAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user mod append default response
func (o *UserModAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user mod append default response
func (o *UserModAppendDefault) WithPayload(payload *models.GeneralError) *UserModAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod append default response
func (o *UserModAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
