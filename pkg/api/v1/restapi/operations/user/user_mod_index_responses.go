// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// UserModIndexOKCode is the HTTP code returned for type UserModIndexOK
const UserModIndexOKCode int = 200

/*UserModIndexOK A collection of user mods

swagger:response userModIndexOK
*/
type UserModIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.UserMod `json:"body,omitempty"`
}

// NewUserModIndexOK creates UserModIndexOK with default headers values
func NewUserModIndexOK() *UserModIndexOK {

	return &UserModIndexOK{}
}

// WithPayload adds the payload to the user mod index o k response
func (o *UserModIndexOK) WithPayload(payload []*models.UserMod) *UserModIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod index o k response
func (o *UserModIndexOK) SetPayload(payload []*models.UserMod) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserMod, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// UserModIndexForbiddenCode is the HTTP code returned for type UserModIndexForbidden
const UserModIndexForbiddenCode int = 403

/*UserModIndexForbidden User is not authorized

swagger:response userModIndexForbidden
*/
type UserModIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserModIndexForbidden creates UserModIndexForbidden with default headers values
func NewUserModIndexForbidden() *UserModIndexForbidden {

	return &UserModIndexForbidden{}
}

// WithPayload adds the payload to the user mod index forbidden response
func (o *UserModIndexForbidden) WithPayload(payload *models.GeneralError) *UserModIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod index forbidden response
func (o *UserModIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UserModIndexDefault Some error unrelated to the handler

swagger:response userModIndexDefault
*/
type UserModIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserModIndexDefault creates UserModIndexDefault with default headers values
func NewUserModIndexDefault(code int) *UserModIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &UserModIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user mod index default response
func (o *UserModIndexDefault) WithStatusCode(code int) *UserModIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user mod index default response
func (o *UserModIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user mod index default response
func (o *UserModIndexDefault) WithPayload(payload *models.GeneralError) *UserModIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user mod index default response
func (o *UserModIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserModIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
