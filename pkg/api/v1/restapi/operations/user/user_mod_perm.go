// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserModPermHandlerFunc turns a function with the right signature into a user mod perm handler
type UserModPermHandlerFunc func(UserModPermParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserModPermHandlerFunc) Handle(params UserModPermParams) middleware.Responder {
	return fn(params)
}

// UserModPermHandler interface for that can handle valid user mod perm params
type UserModPermHandler interface {
	Handle(UserModPermParams) middleware.Responder
}

// NewUserModPerm creates a new http.Handler for the user mod perm operation
func NewUserModPerm(ctx *middleware.Context, handler UserModPermHandler) *UserModPerm {
	return &UserModPerm{Context: ctx, Handler: handler}
}

/*UserModPerm swagger:route PUT /users/{userID}/mods user userModPerm

Update mod perms for user

*/
type UserModPerm struct {
	Context *middleware.Context
	Handler UserModPermHandler
}

func (o *UserModPerm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserModPermParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
