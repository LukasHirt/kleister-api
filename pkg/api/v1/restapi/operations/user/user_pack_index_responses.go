// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// UserPackIndexOKCode is the HTTP code returned for type UserPackIndexOK
const UserPackIndexOKCode int = 200

/*UserPackIndexOK A collection of team packs

swagger:response userPackIndexOK
*/
type UserPackIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.UserPack `json:"body,omitempty"`
}

// NewUserPackIndexOK creates UserPackIndexOK with default headers values
func NewUserPackIndexOK() *UserPackIndexOK {

	return &UserPackIndexOK{}
}

// WithPayload adds the payload to the user pack index o k response
func (o *UserPackIndexOK) WithPayload(payload []*models.UserPack) *UserPackIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack index o k response
func (o *UserPackIndexOK) SetPayload(payload []*models.UserPack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserPack, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// UserPackIndexForbiddenCode is the HTTP code returned for type UserPackIndexForbidden
const UserPackIndexForbiddenCode int = 403

/*UserPackIndexForbidden User is not authorized

swagger:response userPackIndexForbidden
*/
type UserPackIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserPackIndexForbidden creates UserPackIndexForbidden with default headers values
func NewUserPackIndexForbidden() *UserPackIndexForbidden {

	return &UserPackIndexForbidden{}
}

// WithPayload adds the payload to the user pack index forbidden response
func (o *UserPackIndexForbidden) WithPayload(payload *models.GeneralError) *UserPackIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack index forbidden response
func (o *UserPackIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UserPackIndexDefault Some error unrelated to the handler

swagger:response userPackIndexDefault
*/
type UserPackIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserPackIndexDefault creates UserPackIndexDefault with default headers values
func NewUserPackIndexDefault(code int) *UserPackIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &UserPackIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user pack index default response
func (o *UserPackIndexDefault) WithStatusCode(code int) *UserPackIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user pack index default response
func (o *UserPackIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user pack index default response
func (o *UserPackIndexDefault) WithPayload(payload *models.GeneralError) *UserPackIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack index default response
func (o *UserPackIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
