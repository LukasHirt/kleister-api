// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// UserPackAppendOKCode is the HTTP code returned for type UserPackAppendOK
const UserPackAppendOKCode int = 200

/*UserPackAppendOK Plain success message

swagger:response userPackAppendOK
*/
type UserPackAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserPackAppendOK creates UserPackAppendOK with default headers values
func NewUserPackAppendOK() *UserPackAppendOK {

	return &UserPackAppendOK{}
}

// WithPayload adds the payload to the user pack append o k response
func (o *UserPackAppendOK) WithPayload(payload *models.GeneralError) *UserPackAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack append o k response
func (o *UserPackAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserPackAppendForbiddenCode is the HTTP code returned for type UserPackAppendForbidden
const UserPackAppendForbiddenCode int = 403

/*UserPackAppendForbidden User is not authorized

swagger:response userPackAppendForbidden
*/
type UserPackAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserPackAppendForbidden creates UserPackAppendForbidden with default headers values
func NewUserPackAppendForbidden() *UserPackAppendForbidden {

	return &UserPackAppendForbidden{}
}

// WithPayload adds the payload to the user pack append forbidden response
func (o *UserPackAppendForbidden) WithPayload(payload *models.GeneralError) *UserPackAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack append forbidden response
func (o *UserPackAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserPackAppendPreconditionFailedCode is the HTTP code returned for type UserPackAppendPreconditionFailed
const UserPackAppendPreconditionFailedCode int = 412

/*UserPackAppendPreconditionFailed Failed to parse request body

swagger:response userPackAppendPreconditionFailed
*/
type UserPackAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserPackAppendPreconditionFailed creates UserPackAppendPreconditionFailed with default headers values
func NewUserPackAppendPreconditionFailed() *UserPackAppendPreconditionFailed {

	return &UserPackAppendPreconditionFailed{}
}

// WithPayload adds the payload to the user pack append precondition failed response
func (o *UserPackAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *UserPackAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack append precondition failed response
func (o *UserPackAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserPackAppendUnprocessableEntityCode is the HTTP code returned for type UserPackAppendUnprocessableEntity
const UserPackAppendUnprocessableEntityCode int = 422

/*UserPackAppendUnprocessableEntity Pack is already assigned

swagger:response userPackAppendUnprocessableEntity
*/
type UserPackAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserPackAppendUnprocessableEntity creates UserPackAppendUnprocessableEntity with default headers values
func NewUserPackAppendUnprocessableEntity() *UserPackAppendUnprocessableEntity {

	return &UserPackAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the user pack append unprocessable entity response
func (o *UserPackAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *UserPackAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack append unprocessable entity response
func (o *UserPackAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UserPackAppendDefault Some error unrelated to the handler

swagger:response userPackAppendDefault
*/
type UserPackAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserPackAppendDefault creates UserPackAppendDefault with default headers values
func NewUserPackAppendDefault(code int) *UserPackAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &UserPackAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user pack append default response
func (o *UserPackAppendDefault) WithStatusCode(code int) *UserPackAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user pack append default response
func (o *UserPackAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user pack append default response
func (o *UserPackAppendDefault) WithPayload(payload *models.GeneralError) *UserPackAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user pack append default response
func (o *UserPackAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserPackAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
