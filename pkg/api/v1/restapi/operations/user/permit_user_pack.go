// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PermitUserPackHandlerFunc turns a function with the right signature into a permit user pack handler
type PermitUserPackHandlerFunc func(PermitUserPackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PermitUserPackHandlerFunc) Handle(params PermitUserPackParams) middleware.Responder {
	return fn(params)
}

// PermitUserPackHandler interface for that can handle valid permit user pack params
type PermitUserPackHandler interface {
	Handle(PermitUserPackParams) middleware.Responder
}

// NewPermitUserPack creates a new http.Handler for the permit user pack operation
func NewPermitUserPack(ctx *middleware.Context, handler PermitUserPackHandler) *PermitUserPack {
	return &PermitUserPack{Context: ctx, Handler: handler}
}

/*PermitUserPack swagger:route PUT /users/{userID}/packs user permitUserPack

Update pack perms for user

*/
type PermitUserPack struct {
	Context *middleware.Context
	Handler PermitUserPackHandler
}

func (o *PermitUserPack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPermitUserPackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
