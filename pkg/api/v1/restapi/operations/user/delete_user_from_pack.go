// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteUserFromPackHandlerFunc turns a function with the right signature into a delete user from pack handler
type DeleteUserFromPackHandlerFunc func(DeleteUserFromPackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteUserFromPackHandlerFunc) Handle(params DeleteUserFromPackParams) middleware.Responder {
	return fn(params)
}

// DeleteUserFromPackHandler interface for that can handle valid delete user from pack params
type DeleteUserFromPackHandler interface {
	Handle(DeleteUserFromPackParams) middleware.Responder
}

// NewDeleteUserFromPack creates a new http.Handler for the delete user from pack operation
func NewDeleteUserFromPack(ctx *middleware.Context, handler DeleteUserFromPackHandler) *DeleteUserFromPack {
	return &DeleteUserFromPack{Context: ctx, Handler: handler}
}

/*DeleteUserFromPack swagger:route DELETE /users/{userID}/packs user deleteUserFromPack

Remove a pack from user

*/
type DeleteUserFromPack struct {
	Context *middleware.Context
	Handler DeleteUserFromPackHandler
}

func (o *DeleteUserFromPack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteUserFromPackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
