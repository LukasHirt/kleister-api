// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateForgeHandlerFunc turns a function with the right signature into a update forge handler
type UpdateForgeHandlerFunc func(UpdateForgeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateForgeHandlerFunc) Handle(params UpdateForgeParams) middleware.Responder {
	return fn(params)
}

// UpdateForgeHandler interface for that can handle valid update forge params
type UpdateForgeHandler interface {
	Handle(UpdateForgeParams) middleware.Responder
}

// NewUpdateForge creates a new http.Handler for the update forge operation
func NewUpdateForge(ctx *middleware.Context, handler UpdateForgeHandler) *UpdateForge {
	return &UpdateForge{Context: ctx, Handler: handler}
}

/*UpdateForge swagger:route PUT /forge forge updateForge

Update the available Forge versions

*/
type UpdateForge struct {
	Context *middleware.Context
	Handler UpdateForgeHandler
}

func (o *UpdateForge) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateForgeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
