// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ForgeBuildAppendOKCode is the HTTP code returned for type ForgeBuildAppendOK
const ForgeBuildAppendOKCode int = 200

/*ForgeBuildAppendOK A collection of assigned builds

swagger:response forgeBuildAppendOK
*/
type ForgeBuildAppendOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Build `json:"body,omitempty"`
}

// NewForgeBuildAppendOK creates ForgeBuildAppendOK with default headers values
func NewForgeBuildAppendOK() *ForgeBuildAppendOK {

	return &ForgeBuildAppendOK{}
}

// WithPayload adds the payload to the forge build append o k response
func (o *ForgeBuildAppendOK) WithPayload(payload []*models.Build) *ForgeBuildAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build append o k response
func (o *ForgeBuildAppendOK) SetPayload(payload []*models.Build) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Build, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ForgeBuildAppendForbiddenCode is the HTTP code returned for type ForgeBuildAppendForbidden
const ForgeBuildAppendForbiddenCode int = 403

/*ForgeBuildAppendForbidden User is not authorized

swagger:response forgeBuildAppendForbidden
*/
type ForgeBuildAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewForgeBuildAppendForbidden creates ForgeBuildAppendForbidden with default headers values
func NewForgeBuildAppendForbidden() *ForgeBuildAppendForbidden {

	return &ForgeBuildAppendForbidden{}
}

// WithPayload adds the payload to the forge build append forbidden response
func (o *ForgeBuildAppendForbidden) WithPayload(payload *models.GeneralError) *ForgeBuildAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build append forbidden response
func (o *ForgeBuildAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ForgeBuildAppendPreconditionFailedCode is the HTTP code returned for type ForgeBuildAppendPreconditionFailed
const ForgeBuildAppendPreconditionFailedCode int = 412

/*ForgeBuildAppendPreconditionFailed Failed to parse request body

swagger:response forgeBuildAppendPreconditionFailed
*/
type ForgeBuildAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewForgeBuildAppendPreconditionFailed creates ForgeBuildAppendPreconditionFailed with default headers values
func NewForgeBuildAppendPreconditionFailed() *ForgeBuildAppendPreconditionFailed {

	return &ForgeBuildAppendPreconditionFailed{}
}

// WithPayload adds the payload to the forge build append precondition failed response
func (o *ForgeBuildAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *ForgeBuildAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build append precondition failed response
func (o *ForgeBuildAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ForgeBuildAppendUnprocessableEntityCode is the HTTP code returned for type ForgeBuildAppendUnprocessableEntity
const ForgeBuildAppendUnprocessableEntityCode int = 422

/*ForgeBuildAppendUnprocessableEntity Build is already appended

swagger:response forgeBuildAppendUnprocessableEntity
*/
type ForgeBuildAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewForgeBuildAppendUnprocessableEntity creates ForgeBuildAppendUnprocessableEntity with default headers values
func NewForgeBuildAppendUnprocessableEntity() *ForgeBuildAppendUnprocessableEntity {

	return &ForgeBuildAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the forge build append unprocessable entity response
func (o *ForgeBuildAppendUnprocessableEntity) WithPayload(payload *models.ValidationError) *ForgeBuildAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build append unprocessable entity response
func (o *ForgeBuildAppendUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ForgeBuildAppendDefault Some error unrelated to the handler

swagger:response forgeBuildAppendDefault
*/
type ForgeBuildAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewForgeBuildAppendDefault creates ForgeBuildAppendDefault with default headers values
func NewForgeBuildAppendDefault(code int) *ForgeBuildAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &ForgeBuildAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the forge build append default response
func (o *ForgeBuildAppendDefault) WithStatusCode(code int) *ForgeBuildAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the forge build append default response
func (o *ForgeBuildAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the forge build append default response
func (o *ForgeBuildAppendDefault) WithPayload(payload *models.GeneralError) *ForgeBuildAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build append default response
func (o *ForgeBuildAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
