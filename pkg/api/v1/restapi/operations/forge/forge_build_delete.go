// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ForgeBuildDeleteHandlerFunc turns a function with the right signature into a forge build delete handler
type ForgeBuildDeleteHandlerFunc func(ForgeBuildDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ForgeBuildDeleteHandlerFunc) Handle(params ForgeBuildDeleteParams) middleware.Responder {
	return fn(params)
}

// ForgeBuildDeleteHandler interface for that can handle valid forge build delete params
type ForgeBuildDeleteHandler interface {
	Handle(ForgeBuildDeleteParams) middleware.Responder
}

// NewForgeBuildDelete creates a new http.Handler for the forge build delete operation
func NewForgeBuildDelete(ctx *middleware.Context, handler ForgeBuildDeleteHandler) *ForgeBuildDelete {
	return &ForgeBuildDelete{Context: ctx, Handler: handler}
}

/*ForgeBuildDelete swagger:route DELETE /forge/{forgeID}/builds forge forgeBuildDelete

Unlink a build from a Forge version

*/
type ForgeBuildDelete struct {
	Context *middleware.Context
	Handler ForgeBuildDeleteHandler
}

func (o *ForgeBuildDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewForgeBuildDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
