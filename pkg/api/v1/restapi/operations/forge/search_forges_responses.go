// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// SearchForgesOKCode is the HTTP code returned for type SearchForgesOK
const SearchForgesOKCode int = 200

/*
SearchForgesOK A collection of Forge versions

swagger:response searchForgesOK
*/
type SearchForgesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Forge `json:"body,omitempty"`
}

// NewSearchForgesOK creates SearchForgesOK with default headers values
func NewSearchForgesOK() *SearchForgesOK {

	return &SearchForgesOK{}
}

// WithPayload adds the payload to the search forges o k response
func (o *SearchForgesOK) WithPayload(payload []*models.Forge) *SearchForgesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search forges o k response
func (o *SearchForgesOK) SetPayload(payload []*models.Forge) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchForgesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Forge, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SearchForgesForbiddenCode is the HTTP code returned for type SearchForgesForbidden
const SearchForgesForbiddenCode int = 403

/*
SearchForgesForbidden User is not authorized

swagger:response searchForgesForbidden
*/
type SearchForgesForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewSearchForgesForbidden creates SearchForgesForbidden with default headers values
func NewSearchForgesForbidden() *SearchForgesForbidden {

	return &SearchForgesForbidden{}
}

// WithPayload adds the payload to the search forges forbidden response
func (o *SearchForgesForbidden) WithPayload(payload *models.GeneralError) *SearchForgesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search forges forbidden response
func (o *SearchForgesForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchForgesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
SearchForgesDefault Some error unrelated to the handler

swagger:response searchForgesDefault
*/
type SearchForgesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewSearchForgesDefault creates SearchForgesDefault with default headers values
func NewSearchForgesDefault(code int) *SearchForgesDefault {
	if code <= 0 {
		code = 500
	}

	return &SearchForgesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the search forges default response
func (o *SearchForgesDefault) WithStatusCode(code int) *SearchForgesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the search forges default response
func (o *SearchForgesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the search forges default response
func (o *SearchForgesDefault) WithPayload(payload *models.GeneralError) *SearchForgesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search forges default response
func (o *SearchForgesDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchForgesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
