// Code generated by go-swagger; DO NOT EDIT.

package forge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ForgeBuildIndexOKCode is the HTTP code returned for type ForgeBuildIndexOK
const ForgeBuildIndexOKCode int = 200

/*ForgeBuildIndexOK A collection of assigned builds

swagger:response forgeBuildIndexOK
*/
type ForgeBuildIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Build `json:"body,omitempty"`
}

// NewForgeBuildIndexOK creates ForgeBuildIndexOK with default headers values
func NewForgeBuildIndexOK() *ForgeBuildIndexOK {

	return &ForgeBuildIndexOK{}
}

// WithPayload adds the payload to the forge build index o k response
func (o *ForgeBuildIndexOK) WithPayload(payload []*models.Build) *ForgeBuildIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build index o k response
func (o *ForgeBuildIndexOK) SetPayload(payload []*models.Build) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Build, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ForgeBuildIndexForbiddenCode is the HTTP code returned for type ForgeBuildIndexForbidden
const ForgeBuildIndexForbiddenCode int = 403

/*ForgeBuildIndexForbidden User is not authorized

swagger:response forgeBuildIndexForbidden
*/
type ForgeBuildIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewForgeBuildIndexForbidden creates ForgeBuildIndexForbidden with default headers values
func NewForgeBuildIndexForbidden() *ForgeBuildIndexForbidden {

	return &ForgeBuildIndexForbidden{}
}

// WithPayload adds the payload to the forge build index forbidden response
func (o *ForgeBuildIndexForbidden) WithPayload(payload *models.GeneralError) *ForgeBuildIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build index forbidden response
func (o *ForgeBuildIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ForgeBuildIndexDefault Some error unrelated to the handler

swagger:response forgeBuildIndexDefault
*/
type ForgeBuildIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewForgeBuildIndexDefault creates ForgeBuildIndexDefault with default headers values
func NewForgeBuildIndexDefault(code int) *ForgeBuildIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &ForgeBuildIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the forge build index default response
func (o *ForgeBuildIndexDefault) WithStatusCode(code int) *ForgeBuildIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the forge build index default response
func (o *ForgeBuildIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the forge build index default response
func (o *ForgeBuildIndexDefault) WithPayload(payload *models.GeneralError) *ForgeBuildIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the forge build index default response
func (o *ForgeBuildIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ForgeBuildIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
