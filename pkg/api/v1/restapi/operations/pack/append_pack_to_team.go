// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AppendPackToTeamHandlerFunc turns a function with the right signature into a append pack to team handler
type AppendPackToTeamHandlerFunc func(AppendPackToTeamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppendPackToTeamHandlerFunc) Handle(params AppendPackToTeamParams) middleware.Responder {
	return fn(params)
}

// AppendPackToTeamHandler interface for that can handle valid append pack to team params
type AppendPackToTeamHandler interface {
	Handle(AppendPackToTeamParams) middleware.Responder
}

// NewAppendPackToTeam creates a new http.Handler for the append pack to team operation
func NewAppendPackToTeam(ctx *middleware.Context, handler AppendPackToTeamHandler) *AppendPackToTeam {
	return &AppendPackToTeam{Context: ctx, Handler: handler}
}

/*AppendPackToTeam swagger:route POST /packs/{packID}/teams pack appendPackToTeam

Assign a team to pack

*/
type AppendPackToTeam struct {
	Context *middleware.Context
	Handler AppendPackToTeamHandler
}

func (o *AppendPackToTeam) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppendPackToTeamParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
