// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeletePackHandlerFunc turns a function with the right signature into a delete pack handler
type DeletePackHandlerFunc func(DeletePackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePackHandlerFunc) Handle(params DeletePackParams) middleware.Responder {
	return fn(params)
}

// DeletePackHandler interface for that can handle valid delete pack params
type DeletePackHandler interface {
	Handle(DeletePackParams) middleware.Responder
}

// NewDeletePack creates a new http.Handler for the delete pack operation
func NewDeletePack(ctx *middleware.Context, handler DeletePackHandler) *DeletePack {
	return &DeletePack{Context: ctx, Handler: handler}
}

/*DeletePack swagger:route DELETE /packs/{packID} pack deletePack

Delete a specific pack

*/
type DeletePack struct {
	Context *middleware.Context
	Handler DeletePackHandler
}

func (o *DeletePack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeletePackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
