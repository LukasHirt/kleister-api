// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BuildVersionIndexHandlerFunc turns a function with the right signature into a build version index handler
type BuildVersionIndexHandlerFunc func(BuildVersionIndexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BuildVersionIndexHandlerFunc) Handle(params BuildVersionIndexParams) middleware.Responder {
	return fn(params)
}

// BuildVersionIndexHandler interface for that can handle valid build version index params
type BuildVersionIndexHandler interface {
	Handle(BuildVersionIndexParams) middleware.Responder
}

// NewBuildVersionIndex creates a new http.Handler for the build version index operation
func NewBuildVersionIndex(ctx *middleware.Context, handler BuildVersionIndexHandler) *BuildVersionIndex {
	return &BuildVersionIndex{Context: ctx, Handler: handler}
}

/*BuildVersionIndex swagger:route GET /packs/{packID}/builds/{buildID}/versions pack buildVersionIndex

Fetch all versions assigned to build

*/
type BuildVersionIndex struct {
	Context *middleware.Context
	Handler BuildVersionIndexHandler
}

func (o *BuildVersionIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBuildVersionIndexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
