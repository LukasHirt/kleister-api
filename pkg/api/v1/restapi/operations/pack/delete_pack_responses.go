// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// DeletePackOKCode is the HTTP code returned for type DeletePackOK
const DeletePackOKCode int = 200

/*
DeletePackOK Plain success message

swagger:response deletePackOK
*/
type DeletePackOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeletePackOK creates DeletePackOK with default headers values
func NewDeletePackOK() *DeletePackOK {

	return &DeletePackOK{}
}

// WithPayload adds the payload to the delete pack o k response
func (o *DeletePackOK) WithPayload(payload *models.GeneralError) *DeletePackOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete pack o k response
func (o *DeletePackOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePackOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeletePackBadRequestCode is the HTTP code returned for type DeletePackBadRequest
const DeletePackBadRequestCode int = 400

/*
DeletePackBadRequest Failed to delete the pack

swagger:response deletePackBadRequest
*/
type DeletePackBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeletePackBadRequest creates DeletePackBadRequest with default headers values
func NewDeletePackBadRequest() *DeletePackBadRequest {

	return &DeletePackBadRequest{}
}

// WithPayload adds the payload to the delete pack bad request response
func (o *DeletePackBadRequest) WithPayload(payload *models.GeneralError) *DeletePackBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete pack bad request response
func (o *DeletePackBadRequest) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePackBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeletePackForbiddenCode is the HTTP code returned for type DeletePackForbidden
const DeletePackForbiddenCode int = 403

/*
DeletePackForbidden User is not authorized

swagger:response deletePackForbidden
*/
type DeletePackForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeletePackForbidden creates DeletePackForbidden with default headers values
func NewDeletePackForbidden() *DeletePackForbidden {

	return &DeletePackForbidden{}
}

// WithPayload adds the payload to the delete pack forbidden response
func (o *DeletePackForbidden) WithPayload(payload *models.GeneralError) *DeletePackForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete pack forbidden response
func (o *DeletePackForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePackForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeletePackNotFoundCode is the HTTP code returned for type DeletePackNotFound
const DeletePackNotFoundCode int = 404

/*
DeletePackNotFound Pack not found

swagger:response deletePackNotFound
*/
type DeletePackNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeletePackNotFound creates DeletePackNotFound with default headers values
func NewDeletePackNotFound() *DeletePackNotFound {

	return &DeletePackNotFound{}
}

// WithPayload adds the payload to the delete pack not found response
func (o *DeletePackNotFound) WithPayload(payload *models.GeneralError) *DeletePackNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete pack not found response
func (o *DeletePackNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePackNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
DeletePackDefault Some error unrelated to the handler

swagger:response deletePackDefault
*/
type DeletePackDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewDeletePackDefault creates DeletePackDefault with default headers values
func NewDeletePackDefault(code int) *DeletePackDefault {
	if code <= 0 {
		code = 500
	}

	return &DeletePackDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete pack default response
func (o *DeletePackDefault) WithStatusCode(code int) *DeletePackDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete pack default response
func (o *DeletePackDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete pack default response
func (o *DeletePackDefault) WithPayload(payload *models.GeneralError) *DeletePackDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete pack default response
func (o *DeletePackDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePackDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
