// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListPackUsersHandlerFunc turns a function with the right signature into a list pack users handler
type ListPackUsersHandlerFunc func(ListPackUsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListPackUsersHandlerFunc) Handle(params ListPackUsersParams) middleware.Responder {
	return fn(params)
}

// ListPackUsersHandler interface for that can handle valid list pack users params
type ListPackUsersHandler interface {
	Handle(ListPackUsersParams) middleware.Responder
}

// NewListPackUsers creates a new http.Handler for the list pack users operation
func NewListPackUsers(ctx *middleware.Context, handler ListPackUsersHandler) *ListPackUsers {
	return &ListPackUsers{Context: ctx, Handler: handler}
}

/*ListPackUsers swagger:route GET /packs/{packID}/users pack listPackUsers

Fetch all users assigned to pack

*/
type ListPackUsers struct {
	Context *middleware.Context
	Handler ListPackUsersHandler
}

func (o *ListPackUsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListPackUsersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
