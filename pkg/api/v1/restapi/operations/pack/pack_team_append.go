// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PackTeamAppendHandlerFunc turns a function with the right signature into a pack team append handler
type PackTeamAppendHandlerFunc func(PackTeamAppendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PackTeamAppendHandlerFunc) Handle(params PackTeamAppendParams) middleware.Responder {
	return fn(params)
}

// PackTeamAppendHandler interface for that can handle valid pack team append params
type PackTeamAppendHandler interface {
	Handle(PackTeamAppendParams) middleware.Responder
}

// NewPackTeamAppend creates a new http.Handler for the pack team append operation
func NewPackTeamAppend(ctx *middleware.Context, handler PackTeamAppendHandler) *PackTeamAppend {
	return &PackTeamAppend{Context: ctx, Handler: handler}
}

/*PackTeamAppend swagger:route POST /packs/{packID}/teams pack packTeamAppend

Assign a team to pack

*/
type PackTeamAppend struct {
	Context *middleware.Context
	Handler PackTeamAppendHandler
}

func (o *PackTeamAppend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPackTeamAppendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
