// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// PackUserAppendOKCode is the HTTP code returned for type PackUserAppendOK
const PackUserAppendOKCode int = 200

/*PackUserAppendOK Plain success message

swagger:response packUserAppendOK
*/
type PackUserAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUserAppendOK creates PackUserAppendOK with default headers values
func NewPackUserAppendOK() *PackUserAppendOK {

	return &PackUserAppendOK{}
}

// WithPayload adds the payload to the pack user append o k response
func (o *PackUserAppendOK) WithPayload(payload *models.GeneralError) *PackUserAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user append o k response
func (o *PackUserAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackUserAppendForbiddenCode is the HTTP code returned for type PackUserAppendForbidden
const PackUserAppendForbiddenCode int = 403

/*PackUserAppendForbidden User is not authorized

swagger:response packUserAppendForbidden
*/
type PackUserAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUserAppendForbidden creates PackUserAppendForbidden with default headers values
func NewPackUserAppendForbidden() *PackUserAppendForbidden {

	return &PackUserAppendForbidden{}
}

// WithPayload adds the payload to the pack user append forbidden response
func (o *PackUserAppendForbidden) WithPayload(payload *models.GeneralError) *PackUserAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user append forbidden response
func (o *PackUserAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackUserAppendPreconditionFailedCode is the HTTP code returned for type PackUserAppendPreconditionFailed
const PackUserAppendPreconditionFailedCode int = 412

/*PackUserAppendPreconditionFailed Failed to parse request body

swagger:response packUserAppendPreconditionFailed
*/
type PackUserAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUserAppendPreconditionFailed creates PackUserAppendPreconditionFailed with default headers values
func NewPackUserAppendPreconditionFailed() *PackUserAppendPreconditionFailed {

	return &PackUserAppendPreconditionFailed{}
}

// WithPayload adds the payload to the pack user append precondition failed response
func (o *PackUserAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *PackUserAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user append precondition failed response
func (o *PackUserAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackUserAppendUnprocessableEntityCode is the HTTP code returned for type PackUserAppendUnprocessableEntity
const PackUserAppendUnprocessableEntityCode int = 422

/*PackUserAppendUnprocessableEntity User is already assigned

swagger:response packUserAppendUnprocessableEntity
*/
type PackUserAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUserAppendUnprocessableEntity creates PackUserAppendUnprocessableEntity with default headers values
func NewPackUserAppendUnprocessableEntity() *PackUserAppendUnprocessableEntity {

	return &PackUserAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the pack user append unprocessable entity response
func (o *PackUserAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *PackUserAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user append unprocessable entity response
func (o *PackUserAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PackUserAppendDefault Some error unrelated to the handler

swagger:response packUserAppendDefault
*/
type PackUserAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUserAppendDefault creates PackUserAppendDefault with default headers values
func NewPackUserAppendDefault(code int) *PackUserAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &PackUserAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the pack user append default response
func (o *PackUserAppendDefault) WithStatusCode(code int) *PackUserAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the pack user append default response
func (o *PackUserAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the pack user append default response
func (o *PackUserAppendDefault) WithPayload(payload *models.GeneralError) *PackUserAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user append default response
func (o *PackUserAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
