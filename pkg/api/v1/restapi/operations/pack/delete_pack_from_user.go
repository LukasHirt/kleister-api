// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeletePackFromUserHandlerFunc turns a function with the right signature into a delete pack from user handler
type DeletePackFromUserHandlerFunc func(DeletePackFromUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePackFromUserHandlerFunc) Handle(params DeletePackFromUserParams) middleware.Responder {
	return fn(params)
}

// DeletePackFromUserHandler interface for that can handle valid delete pack from user params
type DeletePackFromUserHandler interface {
	Handle(DeletePackFromUserParams) middleware.Responder
}

// NewDeletePackFromUser creates a new http.Handler for the delete pack from user operation
func NewDeletePackFromUser(ctx *middleware.Context, handler DeletePackFromUserHandler) *DeletePackFromUser {
	return &DeletePackFromUser{Context: ctx, Handler: handler}
}

/*DeletePackFromUser swagger:route DELETE /packs/{packID}/users pack deletePackFromUser

Remove a user from pack

*/
type DeletePackFromUser struct {
	Context *middleware.Context
	Handler DeletePackFromUserHandler
}

func (o *DeletePackFromUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeletePackFromUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
