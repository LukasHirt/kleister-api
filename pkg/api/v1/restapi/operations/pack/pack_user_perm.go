// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PackUserPermHandlerFunc turns a function with the right signature into a pack user perm handler
type PackUserPermHandlerFunc func(PackUserPermParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PackUserPermHandlerFunc) Handle(params PackUserPermParams) middleware.Responder {
	return fn(params)
}

// PackUserPermHandler interface for that can handle valid pack user perm params
type PackUserPermHandler interface {
	Handle(PackUserPermParams) middleware.Responder
}

// NewPackUserPerm creates a new http.Handler for the pack user perm operation
func NewPackUserPerm(ctx *middleware.Context, handler PackUserPermHandler) *PackUserPerm {
	return &PackUserPerm{Context: ctx, Handler: handler}
}

/*PackUserPerm swagger:route PUT /packs/{packID}/users pack packUserPerm

Update user perms for pack

*/
type PackUserPerm struct {
	Context *middleware.Context
	Handler PackUserPermHandler
}

func (o *PackUserPerm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPackUserPermParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
