// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BuildIndexHandlerFunc turns a function with the right signature into a build index handler
type BuildIndexHandlerFunc func(BuildIndexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BuildIndexHandlerFunc) Handle(params BuildIndexParams) middleware.Responder {
	return fn(params)
}

// BuildIndexHandler interface for that can handle valid build index params
type BuildIndexHandler interface {
	Handle(BuildIndexParams) middleware.Responder
}

// NewBuildIndex creates a new http.Handler for the build index operation
func NewBuildIndex(ctx *middleware.Context, handler BuildIndexHandler) *BuildIndex {
	return &BuildIndex{Context: ctx, Handler: handler}
}

/*BuildIndex swagger:route GET /packs/{packID}/builds pack buildIndex

Fetch all available builds for a pack

*/
type BuildIndex struct {
	Context *middleware.Context
	Handler BuildIndexHandler
}

func (o *BuildIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBuildIndexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
