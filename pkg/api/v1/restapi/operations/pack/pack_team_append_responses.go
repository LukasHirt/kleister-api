// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// PackTeamAppendOKCode is the HTTP code returned for type PackTeamAppendOK
const PackTeamAppendOKCode int = 200

/*PackTeamAppendOK Plain success message

swagger:response packTeamAppendOK
*/
type PackTeamAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackTeamAppendOK creates PackTeamAppendOK with default headers values
func NewPackTeamAppendOK() *PackTeamAppendOK {

	return &PackTeamAppendOK{}
}

// WithPayload adds the payload to the pack team append o k response
func (o *PackTeamAppendOK) WithPayload(payload *models.GeneralError) *PackTeamAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team append o k response
func (o *PackTeamAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackTeamAppendForbiddenCode is the HTTP code returned for type PackTeamAppendForbidden
const PackTeamAppendForbiddenCode int = 403

/*PackTeamAppendForbidden User is not authorized

swagger:response packTeamAppendForbidden
*/
type PackTeamAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackTeamAppendForbidden creates PackTeamAppendForbidden with default headers values
func NewPackTeamAppendForbidden() *PackTeamAppendForbidden {

	return &PackTeamAppendForbidden{}
}

// WithPayload adds the payload to the pack team append forbidden response
func (o *PackTeamAppendForbidden) WithPayload(payload *models.GeneralError) *PackTeamAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team append forbidden response
func (o *PackTeamAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackTeamAppendPreconditionFailedCode is the HTTP code returned for type PackTeamAppendPreconditionFailed
const PackTeamAppendPreconditionFailedCode int = 412

/*PackTeamAppendPreconditionFailed Failed to parse request body

swagger:response packTeamAppendPreconditionFailed
*/
type PackTeamAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackTeamAppendPreconditionFailed creates PackTeamAppendPreconditionFailed with default headers values
func NewPackTeamAppendPreconditionFailed() *PackTeamAppendPreconditionFailed {

	return &PackTeamAppendPreconditionFailed{}
}

// WithPayload adds the payload to the pack team append precondition failed response
func (o *PackTeamAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *PackTeamAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team append precondition failed response
func (o *PackTeamAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackTeamAppendUnprocessableEntityCode is the HTTP code returned for type PackTeamAppendUnprocessableEntity
const PackTeamAppendUnprocessableEntityCode int = 422

/*PackTeamAppendUnprocessableEntity Team is already assigned

swagger:response packTeamAppendUnprocessableEntity
*/
type PackTeamAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackTeamAppendUnprocessableEntity creates PackTeamAppendUnprocessableEntity with default headers values
func NewPackTeamAppendUnprocessableEntity() *PackTeamAppendUnprocessableEntity {

	return &PackTeamAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the pack team append unprocessable entity response
func (o *PackTeamAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *PackTeamAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team append unprocessable entity response
func (o *PackTeamAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PackTeamAppendDefault Some error unrelated to the handler

swagger:response packTeamAppendDefault
*/
type PackTeamAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackTeamAppendDefault creates PackTeamAppendDefault with default headers values
func NewPackTeamAppendDefault(code int) *PackTeamAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &PackTeamAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the pack team append default response
func (o *PackTeamAppendDefault) WithStatusCode(code int) *PackTeamAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the pack team append default response
func (o *PackTeamAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the pack team append default response
func (o *PackTeamAppendDefault) WithPayload(payload *models.GeneralError) *PackTeamAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team append default response
func (o *PackTeamAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
