// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// PermitPackTeamOKCode is the HTTP code returned for type PermitPackTeamOK
const PermitPackTeamOKCode int = 200

/*
PermitPackTeamOK Plain success message

swagger:response permitPackTeamOK
*/
type PermitPackTeamOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPermitPackTeamOK creates PermitPackTeamOK with default headers values
func NewPermitPackTeamOK() *PermitPackTeamOK {

	return &PermitPackTeamOK{}
}

// WithPayload adds the payload to the permit pack team o k response
func (o *PermitPackTeamOK) WithPayload(payload *models.GeneralError) *PermitPackTeamOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the permit pack team o k response
func (o *PermitPackTeamOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PermitPackTeamOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PermitPackTeamForbiddenCode is the HTTP code returned for type PermitPackTeamForbidden
const PermitPackTeamForbiddenCode int = 403

/*
PermitPackTeamForbidden User is not authorized

swagger:response permitPackTeamForbidden
*/
type PermitPackTeamForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPermitPackTeamForbidden creates PermitPackTeamForbidden with default headers values
func NewPermitPackTeamForbidden() *PermitPackTeamForbidden {

	return &PermitPackTeamForbidden{}
}

// WithPayload adds the payload to the permit pack team forbidden response
func (o *PermitPackTeamForbidden) WithPayload(payload *models.GeneralError) *PermitPackTeamForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the permit pack team forbidden response
func (o *PermitPackTeamForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PermitPackTeamForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PermitPackTeamNotFoundCode is the HTTP code returned for type PermitPackTeamNotFound
const PermitPackTeamNotFoundCode int = 404

/*
PermitPackTeamNotFound Pack or team not found

swagger:response permitPackTeamNotFound
*/
type PermitPackTeamNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPermitPackTeamNotFound creates PermitPackTeamNotFound with default headers values
func NewPermitPackTeamNotFound() *PermitPackTeamNotFound {

	return &PermitPackTeamNotFound{}
}

// WithPayload adds the payload to the permit pack team not found response
func (o *PermitPackTeamNotFound) WithPayload(payload *models.GeneralError) *PermitPackTeamNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the permit pack team not found response
func (o *PermitPackTeamNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PermitPackTeamNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PermitPackTeamPreconditionFailedCode is the HTTP code returned for type PermitPackTeamPreconditionFailed
const PermitPackTeamPreconditionFailedCode int = 412

/*
PermitPackTeamPreconditionFailed Team is not assigned

swagger:response permitPackTeamPreconditionFailed
*/
type PermitPackTeamPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPermitPackTeamPreconditionFailed creates PermitPackTeamPreconditionFailed with default headers values
func NewPermitPackTeamPreconditionFailed() *PermitPackTeamPreconditionFailed {

	return &PermitPackTeamPreconditionFailed{}
}

// WithPayload adds the payload to the permit pack team precondition failed response
func (o *PermitPackTeamPreconditionFailed) WithPayload(payload *models.GeneralError) *PermitPackTeamPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the permit pack team precondition failed response
func (o *PermitPackTeamPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PermitPackTeamPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PermitPackTeamUnprocessableEntityCode is the HTTP code returned for type PermitPackTeamUnprocessableEntity
const PermitPackTeamUnprocessableEntityCode int = 422

/*
PermitPackTeamUnprocessableEntity Failed to validate request

swagger:response permitPackTeamUnprocessableEntity
*/
type PermitPackTeamUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewPermitPackTeamUnprocessableEntity creates PermitPackTeamUnprocessableEntity with default headers values
func NewPermitPackTeamUnprocessableEntity() *PermitPackTeamUnprocessableEntity {

	return &PermitPackTeamUnprocessableEntity{}
}

// WithPayload adds the payload to the permit pack team unprocessable entity response
func (o *PermitPackTeamUnprocessableEntity) WithPayload(payload *models.ValidationError) *PermitPackTeamUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the permit pack team unprocessable entity response
func (o *PermitPackTeamUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PermitPackTeamUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PermitPackTeamDefault Some error unrelated to the handler

swagger:response permitPackTeamDefault
*/
type PermitPackTeamDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPermitPackTeamDefault creates PermitPackTeamDefault with default headers values
func NewPermitPackTeamDefault(code int) *PermitPackTeamDefault {
	if code <= 0 {
		code = 500
	}

	return &PermitPackTeamDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the permit pack team default response
func (o *PermitPackTeamDefault) WithStatusCode(code int) *PermitPackTeamDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the permit pack team default response
func (o *PermitPackTeamDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the permit pack team default response
func (o *PermitPackTeamDefault) WithPayload(payload *models.GeneralError) *PermitPackTeamDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the permit pack team default response
func (o *PermitPackTeamDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PermitPackTeamDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
