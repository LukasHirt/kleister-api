// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PackUserDeleteHandlerFunc turns a function with the right signature into a pack user delete handler
type PackUserDeleteHandlerFunc func(PackUserDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PackUserDeleteHandlerFunc) Handle(params PackUserDeleteParams) middleware.Responder {
	return fn(params)
}

// PackUserDeleteHandler interface for that can handle valid pack user delete params
type PackUserDeleteHandler interface {
	Handle(PackUserDeleteParams) middleware.Responder
}

// NewPackUserDelete creates a new http.Handler for the pack user delete operation
func NewPackUserDelete(ctx *middleware.Context, handler PackUserDeleteHandler) *PackUserDelete {
	return &PackUserDelete{Context: ctx, Handler: handler}
}

/*PackUserDelete swagger:route DELETE /packs/{packID}/users pack packUserDelete

Remove a user from pack

*/
type PackUserDelete struct {
	Context *middleware.Context
	Handler PackUserDeleteHandler
}

func (o *PackUserDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPackUserDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
