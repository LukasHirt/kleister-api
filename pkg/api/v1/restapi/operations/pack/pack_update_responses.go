// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// PackUpdateOKCode is the HTTP code returned for type PackUpdateOK
const PackUpdateOKCode int = 200

/*PackUpdateOK The updated pack details

swagger:response packUpdateOK
*/
type PackUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Pack `json:"body,omitempty"`
}

// NewPackUpdateOK creates PackUpdateOK with default headers values
func NewPackUpdateOK() *PackUpdateOK {

	return &PackUpdateOK{}
}

// WithPayload adds the payload to the pack update o k response
func (o *PackUpdateOK) WithPayload(payload *models.Pack) *PackUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack update o k response
func (o *PackUpdateOK) SetPayload(payload *models.Pack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackUpdateForbiddenCode is the HTTP code returned for type PackUpdateForbidden
const PackUpdateForbiddenCode int = 403

/*PackUpdateForbidden User is not authorized

swagger:response packUpdateForbidden
*/
type PackUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUpdateForbidden creates PackUpdateForbidden with default headers values
func NewPackUpdateForbidden() *PackUpdateForbidden {

	return &PackUpdateForbidden{}
}

// WithPayload adds the payload to the pack update forbidden response
func (o *PackUpdateForbidden) WithPayload(payload *models.GeneralError) *PackUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack update forbidden response
func (o *PackUpdateForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackUpdatePreconditionFailedCode is the HTTP code returned for type PackUpdatePreconditionFailed
const PackUpdatePreconditionFailedCode int = 412

/*PackUpdatePreconditionFailed Failed to parse request body

swagger:response packUpdatePreconditionFailed
*/
type PackUpdatePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUpdatePreconditionFailed creates PackUpdatePreconditionFailed with default headers values
func NewPackUpdatePreconditionFailed() *PackUpdatePreconditionFailed {

	return &PackUpdatePreconditionFailed{}
}

// WithPayload adds the payload to the pack update precondition failed response
func (o *PackUpdatePreconditionFailed) WithPayload(payload *models.GeneralError) *PackUpdatePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack update precondition failed response
func (o *PackUpdatePreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUpdatePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PackUpdateUnprocessableEntityCode is the HTTP code returned for type PackUpdateUnprocessableEntity
const PackUpdateUnprocessableEntityCode int = 422

/*PackUpdateUnprocessableEntity Failed to validate request

swagger:response packUpdateUnprocessableEntity
*/
type PackUpdateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewPackUpdateUnprocessableEntity creates PackUpdateUnprocessableEntity with default headers values
func NewPackUpdateUnprocessableEntity() *PackUpdateUnprocessableEntity {

	return &PackUpdateUnprocessableEntity{}
}

// WithPayload adds the payload to the pack update unprocessable entity response
func (o *PackUpdateUnprocessableEntity) WithPayload(payload *models.ValidationError) *PackUpdateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack update unprocessable entity response
func (o *PackUpdateUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUpdateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PackUpdateDefault Some error unrelated to the handler

swagger:response packUpdateDefault
*/
type PackUpdateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUpdateDefault creates PackUpdateDefault with default headers values
func NewPackUpdateDefault(code int) *PackUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &PackUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the pack update default response
func (o *PackUpdateDefault) WithStatusCode(code int) *PackUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the pack update default response
func (o *PackUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the pack update default response
func (o *PackUpdateDefault) WithPayload(payload *models.GeneralError) *PackUpdateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack update default response
func (o *PackUpdateDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
