// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// PackUserIndexOKCode is the HTTP code returned for type PackUserIndexOK
const PackUserIndexOKCode int = 200

/*PackUserIndexOK A collection of pack users

swagger:response packUserIndexOK
*/
type PackUserIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.UserPack `json:"body,omitempty"`
}

// NewPackUserIndexOK creates PackUserIndexOK with default headers values
func NewPackUserIndexOK() *PackUserIndexOK {

	return &PackUserIndexOK{}
}

// WithPayload adds the payload to the pack user index o k response
func (o *PackUserIndexOK) WithPayload(payload []*models.UserPack) *PackUserIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user index o k response
func (o *PackUserIndexOK) SetPayload(payload []*models.UserPack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserPack, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PackUserIndexForbiddenCode is the HTTP code returned for type PackUserIndexForbidden
const PackUserIndexForbiddenCode int = 403

/*PackUserIndexForbidden User is not authorized

swagger:response packUserIndexForbidden
*/
type PackUserIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUserIndexForbidden creates PackUserIndexForbidden with default headers values
func NewPackUserIndexForbidden() *PackUserIndexForbidden {

	return &PackUserIndexForbidden{}
}

// WithPayload adds the payload to the pack user index forbidden response
func (o *PackUserIndexForbidden) WithPayload(payload *models.GeneralError) *PackUserIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user index forbidden response
func (o *PackUserIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PackUserIndexDefault Some error unrelated to the handler

swagger:response packUserIndexDefault
*/
type PackUserIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackUserIndexDefault creates PackUserIndexDefault with default headers values
func NewPackUserIndexDefault(code int) *PackUserIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &PackUserIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the pack user index default response
func (o *PackUserIndexDefault) WithStatusCode(code int) *PackUserIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the pack user index default response
func (o *PackUserIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the pack user index default response
func (o *PackUserIndexDefault) WithPayload(payload *models.GeneralError) *PackUserIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack user index default response
func (o *PackUserIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackUserIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
