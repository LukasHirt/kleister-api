// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// AppendPackToTeamOKCode is the HTTP code returned for type AppendPackToTeamOK
const AppendPackToTeamOKCode int = 200

/*AppendPackToTeamOK Plain success message

swagger:response appendPackToTeamOK
*/
type AppendPackToTeamOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendPackToTeamOK creates AppendPackToTeamOK with default headers values
func NewAppendPackToTeamOK() *AppendPackToTeamOK {

	return &AppendPackToTeamOK{}
}

// WithPayload adds the payload to the append pack to team o k response
func (o *AppendPackToTeamOK) WithPayload(payload *models.GeneralError) *AppendPackToTeamOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append pack to team o k response
func (o *AppendPackToTeamOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendPackToTeamOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendPackToTeamForbiddenCode is the HTTP code returned for type AppendPackToTeamForbidden
const AppendPackToTeamForbiddenCode int = 403

/*AppendPackToTeamForbidden User is not authorized

swagger:response appendPackToTeamForbidden
*/
type AppendPackToTeamForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendPackToTeamForbidden creates AppendPackToTeamForbidden with default headers values
func NewAppendPackToTeamForbidden() *AppendPackToTeamForbidden {

	return &AppendPackToTeamForbidden{}
}

// WithPayload adds the payload to the append pack to team forbidden response
func (o *AppendPackToTeamForbidden) WithPayload(payload *models.GeneralError) *AppendPackToTeamForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append pack to team forbidden response
func (o *AppendPackToTeamForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendPackToTeamForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendPackToTeamNotFoundCode is the HTTP code returned for type AppendPackToTeamNotFound
const AppendPackToTeamNotFoundCode int = 404

/*AppendPackToTeamNotFound Pack or team not found

swagger:response appendPackToTeamNotFound
*/
type AppendPackToTeamNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendPackToTeamNotFound creates AppendPackToTeamNotFound with default headers values
func NewAppendPackToTeamNotFound() *AppendPackToTeamNotFound {

	return &AppendPackToTeamNotFound{}
}

// WithPayload adds the payload to the append pack to team not found response
func (o *AppendPackToTeamNotFound) WithPayload(payload *models.GeneralError) *AppendPackToTeamNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append pack to team not found response
func (o *AppendPackToTeamNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendPackToTeamNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendPackToTeamPreconditionFailedCode is the HTTP code returned for type AppendPackToTeamPreconditionFailed
const AppendPackToTeamPreconditionFailedCode int = 412

/*AppendPackToTeamPreconditionFailed Team is already assigned

swagger:response appendPackToTeamPreconditionFailed
*/
type AppendPackToTeamPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendPackToTeamPreconditionFailed creates AppendPackToTeamPreconditionFailed with default headers values
func NewAppendPackToTeamPreconditionFailed() *AppendPackToTeamPreconditionFailed {

	return &AppendPackToTeamPreconditionFailed{}
}

// WithPayload adds the payload to the append pack to team precondition failed response
func (o *AppendPackToTeamPreconditionFailed) WithPayload(payload *models.GeneralError) *AppendPackToTeamPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append pack to team precondition failed response
func (o *AppendPackToTeamPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendPackToTeamPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendPackToTeamUnprocessableEntityCode is the HTTP code returned for type AppendPackToTeamUnprocessableEntity
const AppendPackToTeamUnprocessableEntityCode int = 422

/*AppendPackToTeamUnprocessableEntity Failed to validate request

swagger:response appendPackToTeamUnprocessableEntity
*/
type AppendPackToTeamUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewAppendPackToTeamUnprocessableEntity creates AppendPackToTeamUnprocessableEntity with default headers values
func NewAppendPackToTeamUnprocessableEntity() *AppendPackToTeamUnprocessableEntity {

	return &AppendPackToTeamUnprocessableEntity{}
}

// WithPayload adds the payload to the append pack to team unprocessable entity response
func (o *AppendPackToTeamUnprocessableEntity) WithPayload(payload *models.ValidationError) *AppendPackToTeamUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append pack to team unprocessable entity response
func (o *AppendPackToTeamUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendPackToTeamUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AppendPackToTeamDefault Some error unrelated to the handler

swagger:response appendPackToTeamDefault
*/
type AppendPackToTeamDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendPackToTeamDefault creates AppendPackToTeamDefault with default headers values
func NewAppendPackToTeamDefault(code int) *AppendPackToTeamDefault {
	if code <= 0 {
		code = 500
	}

	return &AppendPackToTeamDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the append pack to team default response
func (o *AppendPackToTeamDefault) WithStatusCode(code int) *AppendPackToTeamDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the append pack to team default response
func (o *AppendPackToTeamDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the append pack to team default response
func (o *AppendPackToTeamDefault) WithPayload(payload *models.GeneralError) *AppendPackToTeamDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append pack to team default response
func (o *AppendPackToTeamDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendPackToTeamDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
