// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// PackTeamIndexOKCode is the HTTP code returned for type PackTeamIndexOK
const PackTeamIndexOKCode int = 200

/*PackTeamIndexOK A collection of pack teams

swagger:response packTeamIndexOK
*/
type PackTeamIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.TeamPack `json:"body,omitempty"`
}

// NewPackTeamIndexOK creates PackTeamIndexOK with default headers values
func NewPackTeamIndexOK() *PackTeamIndexOK {

	return &PackTeamIndexOK{}
}

// WithPayload adds the payload to the pack team index o k response
func (o *PackTeamIndexOK) WithPayload(payload []*models.TeamPack) *PackTeamIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team index o k response
func (o *PackTeamIndexOK) SetPayload(payload []*models.TeamPack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.TeamPack, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PackTeamIndexForbiddenCode is the HTTP code returned for type PackTeamIndexForbidden
const PackTeamIndexForbiddenCode int = 403

/*PackTeamIndexForbidden User is not authorized

swagger:response packTeamIndexForbidden
*/
type PackTeamIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackTeamIndexForbidden creates PackTeamIndexForbidden with default headers values
func NewPackTeamIndexForbidden() *PackTeamIndexForbidden {

	return &PackTeamIndexForbidden{}
}

// WithPayload adds the payload to the pack team index forbidden response
func (o *PackTeamIndexForbidden) WithPayload(payload *models.GeneralError) *PackTeamIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team index forbidden response
func (o *PackTeamIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PackTeamIndexDefault Some error unrelated to the handler

swagger:response packTeamIndexDefault
*/
type PackTeamIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewPackTeamIndexDefault creates PackTeamIndexDefault with default headers values
func NewPackTeamIndexDefault(code int) *PackTeamIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &PackTeamIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the pack team index default response
func (o *PackTeamIndexDefault) WithStatusCode(code int) *PackTeamIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the pack team index default response
func (o *PackTeamIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the pack team index default response
func (o *PackTeamIndexDefault) WithPayload(payload *models.GeneralError) *PackTeamIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pack team index default response
func (o *PackTeamIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PackTeamIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
