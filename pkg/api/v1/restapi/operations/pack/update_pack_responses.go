// Code generated by go-swagger; DO NOT EDIT.

package pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// UpdatePackOKCode is the HTTP code returned for type UpdatePackOK
const UpdatePackOKCode int = 200

/*UpdatePackOK The updated pack details

swagger:response updatePackOK
*/
type UpdatePackOK struct {

	/*
	  In: Body
	*/
	Payload *models.Pack `json:"body,omitempty"`
}

// NewUpdatePackOK creates UpdatePackOK with default headers values
func NewUpdatePackOK() *UpdatePackOK {

	return &UpdatePackOK{}
}

// WithPayload adds the payload to the update pack o k response
func (o *UpdatePackOK) WithPayload(payload *models.Pack) *UpdatePackOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update pack o k response
func (o *UpdatePackOK) SetPayload(payload *models.Pack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePackOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePackForbiddenCode is the HTTP code returned for type UpdatePackForbidden
const UpdatePackForbiddenCode int = 403

/*UpdatePackForbidden User is not authorized

swagger:response updatePackForbidden
*/
type UpdatePackForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUpdatePackForbidden creates UpdatePackForbidden with default headers values
func NewUpdatePackForbidden() *UpdatePackForbidden {

	return &UpdatePackForbidden{}
}

// WithPayload adds the payload to the update pack forbidden response
func (o *UpdatePackForbidden) WithPayload(payload *models.GeneralError) *UpdatePackForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update pack forbidden response
func (o *UpdatePackForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePackForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePackPreconditionFailedCode is the HTTP code returned for type UpdatePackPreconditionFailed
const UpdatePackPreconditionFailedCode int = 412

/*UpdatePackPreconditionFailed Failed to parse request body

swagger:response updatePackPreconditionFailed
*/
type UpdatePackPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUpdatePackPreconditionFailed creates UpdatePackPreconditionFailed with default headers values
func NewUpdatePackPreconditionFailed() *UpdatePackPreconditionFailed {

	return &UpdatePackPreconditionFailed{}
}

// WithPayload adds the payload to the update pack precondition failed response
func (o *UpdatePackPreconditionFailed) WithPayload(payload *models.GeneralError) *UpdatePackPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update pack precondition failed response
func (o *UpdatePackPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePackPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePackUnprocessableEntityCode is the HTTP code returned for type UpdatePackUnprocessableEntity
const UpdatePackUnprocessableEntityCode int = 422

/*UpdatePackUnprocessableEntity Failed to validate request

swagger:response updatePackUnprocessableEntity
*/
type UpdatePackUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewUpdatePackUnprocessableEntity creates UpdatePackUnprocessableEntity with default headers values
func NewUpdatePackUnprocessableEntity() *UpdatePackUnprocessableEntity {

	return &UpdatePackUnprocessableEntity{}
}

// WithPayload adds the payload to the update pack unprocessable entity response
func (o *UpdatePackUnprocessableEntity) WithPayload(payload *models.ValidationError) *UpdatePackUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update pack unprocessable entity response
func (o *UpdatePackUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePackUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdatePackDefault Some error unrelated to the handler

swagger:response updatePackDefault
*/
type UpdatePackDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUpdatePackDefault creates UpdatePackDefault with default headers values
func NewUpdatePackDefault(code int) *UpdatePackDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdatePackDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update pack default response
func (o *UpdatePackDefault) WithStatusCode(code int) *UpdatePackDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update pack default response
func (o *UpdatePackDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update pack default response
func (o *UpdatePackDefault) WithPayload(payload *models.GeneralError) *UpdatePackDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update pack default response
func (o *UpdatePackDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePackDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
