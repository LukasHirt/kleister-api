// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/auth"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/forge"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/minecraft"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/mod"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/pack"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/profile"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/team"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/user"
)

// NewKleisterAPI creates a new Kleister instance
func NewKleisterAPI(spec *loads.Document) *KleisterAPI {
	return &KleisterAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		PackAppendBuildToVersionHandler: pack.AppendBuildToVersionHandlerFunc(func(params pack.AppendBuildToVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation PackAppendBuildToVersion has not yet been implemented")
		}),
		ForgeAppendForgeToBuildHandler: forge.AppendForgeToBuildHandlerFunc(func(params forge.AppendForgeToBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeAppendForgeToBuild has not yet been implemented")
		}),
		MinecraftAppendMinecraftToBuildHandler: minecraft.AppendMinecraftToBuildHandlerFunc(func(params minecraft.AppendMinecraftToBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftAppendMinecraftToBuild has not yet been implemented")
		}),
		ModAppendModToTeamHandler: mod.AppendModToTeamHandlerFunc(func(params mod.AppendModToTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation ModAppendModToTeam has not yet been implemented")
		}),
		ModAppendModToUserHandler: mod.AppendModToUserHandlerFunc(func(params mod.AppendModToUserParams) middleware.Responder {
			return middleware.NotImplemented("operation ModAppendModToUser has not yet been implemented")
		}),
		PackAppendPackToTeamHandler: pack.AppendPackToTeamHandlerFunc(func(params pack.AppendPackToTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation PackAppendPackToTeam has not yet been implemented")
		}),
		PackAppendPackToUserHandler: pack.AppendPackToUserHandlerFunc(func(params pack.AppendPackToUserParams) middleware.Responder {
			return middleware.NotImplemented("operation PackAppendPackToUser has not yet been implemented")
		}),
		TeamAppendTeamToModHandler: team.AppendTeamToModHandlerFunc(func(params team.AppendTeamToModParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamAppendTeamToMod has not yet been implemented")
		}),
		TeamAppendTeamToPackHandler: team.AppendTeamToPackHandlerFunc(func(params team.AppendTeamToPackParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamAppendTeamToPack has not yet been implemented")
		}),
		TeamAppendTeamToUserHandler: team.AppendTeamToUserHandlerFunc(func(params team.AppendTeamToUserParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamAppendTeamToUser has not yet been implemented")
		}),
		UserAppendUserToModHandler: user.AppendUserToModHandlerFunc(func(params user.AppendUserToModParams) middleware.Responder {
			return middleware.NotImplemented("operation UserAppendUserToMod has not yet been implemented")
		}),
		UserAppendUserToPackHandler: user.AppendUserToPackHandlerFunc(func(params user.AppendUserToPackParams) middleware.Responder {
			return middleware.NotImplemented("operation UserAppendUserToPack has not yet been implemented")
		}),
		UserAppendUserToTeamHandler: user.AppendUserToTeamHandlerFunc(func(params user.AppendUserToTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation UserAppendUserToTeam has not yet been implemented")
		}),
		ModAppendVersionToBuildHandler: mod.AppendVersionToBuildHandlerFunc(func(params mod.AppendVersionToBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation ModAppendVersionToBuild has not yet been implemented")
		}),
		PackCreateBuildHandler: pack.CreateBuildHandlerFunc(func(params pack.CreateBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation PackCreateBuild has not yet been implemented")
		}),
		ModCreateModHandler: mod.CreateModHandlerFunc(func(params mod.CreateModParams) middleware.Responder {
			return middleware.NotImplemented("operation ModCreateMod has not yet been implemented")
		}),
		PackCreatePackHandler: pack.CreatePackHandlerFunc(func(params pack.CreatePackParams) middleware.Responder {
			return middleware.NotImplemented("operation PackCreatePack has not yet been implemented")
		}),
		TeamCreateTeamHandler: team.CreateTeamHandlerFunc(func(params team.CreateTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamCreateTeam has not yet been implemented")
		}),
		UserCreateUserHandler: user.CreateUserHandlerFunc(func(params user.CreateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UserCreateUser has not yet been implemented")
		}),
		ModCreateVersionHandler: mod.CreateVersionHandlerFunc(func(params mod.CreateVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ModCreateVersion has not yet been implemented")
		}),
		PackDeleteBuildHandler: pack.DeleteBuildHandlerFunc(func(params pack.DeleteBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation PackDeleteBuild has not yet been implemented")
		}),
		PackDeleteBuildFromVersionHandler: pack.DeleteBuildFromVersionHandlerFunc(func(params pack.DeleteBuildFromVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation PackDeleteBuildFromVersion has not yet been implemented")
		}),
		ForgeDeleteForgeFromBuildHandler: forge.DeleteForgeFromBuildHandlerFunc(func(params forge.DeleteForgeFromBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeDeleteForgeFromBuild has not yet been implemented")
		}),
		MinecraftDeleteMinecraftFromBuildHandler: minecraft.DeleteMinecraftFromBuildHandlerFunc(func(params minecraft.DeleteMinecraftFromBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftDeleteMinecraftFromBuild has not yet been implemented")
		}),
		ModDeleteModHandler: mod.DeleteModHandlerFunc(func(params mod.DeleteModParams) middleware.Responder {
			return middleware.NotImplemented("operation ModDeleteMod has not yet been implemented")
		}),
		ModDeleteModFromTeamHandler: mod.DeleteModFromTeamHandlerFunc(func(params mod.DeleteModFromTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation ModDeleteModFromTeam has not yet been implemented")
		}),
		ModDeleteModFromUserHandler: mod.DeleteModFromUserHandlerFunc(func(params mod.DeleteModFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation ModDeleteModFromUser has not yet been implemented")
		}),
		PackDeletePackHandler: pack.DeletePackHandlerFunc(func(params pack.DeletePackParams) middleware.Responder {
			return middleware.NotImplemented("operation PackDeletePack has not yet been implemented")
		}),
		PackDeletePackFromTeamHandler: pack.DeletePackFromTeamHandlerFunc(func(params pack.DeletePackFromTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation PackDeletePackFromTeam has not yet been implemented")
		}),
		PackDeletePackFromUserHandler: pack.DeletePackFromUserHandlerFunc(func(params pack.DeletePackFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation PackDeletePackFromUser has not yet been implemented")
		}),
		TeamDeleteTeamHandler: team.DeleteTeamHandlerFunc(func(params team.DeleteTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamDeleteTeam has not yet been implemented")
		}),
		TeamDeleteTeamFromModHandler: team.DeleteTeamFromModHandlerFunc(func(params team.DeleteTeamFromModParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamDeleteTeamFromMod has not yet been implemented")
		}),
		TeamDeleteTeamFromPackHandler: team.DeleteTeamFromPackHandlerFunc(func(params team.DeleteTeamFromPackParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamDeleteTeamFromPack has not yet been implemented")
		}),
		TeamDeleteTeamFromUserHandler: team.DeleteTeamFromUserHandlerFunc(func(params team.DeleteTeamFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamDeleteTeamFromUser has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UserDeleteUser has not yet been implemented")
		}),
		UserDeleteUserFromModHandler: user.DeleteUserFromModHandlerFunc(func(params user.DeleteUserFromModParams) middleware.Responder {
			return middleware.NotImplemented("operation UserDeleteUserFromMod has not yet been implemented")
		}),
		UserDeleteUserFromPackHandler: user.DeleteUserFromPackHandlerFunc(func(params user.DeleteUserFromPackParams) middleware.Responder {
			return middleware.NotImplemented("operation UserDeleteUserFromPack has not yet been implemented")
		}),
		UserDeleteUserFromTeamHandler: user.DeleteUserFromTeamHandlerFunc(func(params user.DeleteUserFromTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation UserDeleteUserFromTeam has not yet been implemented")
		}),
		ModDeleteVersionHandler: mod.DeleteVersionHandlerFunc(func(params mod.DeleteVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ModDeleteVersion has not yet been implemented")
		}),
		ModDeleteVersionFromBuildHandler: mod.DeleteVersionFromBuildHandlerFunc(func(params mod.DeleteVersionFromBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation ModDeleteVersionFromBuild has not yet been implemented")
		}),
		PackListBuildVersionsHandler: pack.ListBuildVersionsHandlerFunc(func(params pack.ListBuildVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation PackListBuildVersions has not yet been implemented")
		}),
		PackListBuildsHandler: pack.ListBuildsHandlerFunc(func(params pack.ListBuildsParams) middleware.Responder {
			return middleware.NotImplemented("operation PackListBuilds has not yet been implemented")
		}),
		ForgeListForgeBuildsHandler: forge.ListForgeBuildsHandlerFunc(func(params forge.ListForgeBuildsParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeListForgeBuilds has not yet been implemented")
		}),
		ForgeListForgesHandler: forge.ListForgesHandlerFunc(func(params forge.ListForgesParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeListForges has not yet been implemented")
		}),
		MinecraftListMinecraftBuildsHandler: minecraft.ListMinecraftBuildsHandlerFunc(func(params minecraft.ListMinecraftBuildsParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftListMinecraftBuilds has not yet been implemented")
		}),
		MinecraftListMinecraftsHandler: minecraft.ListMinecraftsHandlerFunc(func(params minecraft.ListMinecraftsParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftListMinecrafts has not yet been implemented")
		}),
		ModListModTeamsHandler: mod.ListModTeamsHandlerFunc(func(params mod.ListModTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation ModListModTeams has not yet been implemented")
		}),
		ModListModUsersHandler: mod.ListModUsersHandlerFunc(func(params mod.ListModUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation ModListModUsers has not yet been implemented")
		}),
		ModListModsHandler: mod.ListModsHandlerFunc(func(params mod.ListModsParams) middleware.Responder {
			return middleware.NotImplemented("operation ModListMods has not yet been implemented")
		}),
		PackListPackTeamsHandler: pack.ListPackTeamsHandlerFunc(func(params pack.ListPackTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation PackListPackTeams has not yet been implemented")
		}),
		PackListPackUsersHandler: pack.ListPackUsersHandlerFunc(func(params pack.ListPackUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation PackListPackUsers has not yet been implemented")
		}),
		PackListPacksHandler: pack.ListPacksHandlerFunc(func(params pack.ListPacksParams) middleware.Responder {
			return middleware.NotImplemented("operation PackListPacks has not yet been implemented")
		}),
		TeamListTeamModsHandler: team.ListTeamModsHandlerFunc(func(params team.ListTeamModsParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamListTeamMods has not yet been implemented")
		}),
		TeamListTeamPacksHandler: team.ListTeamPacksHandlerFunc(func(params team.ListTeamPacksParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamListTeamPacks has not yet been implemented")
		}),
		TeamListTeamUsersHandler: team.ListTeamUsersHandlerFunc(func(params team.ListTeamUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamListTeamUsers has not yet been implemented")
		}),
		TeamListTeamsHandler: team.ListTeamsHandlerFunc(func(params team.ListTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamListTeams has not yet been implemented")
		}),
		UserListUserModsHandler: user.ListUserModsHandlerFunc(func(params user.ListUserModsParams) middleware.Responder {
			return middleware.NotImplemented("operation UserListUserMods has not yet been implemented")
		}),
		UserListUserPacksHandler: user.ListUserPacksHandlerFunc(func(params user.ListUserPacksParams) middleware.Responder {
			return middleware.NotImplemented("operation UserListUserPacks has not yet been implemented")
		}),
		UserListUserTeamsHandler: user.ListUserTeamsHandlerFunc(func(params user.ListUserTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation UserListUserTeams has not yet been implemented")
		}),
		UserListUsersHandler: user.ListUsersHandlerFunc(func(params user.ListUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation UserListUsers has not yet been implemented")
		}),
		ModListVersionBuildsHandler: mod.ListVersionBuildsHandlerFunc(func(params mod.ListVersionBuildsParams) middleware.Responder {
			return middleware.NotImplemented("operation ModListVersionBuilds has not yet been implemented")
		}),
		ModListVersionsHandler: mod.ListVersionsHandlerFunc(func(params mod.ListVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation ModListVersions has not yet been implemented")
		}),
		AuthLoginUserHandler: auth.LoginUserHandlerFunc(func(params auth.LoginUserParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthLoginUser has not yet been implemented")
		}),
		ModPermitModTeamHandler: mod.PermitModTeamHandlerFunc(func(params mod.PermitModTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation ModPermitModTeam has not yet been implemented")
		}),
		ModPermitModUserHandler: mod.PermitModUserHandlerFunc(func(params mod.PermitModUserParams) middleware.Responder {
			return middleware.NotImplemented("operation ModPermitModUser has not yet been implemented")
		}),
		PackPermitPackTeamHandler: pack.PermitPackTeamHandlerFunc(func(params pack.PermitPackTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPermitPackTeam has not yet been implemented")
		}),
		PackPermitPackUserHandler: pack.PermitPackUserHandlerFunc(func(params pack.PermitPackUserParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPermitPackUser has not yet been implemented")
		}),
		TeamPermitTeamModHandler: team.PermitTeamModHandlerFunc(func(params team.PermitTeamModParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamPermitTeamMod has not yet been implemented")
		}),
		TeamPermitTeamPackHandler: team.PermitTeamPackHandlerFunc(func(params team.PermitTeamPackParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamPermitTeamPack has not yet been implemented")
		}),
		TeamPermitTeamUserHandler: team.PermitTeamUserHandlerFunc(func(params team.PermitTeamUserParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamPermitTeamUser has not yet been implemented")
		}),
		UserPermitUserModHandler: user.PermitUserModHandlerFunc(func(params user.PermitUserModParams) middleware.Responder {
			return middleware.NotImplemented("operation UserPermitUserMod has not yet been implemented")
		}),
		UserPermitUserPackHandler: user.PermitUserPackHandlerFunc(func(params user.PermitUserPackParams) middleware.Responder {
			return middleware.NotImplemented("operation UserPermitUserPack has not yet been implemented")
		}),
		UserPermitUserTeamHandler: user.PermitUserTeamHandlerFunc(func(params user.PermitUserTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation UserPermitUserTeam has not yet been implemented")
		}),
		AuthRefreshAuthHandler: auth.RefreshAuthHandlerFunc(func(params auth.RefreshAuthParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthRefreshAuth has not yet been implemented")
		}),
		ForgeSearchForgesHandler: forge.SearchForgesHandlerFunc(func(params forge.SearchForgesParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeSearchForges has not yet been implemented")
		}),
		MinecraftSearchMinecraftsHandler: minecraft.SearchMinecraftsHandlerFunc(func(params minecraft.SearchMinecraftsParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftSearchMinecrafts has not yet been implemented")
		}),
		PackShowBuildHandler: pack.ShowBuildHandlerFunc(func(params pack.ShowBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation PackShowBuild has not yet been implemented")
		}),
		ModShowModHandler: mod.ShowModHandlerFunc(func(params mod.ShowModParams) middleware.Responder {
			return middleware.NotImplemented("operation ModShowMod has not yet been implemented")
		}),
		PackShowPackHandler: pack.ShowPackHandlerFunc(func(params pack.ShowPackParams) middleware.Responder {
			return middleware.NotImplemented("operation PackShowPack has not yet been implemented")
		}),
		ProfileShowProfileHandler: profile.ShowProfileHandlerFunc(func(params profile.ShowProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileShowProfile has not yet been implemented")
		}),
		TeamShowTeamHandler: team.ShowTeamHandlerFunc(func(params team.ShowTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamShowTeam has not yet been implemented")
		}),
		UserShowUserHandler: user.ShowUserHandlerFunc(func(params user.ShowUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UserShowUser has not yet been implemented")
		}),
		ModShowVersionHandler: mod.ShowVersionHandlerFunc(func(params mod.ShowVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ModShowVersion has not yet been implemented")
		}),
		ProfileTokenProfileHandler: profile.TokenProfileHandlerFunc(func(params profile.TokenProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileTokenProfile has not yet been implemented")
		}),
		PackUpdateBuildHandler: pack.UpdateBuildHandlerFunc(func(params pack.UpdateBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation PackUpdateBuild has not yet been implemented")
		}),
		ForgeUpdateForgeHandler: forge.UpdateForgeHandlerFunc(func(params forge.UpdateForgeParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeUpdateForge has not yet been implemented")
		}),
		MinecraftUpdateMinecraftHandler: minecraft.UpdateMinecraftHandlerFunc(func(params minecraft.UpdateMinecraftParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftUpdateMinecraft has not yet been implemented")
		}),
		ModUpdateModHandler: mod.UpdateModHandlerFunc(func(params mod.UpdateModParams) middleware.Responder {
			return middleware.NotImplemented("operation ModUpdateMod has not yet been implemented")
		}),
		PackUpdatePackHandler: pack.UpdatePackHandlerFunc(func(params pack.UpdatePackParams) middleware.Responder {
			return middleware.NotImplemented("operation PackUpdatePack has not yet been implemented")
		}),
		ProfileUpdateProfileHandler: profile.UpdateProfileHandlerFunc(func(params profile.UpdateProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileUpdateProfile has not yet been implemented")
		}),
		TeamUpdateTeamHandler: team.UpdateTeamHandlerFunc(func(params team.UpdateTeamParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamUpdateTeam has not yet been implemented")
		}),
		UserUpdateUserHandler: user.UpdateUserHandlerFunc(func(params user.UpdateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUpdateUser has not yet been implemented")
		}),
		ModUpdateVersionHandler: mod.UpdateVersionHandlerFunc(func(params mod.UpdateVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ModUpdateVersion has not yet been implemented")
		}),
		AuthVerifyAuthHandler: auth.VerifyAuthHandlerFunc(func(params auth.VerifyAuthParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthVerifyAuth has not yet been implemented")
		}),
	}
}

/*KleisterAPI API definition for Kleister, manage mod packs for Minecraft */
type KleisterAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// PackAppendBuildToVersionHandler sets the operation handler for the append build to version operation
	PackAppendBuildToVersionHandler pack.AppendBuildToVersionHandler
	// ForgeAppendForgeToBuildHandler sets the operation handler for the append forge to build operation
	ForgeAppendForgeToBuildHandler forge.AppendForgeToBuildHandler
	// MinecraftAppendMinecraftToBuildHandler sets the operation handler for the append minecraft to build operation
	MinecraftAppendMinecraftToBuildHandler minecraft.AppendMinecraftToBuildHandler
	// ModAppendModToTeamHandler sets the operation handler for the append mod to team operation
	ModAppendModToTeamHandler mod.AppendModToTeamHandler
	// ModAppendModToUserHandler sets the operation handler for the append mod to user operation
	ModAppendModToUserHandler mod.AppendModToUserHandler
	// PackAppendPackToTeamHandler sets the operation handler for the append pack to team operation
	PackAppendPackToTeamHandler pack.AppendPackToTeamHandler
	// PackAppendPackToUserHandler sets the operation handler for the append pack to user operation
	PackAppendPackToUserHandler pack.AppendPackToUserHandler
	// TeamAppendTeamToModHandler sets the operation handler for the append team to mod operation
	TeamAppendTeamToModHandler team.AppendTeamToModHandler
	// TeamAppendTeamToPackHandler sets the operation handler for the append team to pack operation
	TeamAppendTeamToPackHandler team.AppendTeamToPackHandler
	// TeamAppendTeamToUserHandler sets the operation handler for the append team to user operation
	TeamAppendTeamToUserHandler team.AppendTeamToUserHandler
	// UserAppendUserToModHandler sets the operation handler for the append user to mod operation
	UserAppendUserToModHandler user.AppendUserToModHandler
	// UserAppendUserToPackHandler sets the operation handler for the append user to pack operation
	UserAppendUserToPackHandler user.AppendUserToPackHandler
	// UserAppendUserToTeamHandler sets the operation handler for the append user to team operation
	UserAppendUserToTeamHandler user.AppendUserToTeamHandler
	// ModAppendVersionToBuildHandler sets the operation handler for the append version to build operation
	ModAppendVersionToBuildHandler mod.AppendVersionToBuildHandler
	// PackCreateBuildHandler sets the operation handler for the create build operation
	PackCreateBuildHandler pack.CreateBuildHandler
	// ModCreateModHandler sets the operation handler for the create mod operation
	ModCreateModHandler mod.CreateModHandler
	// PackCreatePackHandler sets the operation handler for the create pack operation
	PackCreatePackHandler pack.CreatePackHandler
	// TeamCreateTeamHandler sets the operation handler for the create team operation
	TeamCreateTeamHandler team.CreateTeamHandler
	// UserCreateUserHandler sets the operation handler for the create user operation
	UserCreateUserHandler user.CreateUserHandler
	// ModCreateVersionHandler sets the operation handler for the create version operation
	ModCreateVersionHandler mod.CreateVersionHandler
	// PackDeleteBuildHandler sets the operation handler for the delete build operation
	PackDeleteBuildHandler pack.DeleteBuildHandler
	// PackDeleteBuildFromVersionHandler sets the operation handler for the delete build from version operation
	PackDeleteBuildFromVersionHandler pack.DeleteBuildFromVersionHandler
	// ForgeDeleteForgeFromBuildHandler sets the operation handler for the delete forge from build operation
	ForgeDeleteForgeFromBuildHandler forge.DeleteForgeFromBuildHandler
	// MinecraftDeleteMinecraftFromBuildHandler sets the operation handler for the delete minecraft from build operation
	MinecraftDeleteMinecraftFromBuildHandler minecraft.DeleteMinecraftFromBuildHandler
	// ModDeleteModHandler sets the operation handler for the delete mod operation
	ModDeleteModHandler mod.DeleteModHandler
	// ModDeleteModFromTeamHandler sets the operation handler for the delete mod from team operation
	ModDeleteModFromTeamHandler mod.DeleteModFromTeamHandler
	// ModDeleteModFromUserHandler sets the operation handler for the delete mod from user operation
	ModDeleteModFromUserHandler mod.DeleteModFromUserHandler
	// PackDeletePackHandler sets the operation handler for the delete pack operation
	PackDeletePackHandler pack.DeletePackHandler
	// PackDeletePackFromTeamHandler sets the operation handler for the delete pack from team operation
	PackDeletePackFromTeamHandler pack.DeletePackFromTeamHandler
	// PackDeletePackFromUserHandler sets the operation handler for the delete pack from user operation
	PackDeletePackFromUserHandler pack.DeletePackFromUserHandler
	// TeamDeleteTeamHandler sets the operation handler for the delete team operation
	TeamDeleteTeamHandler team.DeleteTeamHandler
	// TeamDeleteTeamFromModHandler sets the operation handler for the delete team from mod operation
	TeamDeleteTeamFromModHandler team.DeleteTeamFromModHandler
	// TeamDeleteTeamFromPackHandler sets the operation handler for the delete team from pack operation
	TeamDeleteTeamFromPackHandler team.DeleteTeamFromPackHandler
	// TeamDeleteTeamFromUserHandler sets the operation handler for the delete team from user operation
	TeamDeleteTeamFromUserHandler team.DeleteTeamFromUserHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// UserDeleteUserFromModHandler sets the operation handler for the delete user from mod operation
	UserDeleteUserFromModHandler user.DeleteUserFromModHandler
	// UserDeleteUserFromPackHandler sets the operation handler for the delete user from pack operation
	UserDeleteUserFromPackHandler user.DeleteUserFromPackHandler
	// UserDeleteUserFromTeamHandler sets the operation handler for the delete user from team operation
	UserDeleteUserFromTeamHandler user.DeleteUserFromTeamHandler
	// ModDeleteVersionHandler sets the operation handler for the delete version operation
	ModDeleteVersionHandler mod.DeleteVersionHandler
	// ModDeleteVersionFromBuildHandler sets the operation handler for the delete version from build operation
	ModDeleteVersionFromBuildHandler mod.DeleteVersionFromBuildHandler
	// PackListBuildVersionsHandler sets the operation handler for the list build versions operation
	PackListBuildVersionsHandler pack.ListBuildVersionsHandler
	// PackListBuildsHandler sets the operation handler for the list builds operation
	PackListBuildsHandler pack.ListBuildsHandler
	// ForgeListForgeBuildsHandler sets the operation handler for the list forge builds operation
	ForgeListForgeBuildsHandler forge.ListForgeBuildsHandler
	// ForgeListForgesHandler sets the operation handler for the list forges operation
	ForgeListForgesHandler forge.ListForgesHandler
	// MinecraftListMinecraftBuildsHandler sets the operation handler for the list minecraft builds operation
	MinecraftListMinecraftBuildsHandler minecraft.ListMinecraftBuildsHandler
	// MinecraftListMinecraftsHandler sets the operation handler for the list minecrafts operation
	MinecraftListMinecraftsHandler minecraft.ListMinecraftsHandler
	// ModListModTeamsHandler sets the operation handler for the list mod teams operation
	ModListModTeamsHandler mod.ListModTeamsHandler
	// ModListModUsersHandler sets the operation handler for the list mod users operation
	ModListModUsersHandler mod.ListModUsersHandler
	// ModListModsHandler sets the operation handler for the list mods operation
	ModListModsHandler mod.ListModsHandler
	// PackListPackTeamsHandler sets the operation handler for the list pack teams operation
	PackListPackTeamsHandler pack.ListPackTeamsHandler
	// PackListPackUsersHandler sets the operation handler for the list pack users operation
	PackListPackUsersHandler pack.ListPackUsersHandler
	// PackListPacksHandler sets the operation handler for the list packs operation
	PackListPacksHandler pack.ListPacksHandler
	// TeamListTeamModsHandler sets the operation handler for the list team mods operation
	TeamListTeamModsHandler team.ListTeamModsHandler
	// TeamListTeamPacksHandler sets the operation handler for the list team packs operation
	TeamListTeamPacksHandler team.ListTeamPacksHandler
	// TeamListTeamUsersHandler sets the operation handler for the list team users operation
	TeamListTeamUsersHandler team.ListTeamUsersHandler
	// TeamListTeamsHandler sets the operation handler for the list teams operation
	TeamListTeamsHandler team.ListTeamsHandler
	// UserListUserModsHandler sets the operation handler for the list user mods operation
	UserListUserModsHandler user.ListUserModsHandler
	// UserListUserPacksHandler sets the operation handler for the list user packs operation
	UserListUserPacksHandler user.ListUserPacksHandler
	// UserListUserTeamsHandler sets the operation handler for the list user teams operation
	UserListUserTeamsHandler user.ListUserTeamsHandler
	// UserListUsersHandler sets the operation handler for the list users operation
	UserListUsersHandler user.ListUsersHandler
	// ModListVersionBuildsHandler sets the operation handler for the list version builds operation
	ModListVersionBuildsHandler mod.ListVersionBuildsHandler
	// ModListVersionsHandler sets the operation handler for the list versions operation
	ModListVersionsHandler mod.ListVersionsHandler
	// AuthLoginUserHandler sets the operation handler for the login user operation
	AuthLoginUserHandler auth.LoginUserHandler
	// ModPermitModTeamHandler sets the operation handler for the permit mod team operation
	ModPermitModTeamHandler mod.PermitModTeamHandler
	// ModPermitModUserHandler sets the operation handler for the permit mod user operation
	ModPermitModUserHandler mod.PermitModUserHandler
	// PackPermitPackTeamHandler sets the operation handler for the permit pack team operation
	PackPermitPackTeamHandler pack.PermitPackTeamHandler
	// PackPermitPackUserHandler sets the operation handler for the permit pack user operation
	PackPermitPackUserHandler pack.PermitPackUserHandler
	// TeamPermitTeamModHandler sets the operation handler for the permit team mod operation
	TeamPermitTeamModHandler team.PermitTeamModHandler
	// TeamPermitTeamPackHandler sets the operation handler for the permit team pack operation
	TeamPermitTeamPackHandler team.PermitTeamPackHandler
	// TeamPermitTeamUserHandler sets the operation handler for the permit team user operation
	TeamPermitTeamUserHandler team.PermitTeamUserHandler
	// UserPermitUserModHandler sets the operation handler for the permit user mod operation
	UserPermitUserModHandler user.PermitUserModHandler
	// UserPermitUserPackHandler sets the operation handler for the permit user pack operation
	UserPermitUserPackHandler user.PermitUserPackHandler
	// UserPermitUserTeamHandler sets the operation handler for the permit user team operation
	UserPermitUserTeamHandler user.PermitUserTeamHandler
	// AuthRefreshAuthHandler sets the operation handler for the refresh auth operation
	AuthRefreshAuthHandler auth.RefreshAuthHandler
	// ForgeSearchForgesHandler sets the operation handler for the search forges operation
	ForgeSearchForgesHandler forge.SearchForgesHandler
	// MinecraftSearchMinecraftsHandler sets the operation handler for the search minecrafts operation
	MinecraftSearchMinecraftsHandler minecraft.SearchMinecraftsHandler
	// PackShowBuildHandler sets the operation handler for the show build operation
	PackShowBuildHandler pack.ShowBuildHandler
	// ModShowModHandler sets the operation handler for the show mod operation
	ModShowModHandler mod.ShowModHandler
	// PackShowPackHandler sets the operation handler for the show pack operation
	PackShowPackHandler pack.ShowPackHandler
	// ProfileShowProfileHandler sets the operation handler for the show profile operation
	ProfileShowProfileHandler profile.ShowProfileHandler
	// TeamShowTeamHandler sets the operation handler for the show team operation
	TeamShowTeamHandler team.ShowTeamHandler
	// UserShowUserHandler sets the operation handler for the show user operation
	UserShowUserHandler user.ShowUserHandler
	// ModShowVersionHandler sets the operation handler for the show version operation
	ModShowVersionHandler mod.ShowVersionHandler
	// ProfileTokenProfileHandler sets the operation handler for the token profile operation
	ProfileTokenProfileHandler profile.TokenProfileHandler
	// PackUpdateBuildHandler sets the operation handler for the update build operation
	PackUpdateBuildHandler pack.UpdateBuildHandler
	// ForgeUpdateForgeHandler sets the operation handler for the update forge operation
	ForgeUpdateForgeHandler forge.UpdateForgeHandler
	// MinecraftUpdateMinecraftHandler sets the operation handler for the update minecraft operation
	MinecraftUpdateMinecraftHandler minecraft.UpdateMinecraftHandler
	// ModUpdateModHandler sets the operation handler for the update mod operation
	ModUpdateModHandler mod.UpdateModHandler
	// PackUpdatePackHandler sets the operation handler for the update pack operation
	PackUpdatePackHandler pack.UpdatePackHandler
	// ProfileUpdateProfileHandler sets the operation handler for the update profile operation
	ProfileUpdateProfileHandler profile.UpdateProfileHandler
	// TeamUpdateTeamHandler sets the operation handler for the update team operation
	TeamUpdateTeamHandler team.UpdateTeamHandler
	// UserUpdateUserHandler sets the operation handler for the update user operation
	UserUpdateUserHandler user.UpdateUserHandler
	// ModUpdateVersionHandler sets the operation handler for the update version operation
	ModUpdateVersionHandler mod.UpdateVersionHandler
	// AuthVerifyAuthHandler sets the operation handler for the verify auth operation
	AuthVerifyAuthHandler auth.VerifyAuthHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *KleisterAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *KleisterAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *KleisterAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *KleisterAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *KleisterAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *KleisterAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *KleisterAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the KleisterAPI
func (o *KleisterAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.PackAppendBuildToVersionHandler == nil {
		unregistered = append(unregistered, "pack.AppendBuildToVersionHandler")
	}

	if o.ForgeAppendForgeToBuildHandler == nil {
		unregistered = append(unregistered, "forge.AppendForgeToBuildHandler")
	}

	if o.MinecraftAppendMinecraftToBuildHandler == nil {
		unregistered = append(unregistered, "minecraft.AppendMinecraftToBuildHandler")
	}

	if o.ModAppendModToTeamHandler == nil {
		unregistered = append(unregistered, "mod.AppendModToTeamHandler")
	}

	if o.ModAppendModToUserHandler == nil {
		unregistered = append(unregistered, "mod.AppendModToUserHandler")
	}

	if o.PackAppendPackToTeamHandler == nil {
		unregistered = append(unregistered, "pack.AppendPackToTeamHandler")
	}

	if o.PackAppendPackToUserHandler == nil {
		unregistered = append(unregistered, "pack.AppendPackToUserHandler")
	}

	if o.TeamAppendTeamToModHandler == nil {
		unregistered = append(unregistered, "team.AppendTeamToModHandler")
	}

	if o.TeamAppendTeamToPackHandler == nil {
		unregistered = append(unregistered, "team.AppendTeamToPackHandler")
	}

	if o.TeamAppendTeamToUserHandler == nil {
		unregistered = append(unregistered, "team.AppendTeamToUserHandler")
	}

	if o.UserAppendUserToModHandler == nil {
		unregistered = append(unregistered, "user.AppendUserToModHandler")
	}

	if o.UserAppendUserToPackHandler == nil {
		unregistered = append(unregistered, "user.AppendUserToPackHandler")
	}

	if o.UserAppendUserToTeamHandler == nil {
		unregistered = append(unregistered, "user.AppendUserToTeamHandler")
	}

	if o.ModAppendVersionToBuildHandler == nil {
		unregistered = append(unregistered, "mod.AppendVersionToBuildHandler")
	}

	if o.PackCreateBuildHandler == nil {
		unregistered = append(unregistered, "pack.CreateBuildHandler")
	}

	if o.ModCreateModHandler == nil {
		unregistered = append(unregistered, "mod.CreateModHandler")
	}

	if o.PackCreatePackHandler == nil {
		unregistered = append(unregistered, "pack.CreatePackHandler")
	}

	if o.TeamCreateTeamHandler == nil {
		unregistered = append(unregistered, "team.CreateTeamHandler")
	}

	if o.UserCreateUserHandler == nil {
		unregistered = append(unregistered, "user.CreateUserHandler")
	}

	if o.ModCreateVersionHandler == nil {
		unregistered = append(unregistered, "mod.CreateVersionHandler")
	}

	if o.PackDeleteBuildHandler == nil {
		unregistered = append(unregistered, "pack.DeleteBuildHandler")
	}

	if o.PackDeleteBuildFromVersionHandler == nil {
		unregistered = append(unregistered, "pack.DeleteBuildFromVersionHandler")
	}

	if o.ForgeDeleteForgeFromBuildHandler == nil {
		unregistered = append(unregistered, "forge.DeleteForgeFromBuildHandler")
	}

	if o.MinecraftDeleteMinecraftFromBuildHandler == nil {
		unregistered = append(unregistered, "minecraft.DeleteMinecraftFromBuildHandler")
	}

	if o.ModDeleteModHandler == nil {
		unregistered = append(unregistered, "mod.DeleteModHandler")
	}

	if o.ModDeleteModFromTeamHandler == nil {
		unregistered = append(unregistered, "mod.DeleteModFromTeamHandler")
	}

	if o.ModDeleteModFromUserHandler == nil {
		unregistered = append(unregistered, "mod.DeleteModFromUserHandler")
	}

	if o.PackDeletePackHandler == nil {
		unregistered = append(unregistered, "pack.DeletePackHandler")
	}

	if o.PackDeletePackFromTeamHandler == nil {
		unregistered = append(unregistered, "pack.DeletePackFromTeamHandler")
	}

	if o.PackDeletePackFromUserHandler == nil {
		unregistered = append(unregistered, "pack.DeletePackFromUserHandler")
	}

	if o.TeamDeleteTeamHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamHandler")
	}

	if o.TeamDeleteTeamFromModHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamFromModHandler")
	}

	if o.TeamDeleteTeamFromPackHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamFromPackHandler")
	}

	if o.TeamDeleteTeamFromUserHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamFromUserHandler")
	}

	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}

	if o.UserDeleteUserFromModHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserFromModHandler")
	}

	if o.UserDeleteUserFromPackHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserFromPackHandler")
	}

	if o.UserDeleteUserFromTeamHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserFromTeamHandler")
	}

	if o.ModDeleteVersionHandler == nil {
		unregistered = append(unregistered, "mod.DeleteVersionHandler")
	}

	if o.ModDeleteVersionFromBuildHandler == nil {
		unregistered = append(unregistered, "mod.DeleteVersionFromBuildHandler")
	}

	if o.PackListBuildVersionsHandler == nil {
		unregistered = append(unregistered, "pack.ListBuildVersionsHandler")
	}

	if o.PackListBuildsHandler == nil {
		unregistered = append(unregistered, "pack.ListBuildsHandler")
	}

	if o.ForgeListForgeBuildsHandler == nil {
		unregistered = append(unregistered, "forge.ListForgeBuildsHandler")
	}

	if o.ForgeListForgesHandler == nil {
		unregistered = append(unregistered, "forge.ListForgesHandler")
	}

	if o.MinecraftListMinecraftBuildsHandler == nil {
		unregistered = append(unregistered, "minecraft.ListMinecraftBuildsHandler")
	}

	if o.MinecraftListMinecraftsHandler == nil {
		unregistered = append(unregistered, "minecraft.ListMinecraftsHandler")
	}

	if o.ModListModTeamsHandler == nil {
		unregistered = append(unregistered, "mod.ListModTeamsHandler")
	}

	if o.ModListModUsersHandler == nil {
		unregistered = append(unregistered, "mod.ListModUsersHandler")
	}

	if o.ModListModsHandler == nil {
		unregistered = append(unregistered, "mod.ListModsHandler")
	}

	if o.PackListPackTeamsHandler == nil {
		unregistered = append(unregistered, "pack.ListPackTeamsHandler")
	}

	if o.PackListPackUsersHandler == nil {
		unregistered = append(unregistered, "pack.ListPackUsersHandler")
	}

	if o.PackListPacksHandler == nil {
		unregistered = append(unregistered, "pack.ListPacksHandler")
	}

	if o.TeamListTeamModsHandler == nil {
		unregistered = append(unregistered, "team.ListTeamModsHandler")
	}

	if o.TeamListTeamPacksHandler == nil {
		unregistered = append(unregistered, "team.ListTeamPacksHandler")
	}

	if o.TeamListTeamUsersHandler == nil {
		unregistered = append(unregistered, "team.ListTeamUsersHandler")
	}

	if o.TeamListTeamsHandler == nil {
		unregistered = append(unregistered, "team.ListTeamsHandler")
	}

	if o.UserListUserModsHandler == nil {
		unregistered = append(unregistered, "user.ListUserModsHandler")
	}

	if o.UserListUserPacksHandler == nil {
		unregistered = append(unregistered, "user.ListUserPacksHandler")
	}

	if o.UserListUserTeamsHandler == nil {
		unregistered = append(unregistered, "user.ListUserTeamsHandler")
	}

	if o.UserListUsersHandler == nil {
		unregistered = append(unregistered, "user.ListUsersHandler")
	}

	if o.ModListVersionBuildsHandler == nil {
		unregistered = append(unregistered, "mod.ListVersionBuildsHandler")
	}

	if o.ModListVersionsHandler == nil {
		unregistered = append(unregistered, "mod.ListVersionsHandler")
	}

	if o.AuthLoginUserHandler == nil {
		unregistered = append(unregistered, "auth.LoginUserHandler")
	}

	if o.ModPermitModTeamHandler == nil {
		unregistered = append(unregistered, "mod.PermitModTeamHandler")
	}

	if o.ModPermitModUserHandler == nil {
		unregistered = append(unregistered, "mod.PermitModUserHandler")
	}

	if o.PackPermitPackTeamHandler == nil {
		unregistered = append(unregistered, "pack.PermitPackTeamHandler")
	}

	if o.PackPermitPackUserHandler == nil {
		unregistered = append(unregistered, "pack.PermitPackUserHandler")
	}

	if o.TeamPermitTeamModHandler == nil {
		unregistered = append(unregistered, "team.PermitTeamModHandler")
	}

	if o.TeamPermitTeamPackHandler == nil {
		unregistered = append(unregistered, "team.PermitTeamPackHandler")
	}

	if o.TeamPermitTeamUserHandler == nil {
		unregistered = append(unregistered, "team.PermitTeamUserHandler")
	}

	if o.UserPermitUserModHandler == nil {
		unregistered = append(unregistered, "user.PermitUserModHandler")
	}

	if o.UserPermitUserPackHandler == nil {
		unregistered = append(unregistered, "user.PermitUserPackHandler")
	}

	if o.UserPermitUserTeamHandler == nil {
		unregistered = append(unregistered, "user.PermitUserTeamHandler")
	}

	if o.AuthRefreshAuthHandler == nil {
		unregistered = append(unregistered, "auth.RefreshAuthHandler")
	}

	if o.ForgeSearchForgesHandler == nil {
		unregistered = append(unregistered, "forge.SearchForgesHandler")
	}

	if o.MinecraftSearchMinecraftsHandler == nil {
		unregistered = append(unregistered, "minecraft.SearchMinecraftsHandler")
	}

	if o.PackShowBuildHandler == nil {
		unregistered = append(unregistered, "pack.ShowBuildHandler")
	}

	if o.ModShowModHandler == nil {
		unregistered = append(unregistered, "mod.ShowModHandler")
	}

	if o.PackShowPackHandler == nil {
		unregistered = append(unregistered, "pack.ShowPackHandler")
	}

	if o.ProfileShowProfileHandler == nil {
		unregistered = append(unregistered, "profile.ShowProfileHandler")
	}

	if o.TeamShowTeamHandler == nil {
		unregistered = append(unregistered, "team.ShowTeamHandler")
	}

	if o.UserShowUserHandler == nil {
		unregistered = append(unregistered, "user.ShowUserHandler")
	}

	if o.ModShowVersionHandler == nil {
		unregistered = append(unregistered, "mod.ShowVersionHandler")
	}

	if o.ProfileTokenProfileHandler == nil {
		unregistered = append(unregistered, "profile.TokenProfileHandler")
	}

	if o.PackUpdateBuildHandler == nil {
		unregistered = append(unregistered, "pack.UpdateBuildHandler")
	}

	if o.ForgeUpdateForgeHandler == nil {
		unregistered = append(unregistered, "forge.UpdateForgeHandler")
	}

	if o.MinecraftUpdateMinecraftHandler == nil {
		unregistered = append(unregistered, "minecraft.UpdateMinecraftHandler")
	}

	if o.ModUpdateModHandler == nil {
		unregistered = append(unregistered, "mod.UpdateModHandler")
	}

	if o.PackUpdatePackHandler == nil {
		unregistered = append(unregistered, "pack.UpdatePackHandler")
	}

	if o.ProfileUpdateProfileHandler == nil {
		unregistered = append(unregistered, "profile.UpdateProfileHandler")
	}

	if o.TeamUpdateTeamHandler == nil {
		unregistered = append(unregistered, "team.UpdateTeamHandler")
	}

	if o.UserUpdateUserHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserHandler")
	}

	if o.ModUpdateVersionHandler == nil {
		unregistered = append(unregistered, "mod.UpdateVersionHandler")
	}

	if o.AuthVerifyAuthHandler == nil {
		unregistered = append(unregistered, "auth.VerifyAuthHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *KleisterAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *KleisterAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *KleisterAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *KleisterAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *KleisterAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *KleisterAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the kleister API
func (o *KleisterAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *KleisterAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/builds/{buildID}/versions"] = pack.NewAppendBuildToVersion(o.context, o.PackAppendBuildToVersionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forge/{forgeID}/builds"] = forge.NewAppendForgeToBuild(o.context, o.ForgeAppendForgeToBuildHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/minecraft/{minecraftID}/builds"] = minecraft.NewAppendMinecraftToBuild(o.context, o.MinecraftAppendMinecraftToBuildHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/teams"] = mod.NewAppendModToTeam(o.context, o.ModAppendModToTeamHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/users"] = mod.NewAppendModToUser(o.context, o.ModAppendModToUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/teams"] = pack.NewAppendPackToTeam(o.context, o.PackAppendPackToTeamHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/users"] = pack.NewAppendPackToUser(o.context, o.PackAppendPackToUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams/{teamID}/mods"] = team.NewAppendTeamToMod(o.context, o.TeamAppendTeamToModHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams/{teamID}/packs"] = team.NewAppendTeamToPack(o.context, o.TeamAppendTeamToPackHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams/{teamID}/users"] = team.NewAppendTeamToUser(o.context, o.TeamAppendTeamToUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{userID}/mods"] = user.NewAppendUserToMod(o.context, o.UserAppendUserToModHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{userID}/packs"] = user.NewAppendUserToPack(o.context, o.UserAppendUserToPackHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{userID}/teams"] = user.NewAppendUserToTeam(o.context, o.UserAppendUserToTeamHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/versions/{versionID}/builds"] = mod.NewAppendVersionToBuild(o.context, o.ModAppendVersionToBuildHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/builds"] = pack.NewCreateBuild(o.context, o.PackCreateBuildHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods"] = mod.NewCreateMod(o.context, o.ModCreateModHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs"] = pack.NewCreatePack(o.context, o.PackCreatePackHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams"] = team.NewCreateTeam(o.context, o.TeamCreateTeamHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = user.NewCreateUser(o.context, o.UserCreateUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/versions"] = mod.NewCreateVersion(o.context, o.ModCreateVersionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/builds/{buildID}"] = pack.NewDeleteBuild(o.context, o.PackDeleteBuildHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/builds/{buildID}/versions"] = pack.NewDeleteBuildFromVersion(o.context, o.PackDeleteBuildFromVersionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/forge/{forgeID}/builds"] = forge.NewDeleteForgeFromBuild(o.context, o.ForgeDeleteForgeFromBuildHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/minecraft/{minecraftID}/builds"] = minecraft.NewDeleteMinecraftFromBuild(o.context, o.MinecraftDeleteMinecraftFromBuildHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}"] = mod.NewDeleteMod(o.context, o.ModDeleteModHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/teams"] = mod.NewDeleteModFromTeam(o.context, o.ModDeleteModFromTeamHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/users"] = mod.NewDeleteModFromUser(o.context, o.ModDeleteModFromUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}"] = pack.NewDeletePack(o.context, o.PackDeletePackHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/teams"] = pack.NewDeletePackFromTeam(o.context, o.PackDeletePackFromTeamHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/users"] = pack.NewDeletePackFromUser(o.context, o.PackDeletePackFromUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}"] = team.NewDeleteTeam(o.context, o.TeamDeleteTeamHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}/mods"] = team.NewDeleteTeamFromMod(o.context, o.TeamDeleteTeamFromModHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}/packs"] = team.NewDeleteTeamFromPack(o.context, o.TeamDeleteTeamFromPackHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}/users"] = team.NewDeleteTeamFromUser(o.context, o.TeamDeleteTeamFromUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}/mods"] = user.NewDeleteUserFromMod(o.context, o.UserDeleteUserFromModHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}/packs"] = user.NewDeleteUserFromPack(o.context, o.UserDeleteUserFromPackHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}/teams"] = user.NewDeleteUserFromTeam(o.context, o.UserDeleteUserFromTeamHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/versions/{versionID}"] = mod.NewDeleteVersion(o.context, o.ModDeleteVersionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/versions/{versionID}/builds"] = mod.NewDeleteVersionFromBuild(o.context, o.ModDeleteVersionFromBuildHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/builds/{buildID}/versions"] = pack.NewListBuildVersions(o.context, o.PackListBuildVersionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/builds"] = pack.NewListBuilds(o.context, o.PackListBuildsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forge/{forgeID}/builds"] = forge.NewListForgeBuilds(o.context, o.ForgeListForgeBuildsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forge"] = forge.NewListForges(o.context, o.ForgeListForgesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/minecraft/{minecraftID}/builds"] = minecraft.NewListMinecraftBuilds(o.context, o.MinecraftListMinecraftBuildsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/minecraft"] = minecraft.NewListMinecrafts(o.context, o.MinecraftListMinecraftsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/teams"] = mod.NewListModTeams(o.context, o.ModListModTeamsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/users"] = mod.NewListModUsers(o.context, o.ModListModUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods"] = mod.NewListMods(o.context, o.ModListModsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/teams"] = pack.NewListPackTeams(o.context, o.PackListPackTeamsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/users"] = pack.NewListPackUsers(o.context, o.PackListPackUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs"] = pack.NewListPacks(o.context, o.PackListPacksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}/mods"] = team.NewListTeamMods(o.context, o.TeamListTeamModsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}/packs"] = team.NewListTeamPacks(o.context, o.TeamListTeamPacksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}/users"] = team.NewListTeamUsers(o.context, o.TeamListTeamUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams"] = team.NewListTeams(o.context, o.TeamListTeamsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/mods"] = user.NewListUserMods(o.context, o.UserListUserModsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/packs"] = user.NewListUserPacks(o.context, o.UserListUserPacksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/teams"] = user.NewListUserTeams(o.context, o.UserListUserTeamsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = user.NewListUsers(o.context, o.UserListUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/versions/{versionID}/builds"] = mod.NewListVersionBuilds(o.context, o.ModListVersionBuildsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/versions"] = mod.NewListVersions(o.context, o.ModListVersionsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/login"] = auth.NewLoginUser(o.context, o.AuthLoginUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}/teams"] = mod.NewPermitModTeam(o.context, o.ModPermitModTeamHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}/users"] = mod.NewPermitModUser(o.context, o.ModPermitModUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}/teams"] = pack.NewPermitPackTeam(o.context, o.PackPermitPackTeamHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}/users"] = pack.NewPermitPackUser(o.context, o.PackPermitPackUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}/mods"] = team.NewPermitTeamMod(o.context, o.TeamPermitTeamModHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}/packs"] = team.NewPermitTeamPack(o.context, o.TeamPermitTeamPackHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}/users"] = team.NewPermitTeamUser(o.context, o.TeamPermitTeamUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}/mods"] = user.NewPermitUserMod(o.context, o.UserPermitUserModHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}/packs"] = user.NewPermitUserPack(o.context, o.UserPermitUserPackHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}/teams"] = user.NewPermitUserTeam(o.context, o.UserPermitUserTeamHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/refresh"] = auth.NewRefreshAuth(o.context, o.AuthRefreshAuthHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forge/{forgeID}"] = forge.NewSearchForges(o.context, o.ForgeSearchForgesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/minecraft/{minecraftID}"] = minecraft.NewSearchMinecrafts(o.context, o.MinecraftSearchMinecraftsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/builds/{buildID}"] = pack.NewShowBuild(o.context, o.PackShowBuildHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}"] = mod.NewShowMod(o.context, o.ModShowModHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}"] = pack.NewShowPack(o.context, o.PackShowPackHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/self"] = profile.NewShowProfile(o.context, o.ProfileShowProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}"] = team.NewShowTeam(o.context, o.TeamShowTeamHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}"] = user.NewShowUser(o.context, o.UserShowUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/versions/{versionID}"] = mod.NewShowVersion(o.context, o.ModShowVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/token"] = profile.NewTokenProfile(o.context, o.ProfileTokenProfileHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}/builds/{buildID}"] = pack.NewUpdateBuild(o.context, o.PackUpdateBuildHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/forge"] = forge.NewUpdateForge(o.context, o.ForgeUpdateForgeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/minecraft"] = minecraft.NewUpdateMinecraft(o.context, o.MinecraftUpdateMinecraftHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}"] = mod.NewUpdateMod(o.context, o.ModUpdateModHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}"] = pack.NewUpdatePack(o.context, o.PackUpdatePackHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/profile/self"] = profile.NewUpdateProfile(o.context, o.ProfileUpdateProfileHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}"] = team.NewUpdateTeam(o.context, o.TeamUpdateTeamHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}"] = user.NewUpdateUser(o.context, o.UserUpdateUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}/versions/{versionID}"] = mod.NewUpdateVersion(o.context, o.ModUpdateVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/verify/{token}"] = auth.NewVerifyAuth(o.context, o.AuthVerifyAuthHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *KleisterAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *KleisterAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *KleisterAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *KleisterAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
