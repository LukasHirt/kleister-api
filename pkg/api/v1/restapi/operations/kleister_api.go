// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/auth"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/forge"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/minecraft"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/mod"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/pack"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/profile"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/team"
	"github.com/kleister/kleister-api/pkg/api/v1/restapi/operations/user"
)

// NewKleisterAPI creates a new Kleister instance
func NewKleisterAPI(spec *loads.Document) *KleisterAPI {
	return &KleisterAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		AuthAuthLoginHandler: auth.AuthLoginHandlerFunc(func(params auth.AuthLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthAuthLogin has not yet been implemented")
		}),
		AuthAuthRefreshHandler: auth.AuthRefreshHandlerFunc(func(params auth.AuthRefreshParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthAuthRefresh has not yet been implemented")
		}),
		AuthAuthVerifyHandler: auth.AuthVerifyHandlerFunc(func(params auth.AuthVerifyParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthAuthVerify has not yet been implemented")
		}),
		PackBuildCreateHandler: pack.BuildCreateHandlerFunc(func(params pack.BuildCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildCreate has not yet been implemented")
		}),
		PackBuildDeleteHandler: pack.BuildDeleteHandlerFunc(func(params pack.BuildDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildDelete has not yet been implemented")
		}),
		PackBuildIndexHandler: pack.BuildIndexHandlerFunc(func(params pack.BuildIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildIndex has not yet been implemented")
		}),
		PackBuildShowHandler: pack.BuildShowHandlerFunc(func(params pack.BuildShowParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildShow has not yet been implemented")
		}),
		PackBuildUpdateHandler: pack.BuildUpdateHandlerFunc(func(params pack.BuildUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildUpdate has not yet been implemented")
		}),
		PackBuildVersionAppendHandler: pack.BuildVersionAppendHandlerFunc(func(params pack.BuildVersionAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildVersionAppend has not yet been implemented")
		}),
		PackBuildVersionDeleteHandler: pack.BuildVersionDeleteHandlerFunc(func(params pack.BuildVersionDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildVersionDelete has not yet been implemented")
		}),
		PackBuildVersionIndexHandler: pack.BuildVersionIndexHandlerFunc(func(params pack.BuildVersionIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation PackBuildVersionIndex has not yet been implemented")
		}),
		ForgeForgeBuildAppendHandler: forge.ForgeBuildAppendHandlerFunc(func(params forge.ForgeBuildAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeForgeBuildAppend has not yet been implemented")
		}),
		ForgeForgeBuildDeleteHandler: forge.ForgeBuildDeleteHandlerFunc(func(params forge.ForgeBuildDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeForgeBuildDelete has not yet been implemented")
		}),
		ForgeForgeBuildIndexHandler: forge.ForgeBuildIndexHandlerFunc(func(params forge.ForgeBuildIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeForgeBuildIndex has not yet been implemented")
		}),
		ForgeForgeIndexHandler: forge.ForgeIndexHandlerFunc(func(params forge.ForgeIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeForgeIndex has not yet been implemented")
		}),
		ForgeForgeSearchHandler: forge.ForgeSearchHandlerFunc(func(params forge.ForgeSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeForgeSearch has not yet been implemented")
		}),
		ForgeForgeUpdateHandler: forge.ForgeUpdateHandlerFunc(func(params forge.ForgeUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ForgeForgeUpdate has not yet been implemented")
		}),
		MinecraftMinecraftBuildAppendHandler: minecraft.MinecraftBuildAppendHandlerFunc(func(params minecraft.MinecraftBuildAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftMinecraftBuildAppend has not yet been implemented")
		}),
		MinecraftMinecraftBuildDeleteHandler: minecraft.MinecraftBuildDeleteHandlerFunc(func(params minecraft.MinecraftBuildDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftMinecraftBuildDelete has not yet been implemented")
		}),
		MinecraftMinecraftBuildIndexHandler: minecraft.MinecraftBuildIndexHandlerFunc(func(params minecraft.MinecraftBuildIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftMinecraftBuildIndex has not yet been implemented")
		}),
		MinecraftMinecraftIndexHandler: minecraft.MinecraftIndexHandlerFunc(func(params minecraft.MinecraftIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftMinecraftIndex has not yet been implemented")
		}),
		MinecraftMinecraftSearchHandler: minecraft.MinecraftSearchHandlerFunc(func(params minecraft.MinecraftSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftMinecraftSearch has not yet been implemented")
		}),
		MinecraftMinecraftUpdateHandler: minecraft.MinecraftUpdateHandlerFunc(func(params minecraft.MinecraftUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation MinecraftMinecraftUpdate has not yet been implemented")
		}),
		ModModCreateHandler: mod.ModCreateHandlerFunc(func(params mod.ModCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModCreate has not yet been implemented")
		}),
		ModModDeleteHandler: mod.ModDeleteHandlerFunc(func(params mod.ModDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModDelete has not yet been implemented")
		}),
		ModModIndexHandler: mod.ModIndexHandlerFunc(func(params mod.ModIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModIndex has not yet been implemented")
		}),
		ModModShowHandler: mod.ModShowHandlerFunc(func(params mod.ModShowParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModShow has not yet been implemented")
		}),
		ModModTeamAppendHandler: mod.ModTeamAppendHandlerFunc(func(params mod.ModTeamAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModTeamAppend has not yet been implemented")
		}),
		ModModTeamDeleteHandler: mod.ModTeamDeleteHandlerFunc(func(params mod.ModTeamDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModTeamDelete has not yet been implemented")
		}),
		ModModTeamIndexHandler: mod.ModTeamIndexHandlerFunc(func(params mod.ModTeamIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModTeamIndex has not yet been implemented")
		}),
		ModModTeamPermHandler: mod.ModTeamPermHandlerFunc(func(params mod.ModTeamPermParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModTeamPerm has not yet been implemented")
		}),
		ModModUpdateHandler: mod.ModUpdateHandlerFunc(func(params mod.ModUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModUpdate has not yet been implemented")
		}),
		ModModUserAppendHandler: mod.ModUserAppendHandlerFunc(func(params mod.ModUserAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModUserAppend has not yet been implemented")
		}),
		ModModUserDeleteHandler: mod.ModUserDeleteHandlerFunc(func(params mod.ModUserDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModUserDelete has not yet been implemented")
		}),
		ModModUserIndexHandler: mod.ModUserIndexHandlerFunc(func(params mod.ModUserIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModUserIndex has not yet been implemented")
		}),
		ModModUserPermHandler: mod.ModUserPermHandlerFunc(func(params mod.ModUserPermParams) middleware.Responder {
			return middleware.NotImplemented("operation ModModUserPerm has not yet been implemented")
		}),
		PackPackCreateHandler: pack.PackCreateHandlerFunc(func(params pack.PackCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackCreate has not yet been implemented")
		}),
		PackPackDeleteHandler: pack.PackDeleteHandlerFunc(func(params pack.PackDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackDelete has not yet been implemented")
		}),
		PackPackIndexHandler: pack.PackIndexHandlerFunc(func(params pack.PackIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackIndex has not yet been implemented")
		}),
		PackPackShowHandler: pack.PackShowHandlerFunc(func(params pack.PackShowParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackShow has not yet been implemented")
		}),
		PackPackTeamAppendHandler: pack.PackTeamAppendHandlerFunc(func(params pack.PackTeamAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackTeamAppend has not yet been implemented")
		}),
		PackPackTeamDeleteHandler: pack.PackTeamDeleteHandlerFunc(func(params pack.PackTeamDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackTeamDelete has not yet been implemented")
		}),
		PackPackTeamIndexHandler: pack.PackTeamIndexHandlerFunc(func(params pack.PackTeamIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackTeamIndex has not yet been implemented")
		}),
		PackPackTeamPermHandler: pack.PackTeamPermHandlerFunc(func(params pack.PackTeamPermParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackTeamPerm has not yet been implemented")
		}),
		PackPackUpdateHandler: pack.PackUpdateHandlerFunc(func(params pack.PackUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackUpdate has not yet been implemented")
		}),
		PackPackUserAppendHandler: pack.PackUserAppendHandlerFunc(func(params pack.PackUserAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackUserAppend has not yet been implemented")
		}),
		PackPackUserDeleteHandler: pack.PackUserDeleteHandlerFunc(func(params pack.PackUserDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackUserDelete has not yet been implemented")
		}),
		PackPackUserIndexHandler: pack.PackUserIndexHandlerFunc(func(params pack.PackUserIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackUserIndex has not yet been implemented")
		}),
		PackPackUserPermHandler: pack.PackUserPermHandlerFunc(func(params pack.PackUserPermParams) middleware.Responder {
			return middleware.NotImplemented("operation PackPackUserPerm has not yet been implemented")
		}),
		ProfileProfileShowHandler: profile.ProfileShowHandlerFunc(func(params profile.ProfileShowParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileProfileShow has not yet been implemented")
		}),
		ProfileProfileTokenHandler: profile.ProfileTokenHandlerFunc(func(params profile.ProfileTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileProfileToken has not yet been implemented")
		}),
		ProfileProfileUpdateHandler: profile.ProfileUpdateHandlerFunc(func(params profile.ProfileUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileProfileUpdate has not yet been implemented")
		}),
		TeamTeamCreateHandler: team.TeamCreateHandlerFunc(func(params team.TeamCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamCreate has not yet been implemented")
		}),
		TeamTeamDeleteHandler: team.TeamDeleteHandlerFunc(func(params team.TeamDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamDelete has not yet been implemented")
		}),
		TeamTeamIndexHandler: team.TeamIndexHandlerFunc(func(params team.TeamIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamIndex has not yet been implemented")
		}),
		TeamTeamModAppendHandler: team.TeamModAppendHandlerFunc(func(params team.TeamModAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamModAppend has not yet been implemented")
		}),
		TeamTeamModDeleteHandler: team.TeamModDeleteHandlerFunc(func(params team.TeamModDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamModDelete has not yet been implemented")
		}),
		TeamTeamModIndexHandler: team.TeamModIndexHandlerFunc(func(params team.TeamModIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamModIndex has not yet been implemented")
		}),
		TeamTeamModPermHandler: team.TeamModPermHandlerFunc(func(params team.TeamModPermParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamModPerm has not yet been implemented")
		}),
		TeamTeamPackAppendHandler: team.TeamPackAppendHandlerFunc(func(params team.TeamPackAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamPackAppend has not yet been implemented")
		}),
		TeamTeamPackDeleteHandler: team.TeamPackDeleteHandlerFunc(func(params team.TeamPackDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamPackDelete has not yet been implemented")
		}),
		TeamTeamPackIndexHandler: team.TeamPackIndexHandlerFunc(func(params team.TeamPackIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamPackIndex has not yet been implemented")
		}),
		TeamTeamPackPermHandler: team.TeamPackPermHandlerFunc(func(params team.TeamPackPermParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamPackPerm has not yet been implemented")
		}),
		TeamTeamShowHandler: team.TeamShowHandlerFunc(func(params team.TeamShowParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamShow has not yet been implemented")
		}),
		TeamTeamUpdateHandler: team.TeamUpdateHandlerFunc(func(params team.TeamUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamUpdate has not yet been implemented")
		}),
		TeamTeamUserAppendHandler: team.TeamUserAppendHandlerFunc(func(params team.TeamUserAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamUserAppend has not yet been implemented")
		}),
		TeamTeamUserDeleteHandler: team.TeamUserDeleteHandlerFunc(func(params team.TeamUserDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamUserDelete has not yet been implemented")
		}),
		TeamTeamUserIndexHandler: team.TeamUserIndexHandlerFunc(func(params team.TeamUserIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamUserIndex has not yet been implemented")
		}),
		TeamTeamUserPermHandler: team.TeamUserPermHandlerFunc(func(params team.TeamUserPermParams) middleware.Responder {
			return middleware.NotImplemented("operation TeamTeamUserPerm has not yet been implemented")
		}),
		UserUserCreateHandler: user.UserCreateHandlerFunc(func(params user.UserCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserCreate has not yet been implemented")
		}),
		UserUserDeleteHandler: user.UserDeleteHandlerFunc(func(params user.UserDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserDelete has not yet been implemented")
		}),
		UserUserIndexHandler: user.UserIndexHandlerFunc(func(params user.UserIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserIndex has not yet been implemented")
		}),
		UserUserModAppendHandler: user.UserModAppendHandlerFunc(func(params user.UserModAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserModAppend has not yet been implemented")
		}),
		UserUserModDeleteHandler: user.UserModDeleteHandlerFunc(func(params user.UserModDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserModDelete has not yet been implemented")
		}),
		UserUserModIndexHandler: user.UserModIndexHandlerFunc(func(params user.UserModIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserModIndex has not yet been implemented")
		}),
		UserUserModPermHandler: user.UserModPermHandlerFunc(func(params user.UserModPermParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserModPerm has not yet been implemented")
		}),
		UserUserPackAppendHandler: user.UserPackAppendHandlerFunc(func(params user.UserPackAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserPackAppend has not yet been implemented")
		}),
		UserUserPackDeleteHandler: user.UserPackDeleteHandlerFunc(func(params user.UserPackDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserPackDelete has not yet been implemented")
		}),
		UserUserPackIndexHandler: user.UserPackIndexHandlerFunc(func(params user.UserPackIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserPackIndex has not yet been implemented")
		}),
		UserUserPackPermHandler: user.UserPackPermHandlerFunc(func(params user.UserPackPermParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserPackPerm has not yet been implemented")
		}),
		UserUserShowHandler: user.UserShowHandlerFunc(func(params user.UserShowParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserShow has not yet been implemented")
		}),
		UserUserTeamAppendHandler: user.UserTeamAppendHandlerFunc(func(params user.UserTeamAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserTeamAppend has not yet been implemented")
		}),
		UserUserTeamDeleteHandler: user.UserTeamDeleteHandlerFunc(func(params user.UserTeamDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserTeamDelete has not yet been implemented")
		}),
		UserUserTeamIndexHandler: user.UserTeamIndexHandlerFunc(func(params user.UserTeamIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserTeamIndex has not yet been implemented")
		}),
		UserUserTeamPermHandler: user.UserTeamPermHandlerFunc(func(params user.UserTeamPermParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserTeamPerm has not yet been implemented")
		}),
		UserUserUpdateHandler: user.UserUpdateHandlerFunc(func(params user.UserUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserUpdate has not yet been implemented")
		}),
		ModVersionBuildAppendHandler: mod.VersionBuildAppendHandlerFunc(func(params mod.VersionBuildAppendParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionBuildAppend has not yet been implemented")
		}),
		ModVersionBuildDeleteHandler: mod.VersionBuildDeleteHandlerFunc(func(params mod.VersionBuildDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionBuildDelete has not yet been implemented")
		}),
		ModVersionBuildIndexHandler: mod.VersionBuildIndexHandlerFunc(func(params mod.VersionBuildIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionBuildIndex has not yet been implemented")
		}),
		ModVersionCreateHandler: mod.VersionCreateHandlerFunc(func(params mod.VersionCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionCreate has not yet been implemented")
		}),
		ModVersionDeleteHandler: mod.VersionDeleteHandlerFunc(func(params mod.VersionDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionDelete has not yet been implemented")
		}),
		ModVersionIndexHandler: mod.VersionIndexHandlerFunc(func(params mod.VersionIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionIndex has not yet been implemented")
		}),
		ModVersionShowHandler: mod.VersionShowHandlerFunc(func(params mod.VersionShowParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionShow has not yet been implemented")
		}),
		ModVersionUpdateHandler: mod.VersionUpdateHandlerFunc(func(params mod.VersionUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ModVersionUpdate has not yet been implemented")
		}),
	}
}

/*KleisterAPI API definition for Kleister, manage mod packs for Minecraft */
type KleisterAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// AuthAuthLoginHandler sets the operation handler for the auth login operation
	AuthAuthLoginHandler auth.AuthLoginHandler
	// AuthAuthRefreshHandler sets the operation handler for the auth refresh operation
	AuthAuthRefreshHandler auth.AuthRefreshHandler
	// AuthAuthVerifyHandler sets the operation handler for the auth verify operation
	AuthAuthVerifyHandler auth.AuthVerifyHandler
	// PackBuildCreateHandler sets the operation handler for the build create operation
	PackBuildCreateHandler pack.BuildCreateHandler
	// PackBuildDeleteHandler sets the operation handler for the build delete operation
	PackBuildDeleteHandler pack.BuildDeleteHandler
	// PackBuildIndexHandler sets the operation handler for the build index operation
	PackBuildIndexHandler pack.BuildIndexHandler
	// PackBuildShowHandler sets the operation handler for the build show operation
	PackBuildShowHandler pack.BuildShowHandler
	// PackBuildUpdateHandler sets the operation handler for the build update operation
	PackBuildUpdateHandler pack.BuildUpdateHandler
	// PackBuildVersionAppendHandler sets the operation handler for the build version append operation
	PackBuildVersionAppendHandler pack.BuildVersionAppendHandler
	// PackBuildVersionDeleteHandler sets the operation handler for the build version delete operation
	PackBuildVersionDeleteHandler pack.BuildVersionDeleteHandler
	// PackBuildVersionIndexHandler sets the operation handler for the build version index operation
	PackBuildVersionIndexHandler pack.BuildVersionIndexHandler
	// ForgeForgeBuildAppendHandler sets the operation handler for the forge build append operation
	ForgeForgeBuildAppendHandler forge.ForgeBuildAppendHandler
	// ForgeForgeBuildDeleteHandler sets the operation handler for the forge build delete operation
	ForgeForgeBuildDeleteHandler forge.ForgeBuildDeleteHandler
	// ForgeForgeBuildIndexHandler sets the operation handler for the forge build index operation
	ForgeForgeBuildIndexHandler forge.ForgeBuildIndexHandler
	// ForgeForgeIndexHandler sets the operation handler for the forge index operation
	ForgeForgeIndexHandler forge.ForgeIndexHandler
	// ForgeForgeSearchHandler sets the operation handler for the forge search operation
	ForgeForgeSearchHandler forge.ForgeSearchHandler
	// ForgeForgeUpdateHandler sets the operation handler for the forge update operation
	ForgeForgeUpdateHandler forge.ForgeUpdateHandler
	// MinecraftMinecraftBuildAppendHandler sets the operation handler for the minecraft build append operation
	MinecraftMinecraftBuildAppendHandler minecraft.MinecraftBuildAppendHandler
	// MinecraftMinecraftBuildDeleteHandler sets the operation handler for the minecraft build delete operation
	MinecraftMinecraftBuildDeleteHandler minecraft.MinecraftBuildDeleteHandler
	// MinecraftMinecraftBuildIndexHandler sets the operation handler for the minecraft build index operation
	MinecraftMinecraftBuildIndexHandler minecraft.MinecraftBuildIndexHandler
	// MinecraftMinecraftIndexHandler sets the operation handler for the minecraft index operation
	MinecraftMinecraftIndexHandler minecraft.MinecraftIndexHandler
	// MinecraftMinecraftSearchHandler sets the operation handler for the minecraft search operation
	MinecraftMinecraftSearchHandler minecraft.MinecraftSearchHandler
	// MinecraftMinecraftUpdateHandler sets the operation handler for the minecraft update operation
	MinecraftMinecraftUpdateHandler minecraft.MinecraftUpdateHandler
	// ModModCreateHandler sets the operation handler for the mod create operation
	ModModCreateHandler mod.ModCreateHandler
	// ModModDeleteHandler sets the operation handler for the mod delete operation
	ModModDeleteHandler mod.ModDeleteHandler
	// ModModIndexHandler sets the operation handler for the mod index operation
	ModModIndexHandler mod.ModIndexHandler
	// ModModShowHandler sets the operation handler for the mod show operation
	ModModShowHandler mod.ModShowHandler
	// ModModTeamAppendHandler sets the operation handler for the mod team append operation
	ModModTeamAppendHandler mod.ModTeamAppendHandler
	// ModModTeamDeleteHandler sets the operation handler for the mod team delete operation
	ModModTeamDeleteHandler mod.ModTeamDeleteHandler
	// ModModTeamIndexHandler sets the operation handler for the mod team index operation
	ModModTeamIndexHandler mod.ModTeamIndexHandler
	// ModModTeamPermHandler sets the operation handler for the mod team perm operation
	ModModTeamPermHandler mod.ModTeamPermHandler
	// ModModUpdateHandler sets the operation handler for the mod update operation
	ModModUpdateHandler mod.ModUpdateHandler
	// ModModUserAppendHandler sets the operation handler for the mod user append operation
	ModModUserAppendHandler mod.ModUserAppendHandler
	// ModModUserDeleteHandler sets the operation handler for the mod user delete operation
	ModModUserDeleteHandler mod.ModUserDeleteHandler
	// ModModUserIndexHandler sets the operation handler for the mod user index operation
	ModModUserIndexHandler mod.ModUserIndexHandler
	// ModModUserPermHandler sets the operation handler for the mod user perm operation
	ModModUserPermHandler mod.ModUserPermHandler
	// PackPackCreateHandler sets the operation handler for the pack create operation
	PackPackCreateHandler pack.PackCreateHandler
	// PackPackDeleteHandler sets the operation handler for the pack delete operation
	PackPackDeleteHandler pack.PackDeleteHandler
	// PackPackIndexHandler sets the operation handler for the pack index operation
	PackPackIndexHandler pack.PackIndexHandler
	// PackPackShowHandler sets the operation handler for the pack show operation
	PackPackShowHandler pack.PackShowHandler
	// PackPackTeamAppendHandler sets the operation handler for the pack team append operation
	PackPackTeamAppendHandler pack.PackTeamAppendHandler
	// PackPackTeamDeleteHandler sets the operation handler for the pack team delete operation
	PackPackTeamDeleteHandler pack.PackTeamDeleteHandler
	// PackPackTeamIndexHandler sets the operation handler for the pack team index operation
	PackPackTeamIndexHandler pack.PackTeamIndexHandler
	// PackPackTeamPermHandler sets the operation handler for the pack team perm operation
	PackPackTeamPermHandler pack.PackTeamPermHandler
	// PackPackUpdateHandler sets the operation handler for the pack update operation
	PackPackUpdateHandler pack.PackUpdateHandler
	// PackPackUserAppendHandler sets the operation handler for the pack user append operation
	PackPackUserAppendHandler pack.PackUserAppendHandler
	// PackPackUserDeleteHandler sets the operation handler for the pack user delete operation
	PackPackUserDeleteHandler pack.PackUserDeleteHandler
	// PackPackUserIndexHandler sets the operation handler for the pack user index operation
	PackPackUserIndexHandler pack.PackUserIndexHandler
	// PackPackUserPermHandler sets the operation handler for the pack user perm operation
	PackPackUserPermHandler pack.PackUserPermHandler
	// ProfileProfileShowHandler sets the operation handler for the profile show operation
	ProfileProfileShowHandler profile.ProfileShowHandler
	// ProfileProfileTokenHandler sets the operation handler for the profile token operation
	ProfileProfileTokenHandler profile.ProfileTokenHandler
	// ProfileProfileUpdateHandler sets the operation handler for the profile update operation
	ProfileProfileUpdateHandler profile.ProfileUpdateHandler
	// TeamTeamCreateHandler sets the operation handler for the team create operation
	TeamTeamCreateHandler team.TeamCreateHandler
	// TeamTeamDeleteHandler sets the operation handler for the team delete operation
	TeamTeamDeleteHandler team.TeamDeleteHandler
	// TeamTeamIndexHandler sets the operation handler for the team index operation
	TeamTeamIndexHandler team.TeamIndexHandler
	// TeamTeamModAppendHandler sets the operation handler for the team mod append operation
	TeamTeamModAppendHandler team.TeamModAppendHandler
	// TeamTeamModDeleteHandler sets the operation handler for the team mod delete operation
	TeamTeamModDeleteHandler team.TeamModDeleteHandler
	// TeamTeamModIndexHandler sets the operation handler for the team mod index operation
	TeamTeamModIndexHandler team.TeamModIndexHandler
	// TeamTeamModPermHandler sets the operation handler for the team mod perm operation
	TeamTeamModPermHandler team.TeamModPermHandler
	// TeamTeamPackAppendHandler sets the operation handler for the team pack append operation
	TeamTeamPackAppendHandler team.TeamPackAppendHandler
	// TeamTeamPackDeleteHandler sets the operation handler for the team pack delete operation
	TeamTeamPackDeleteHandler team.TeamPackDeleteHandler
	// TeamTeamPackIndexHandler sets the operation handler for the team pack index operation
	TeamTeamPackIndexHandler team.TeamPackIndexHandler
	// TeamTeamPackPermHandler sets the operation handler for the team pack perm operation
	TeamTeamPackPermHandler team.TeamPackPermHandler
	// TeamTeamShowHandler sets the operation handler for the team show operation
	TeamTeamShowHandler team.TeamShowHandler
	// TeamTeamUpdateHandler sets the operation handler for the team update operation
	TeamTeamUpdateHandler team.TeamUpdateHandler
	// TeamTeamUserAppendHandler sets the operation handler for the team user append operation
	TeamTeamUserAppendHandler team.TeamUserAppendHandler
	// TeamTeamUserDeleteHandler sets the operation handler for the team user delete operation
	TeamTeamUserDeleteHandler team.TeamUserDeleteHandler
	// TeamTeamUserIndexHandler sets the operation handler for the team user index operation
	TeamTeamUserIndexHandler team.TeamUserIndexHandler
	// TeamTeamUserPermHandler sets the operation handler for the team user perm operation
	TeamTeamUserPermHandler team.TeamUserPermHandler
	// UserUserCreateHandler sets the operation handler for the user create operation
	UserUserCreateHandler user.UserCreateHandler
	// UserUserDeleteHandler sets the operation handler for the user delete operation
	UserUserDeleteHandler user.UserDeleteHandler
	// UserUserIndexHandler sets the operation handler for the user index operation
	UserUserIndexHandler user.UserIndexHandler
	// UserUserModAppendHandler sets the operation handler for the user mod append operation
	UserUserModAppendHandler user.UserModAppendHandler
	// UserUserModDeleteHandler sets the operation handler for the user mod delete operation
	UserUserModDeleteHandler user.UserModDeleteHandler
	// UserUserModIndexHandler sets the operation handler for the user mod index operation
	UserUserModIndexHandler user.UserModIndexHandler
	// UserUserModPermHandler sets the operation handler for the user mod perm operation
	UserUserModPermHandler user.UserModPermHandler
	// UserUserPackAppendHandler sets the operation handler for the user pack append operation
	UserUserPackAppendHandler user.UserPackAppendHandler
	// UserUserPackDeleteHandler sets the operation handler for the user pack delete operation
	UserUserPackDeleteHandler user.UserPackDeleteHandler
	// UserUserPackIndexHandler sets the operation handler for the user pack index operation
	UserUserPackIndexHandler user.UserPackIndexHandler
	// UserUserPackPermHandler sets the operation handler for the user pack perm operation
	UserUserPackPermHandler user.UserPackPermHandler
	// UserUserShowHandler sets the operation handler for the user show operation
	UserUserShowHandler user.UserShowHandler
	// UserUserTeamAppendHandler sets the operation handler for the user team append operation
	UserUserTeamAppendHandler user.UserTeamAppendHandler
	// UserUserTeamDeleteHandler sets the operation handler for the user team delete operation
	UserUserTeamDeleteHandler user.UserTeamDeleteHandler
	// UserUserTeamIndexHandler sets the operation handler for the user team index operation
	UserUserTeamIndexHandler user.UserTeamIndexHandler
	// UserUserTeamPermHandler sets the operation handler for the user team perm operation
	UserUserTeamPermHandler user.UserTeamPermHandler
	// UserUserUpdateHandler sets the operation handler for the user update operation
	UserUserUpdateHandler user.UserUpdateHandler
	// ModVersionBuildAppendHandler sets the operation handler for the version build append operation
	ModVersionBuildAppendHandler mod.VersionBuildAppendHandler
	// ModVersionBuildDeleteHandler sets the operation handler for the version build delete operation
	ModVersionBuildDeleteHandler mod.VersionBuildDeleteHandler
	// ModVersionBuildIndexHandler sets the operation handler for the version build index operation
	ModVersionBuildIndexHandler mod.VersionBuildIndexHandler
	// ModVersionCreateHandler sets the operation handler for the version create operation
	ModVersionCreateHandler mod.VersionCreateHandler
	// ModVersionDeleteHandler sets the operation handler for the version delete operation
	ModVersionDeleteHandler mod.VersionDeleteHandler
	// ModVersionIndexHandler sets the operation handler for the version index operation
	ModVersionIndexHandler mod.VersionIndexHandler
	// ModVersionShowHandler sets the operation handler for the version show operation
	ModVersionShowHandler mod.VersionShowHandler
	// ModVersionUpdateHandler sets the operation handler for the version update operation
	ModVersionUpdateHandler mod.VersionUpdateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *KleisterAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *KleisterAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *KleisterAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *KleisterAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *KleisterAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *KleisterAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *KleisterAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the KleisterAPI
func (o *KleisterAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AuthAuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.AuthLoginHandler")
	}

	if o.AuthAuthRefreshHandler == nil {
		unregistered = append(unregistered, "auth.AuthRefreshHandler")
	}

	if o.AuthAuthVerifyHandler == nil {
		unregistered = append(unregistered, "auth.AuthVerifyHandler")
	}

	if o.PackBuildCreateHandler == nil {
		unregistered = append(unregistered, "pack.BuildCreateHandler")
	}

	if o.PackBuildDeleteHandler == nil {
		unregistered = append(unregistered, "pack.BuildDeleteHandler")
	}

	if o.PackBuildIndexHandler == nil {
		unregistered = append(unregistered, "pack.BuildIndexHandler")
	}

	if o.PackBuildShowHandler == nil {
		unregistered = append(unregistered, "pack.BuildShowHandler")
	}

	if o.PackBuildUpdateHandler == nil {
		unregistered = append(unregistered, "pack.BuildUpdateHandler")
	}

	if o.PackBuildVersionAppendHandler == nil {
		unregistered = append(unregistered, "pack.BuildVersionAppendHandler")
	}

	if o.PackBuildVersionDeleteHandler == nil {
		unregistered = append(unregistered, "pack.BuildVersionDeleteHandler")
	}

	if o.PackBuildVersionIndexHandler == nil {
		unregistered = append(unregistered, "pack.BuildVersionIndexHandler")
	}

	if o.ForgeForgeBuildAppendHandler == nil {
		unregistered = append(unregistered, "forge.ForgeBuildAppendHandler")
	}

	if o.ForgeForgeBuildDeleteHandler == nil {
		unregistered = append(unregistered, "forge.ForgeBuildDeleteHandler")
	}

	if o.ForgeForgeBuildIndexHandler == nil {
		unregistered = append(unregistered, "forge.ForgeBuildIndexHandler")
	}

	if o.ForgeForgeIndexHandler == nil {
		unregistered = append(unregistered, "forge.ForgeIndexHandler")
	}

	if o.ForgeForgeSearchHandler == nil {
		unregistered = append(unregistered, "forge.ForgeSearchHandler")
	}

	if o.ForgeForgeUpdateHandler == nil {
		unregistered = append(unregistered, "forge.ForgeUpdateHandler")
	}

	if o.MinecraftMinecraftBuildAppendHandler == nil {
		unregistered = append(unregistered, "minecraft.MinecraftBuildAppendHandler")
	}

	if o.MinecraftMinecraftBuildDeleteHandler == nil {
		unregistered = append(unregistered, "minecraft.MinecraftBuildDeleteHandler")
	}

	if o.MinecraftMinecraftBuildIndexHandler == nil {
		unregistered = append(unregistered, "minecraft.MinecraftBuildIndexHandler")
	}

	if o.MinecraftMinecraftIndexHandler == nil {
		unregistered = append(unregistered, "minecraft.MinecraftIndexHandler")
	}

	if o.MinecraftMinecraftSearchHandler == nil {
		unregistered = append(unregistered, "minecraft.MinecraftSearchHandler")
	}

	if o.MinecraftMinecraftUpdateHandler == nil {
		unregistered = append(unregistered, "minecraft.MinecraftUpdateHandler")
	}

	if o.ModModCreateHandler == nil {
		unregistered = append(unregistered, "mod.ModCreateHandler")
	}

	if o.ModModDeleteHandler == nil {
		unregistered = append(unregistered, "mod.ModDeleteHandler")
	}

	if o.ModModIndexHandler == nil {
		unregistered = append(unregistered, "mod.ModIndexHandler")
	}

	if o.ModModShowHandler == nil {
		unregistered = append(unregistered, "mod.ModShowHandler")
	}

	if o.ModModTeamAppendHandler == nil {
		unregistered = append(unregistered, "mod.ModTeamAppendHandler")
	}

	if o.ModModTeamDeleteHandler == nil {
		unregistered = append(unregistered, "mod.ModTeamDeleteHandler")
	}

	if o.ModModTeamIndexHandler == nil {
		unregistered = append(unregistered, "mod.ModTeamIndexHandler")
	}

	if o.ModModTeamPermHandler == nil {
		unregistered = append(unregistered, "mod.ModTeamPermHandler")
	}

	if o.ModModUpdateHandler == nil {
		unregistered = append(unregistered, "mod.ModUpdateHandler")
	}

	if o.ModModUserAppendHandler == nil {
		unregistered = append(unregistered, "mod.ModUserAppendHandler")
	}

	if o.ModModUserDeleteHandler == nil {
		unregistered = append(unregistered, "mod.ModUserDeleteHandler")
	}

	if o.ModModUserIndexHandler == nil {
		unregistered = append(unregistered, "mod.ModUserIndexHandler")
	}

	if o.ModModUserPermHandler == nil {
		unregistered = append(unregistered, "mod.ModUserPermHandler")
	}

	if o.PackPackCreateHandler == nil {
		unregistered = append(unregistered, "pack.PackCreateHandler")
	}

	if o.PackPackDeleteHandler == nil {
		unregistered = append(unregistered, "pack.PackDeleteHandler")
	}

	if o.PackPackIndexHandler == nil {
		unregistered = append(unregistered, "pack.PackIndexHandler")
	}

	if o.PackPackShowHandler == nil {
		unregistered = append(unregistered, "pack.PackShowHandler")
	}

	if o.PackPackTeamAppendHandler == nil {
		unregistered = append(unregistered, "pack.PackTeamAppendHandler")
	}

	if o.PackPackTeamDeleteHandler == nil {
		unregistered = append(unregistered, "pack.PackTeamDeleteHandler")
	}

	if o.PackPackTeamIndexHandler == nil {
		unregistered = append(unregistered, "pack.PackTeamIndexHandler")
	}

	if o.PackPackTeamPermHandler == nil {
		unregistered = append(unregistered, "pack.PackTeamPermHandler")
	}

	if o.PackPackUpdateHandler == nil {
		unregistered = append(unregistered, "pack.PackUpdateHandler")
	}

	if o.PackPackUserAppendHandler == nil {
		unregistered = append(unregistered, "pack.PackUserAppendHandler")
	}

	if o.PackPackUserDeleteHandler == nil {
		unregistered = append(unregistered, "pack.PackUserDeleteHandler")
	}

	if o.PackPackUserIndexHandler == nil {
		unregistered = append(unregistered, "pack.PackUserIndexHandler")
	}

	if o.PackPackUserPermHandler == nil {
		unregistered = append(unregistered, "pack.PackUserPermHandler")
	}

	if o.ProfileProfileShowHandler == nil {
		unregistered = append(unregistered, "profile.ProfileShowHandler")
	}

	if o.ProfileProfileTokenHandler == nil {
		unregistered = append(unregistered, "profile.ProfileTokenHandler")
	}

	if o.ProfileProfileUpdateHandler == nil {
		unregistered = append(unregistered, "profile.ProfileUpdateHandler")
	}

	if o.TeamTeamCreateHandler == nil {
		unregistered = append(unregistered, "team.TeamCreateHandler")
	}

	if o.TeamTeamDeleteHandler == nil {
		unregistered = append(unregistered, "team.TeamDeleteHandler")
	}

	if o.TeamTeamIndexHandler == nil {
		unregistered = append(unregistered, "team.TeamIndexHandler")
	}

	if o.TeamTeamModAppendHandler == nil {
		unregistered = append(unregistered, "team.TeamModAppendHandler")
	}

	if o.TeamTeamModDeleteHandler == nil {
		unregistered = append(unregistered, "team.TeamModDeleteHandler")
	}

	if o.TeamTeamModIndexHandler == nil {
		unregistered = append(unregistered, "team.TeamModIndexHandler")
	}

	if o.TeamTeamModPermHandler == nil {
		unregistered = append(unregistered, "team.TeamModPermHandler")
	}

	if o.TeamTeamPackAppendHandler == nil {
		unregistered = append(unregistered, "team.TeamPackAppendHandler")
	}

	if o.TeamTeamPackDeleteHandler == nil {
		unregistered = append(unregistered, "team.TeamPackDeleteHandler")
	}

	if o.TeamTeamPackIndexHandler == nil {
		unregistered = append(unregistered, "team.TeamPackIndexHandler")
	}

	if o.TeamTeamPackPermHandler == nil {
		unregistered = append(unregistered, "team.TeamPackPermHandler")
	}

	if o.TeamTeamShowHandler == nil {
		unregistered = append(unregistered, "team.TeamShowHandler")
	}

	if o.TeamTeamUpdateHandler == nil {
		unregistered = append(unregistered, "team.TeamUpdateHandler")
	}

	if o.TeamTeamUserAppendHandler == nil {
		unregistered = append(unregistered, "team.TeamUserAppendHandler")
	}

	if o.TeamTeamUserDeleteHandler == nil {
		unregistered = append(unregistered, "team.TeamUserDeleteHandler")
	}

	if o.TeamTeamUserIndexHandler == nil {
		unregistered = append(unregistered, "team.TeamUserIndexHandler")
	}

	if o.TeamTeamUserPermHandler == nil {
		unregistered = append(unregistered, "team.TeamUserPermHandler")
	}

	if o.UserUserCreateHandler == nil {
		unregistered = append(unregistered, "user.UserCreateHandler")
	}

	if o.UserUserDeleteHandler == nil {
		unregistered = append(unregistered, "user.UserDeleteHandler")
	}

	if o.UserUserIndexHandler == nil {
		unregistered = append(unregistered, "user.UserIndexHandler")
	}

	if o.UserUserModAppendHandler == nil {
		unregistered = append(unregistered, "user.UserModAppendHandler")
	}

	if o.UserUserModDeleteHandler == nil {
		unregistered = append(unregistered, "user.UserModDeleteHandler")
	}

	if o.UserUserModIndexHandler == nil {
		unregistered = append(unregistered, "user.UserModIndexHandler")
	}

	if o.UserUserModPermHandler == nil {
		unregistered = append(unregistered, "user.UserModPermHandler")
	}

	if o.UserUserPackAppendHandler == nil {
		unregistered = append(unregistered, "user.UserPackAppendHandler")
	}

	if o.UserUserPackDeleteHandler == nil {
		unregistered = append(unregistered, "user.UserPackDeleteHandler")
	}

	if o.UserUserPackIndexHandler == nil {
		unregistered = append(unregistered, "user.UserPackIndexHandler")
	}

	if o.UserUserPackPermHandler == nil {
		unregistered = append(unregistered, "user.UserPackPermHandler")
	}

	if o.UserUserShowHandler == nil {
		unregistered = append(unregistered, "user.UserShowHandler")
	}

	if o.UserUserTeamAppendHandler == nil {
		unregistered = append(unregistered, "user.UserTeamAppendHandler")
	}

	if o.UserUserTeamDeleteHandler == nil {
		unregistered = append(unregistered, "user.UserTeamDeleteHandler")
	}

	if o.UserUserTeamIndexHandler == nil {
		unregistered = append(unregistered, "user.UserTeamIndexHandler")
	}

	if o.UserUserTeamPermHandler == nil {
		unregistered = append(unregistered, "user.UserTeamPermHandler")
	}

	if o.UserUserUpdateHandler == nil {
		unregistered = append(unregistered, "user.UserUpdateHandler")
	}

	if o.ModVersionBuildAppendHandler == nil {
		unregistered = append(unregistered, "mod.VersionBuildAppendHandler")
	}

	if o.ModVersionBuildDeleteHandler == nil {
		unregistered = append(unregistered, "mod.VersionBuildDeleteHandler")
	}

	if o.ModVersionBuildIndexHandler == nil {
		unregistered = append(unregistered, "mod.VersionBuildIndexHandler")
	}

	if o.ModVersionCreateHandler == nil {
		unregistered = append(unregistered, "mod.VersionCreateHandler")
	}

	if o.ModVersionDeleteHandler == nil {
		unregistered = append(unregistered, "mod.VersionDeleteHandler")
	}

	if o.ModVersionIndexHandler == nil {
		unregistered = append(unregistered, "mod.VersionIndexHandler")
	}

	if o.ModVersionShowHandler == nil {
		unregistered = append(unregistered, "mod.VersionShowHandler")
	}

	if o.ModVersionUpdateHandler == nil {
		unregistered = append(unregistered, "mod.VersionUpdateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *KleisterAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *KleisterAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *KleisterAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *KleisterAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *KleisterAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *KleisterAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the kleister API
func (o *KleisterAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *KleisterAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/login"] = auth.NewAuthLogin(o.context, o.AuthAuthLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/refresh"] = auth.NewAuthRefresh(o.context, o.AuthAuthRefreshHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/verify/{token}"] = auth.NewAuthVerify(o.context, o.AuthAuthVerifyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/builds"] = pack.NewBuildCreate(o.context, o.PackBuildCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/builds/{buildID}"] = pack.NewBuildDelete(o.context, o.PackBuildDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/builds"] = pack.NewBuildIndex(o.context, o.PackBuildIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/builds/{buildID}"] = pack.NewBuildShow(o.context, o.PackBuildShowHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}/builds/{buildID}"] = pack.NewBuildUpdate(o.context, o.PackBuildUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/builds/{buildID}/versions"] = pack.NewBuildVersionAppend(o.context, o.PackBuildVersionAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/builds/{buildID}/versions"] = pack.NewBuildVersionDelete(o.context, o.PackBuildVersionDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/builds/{buildID}/versions"] = pack.NewBuildVersionIndex(o.context, o.PackBuildVersionIndexHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forge/{forgeID}/builds"] = forge.NewForgeBuildAppend(o.context, o.ForgeForgeBuildAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/forge/{forgeID}/builds"] = forge.NewForgeBuildDelete(o.context, o.ForgeForgeBuildDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forge/{forgeID}/builds"] = forge.NewForgeBuildIndex(o.context, o.ForgeForgeBuildIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forge"] = forge.NewForgeIndex(o.context, o.ForgeForgeIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forge/{forgeID}"] = forge.NewForgeSearch(o.context, o.ForgeForgeSearchHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/forge"] = forge.NewForgeUpdate(o.context, o.ForgeForgeUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/minecraft/{minecraftID}/builds"] = minecraft.NewMinecraftBuildAppend(o.context, o.MinecraftMinecraftBuildAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/minecraft/{minecraftID}/builds"] = minecraft.NewMinecraftBuildDelete(o.context, o.MinecraftMinecraftBuildDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/minecraft/{minecraftID}/builds"] = minecraft.NewMinecraftBuildIndex(o.context, o.MinecraftMinecraftBuildIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/minecraft"] = minecraft.NewMinecraftIndex(o.context, o.MinecraftMinecraftIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/minecraft/{minecraftID}"] = minecraft.NewMinecraftSearch(o.context, o.MinecraftMinecraftSearchHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/minecraft"] = minecraft.NewMinecraftUpdate(o.context, o.MinecraftMinecraftUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods"] = mod.NewModCreate(o.context, o.ModModCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}"] = mod.NewModDelete(o.context, o.ModModDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods"] = mod.NewModIndex(o.context, o.ModModIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}"] = mod.NewModShow(o.context, o.ModModShowHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/teams"] = mod.NewModTeamAppend(o.context, o.ModModTeamAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/teams"] = mod.NewModTeamDelete(o.context, o.ModModTeamDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/teams"] = mod.NewModTeamIndex(o.context, o.ModModTeamIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}/teams"] = mod.NewModTeamPerm(o.context, o.ModModTeamPermHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}"] = mod.NewModUpdate(o.context, o.ModModUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/users"] = mod.NewModUserAppend(o.context, o.ModModUserAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/users"] = mod.NewModUserDelete(o.context, o.ModModUserDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/users"] = mod.NewModUserIndex(o.context, o.ModModUserIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}/users"] = mod.NewModUserPerm(o.context, o.ModModUserPermHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs"] = pack.NewPackCreate(o.context, o.PackPackCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}"] = pack.NewPackDelete(o.context, o.PackPackDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs"] = pack.NewPackIndex(o.context, o.PackPackIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}"] = pack.NewPackShow(o.context, o.PackPackShowHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/teams"] = pack.NewPackTeamAppend(o.context, o.PackPackTeamAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/teams"] = pack.NewPackTeamDelete(o.context, o.PackPackTeamDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/teams"] = pack.NewPackTeamIndex(o.context, o.PackPackTeamIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}/teams"] = pack.NewPackTeamPerm(o.context, o.PackPackTeamPermHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}"] = pack.NewPackUpdate(o.context, o.PackPackUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/packs/{packID}/users"] = pack.NewPackUserAppend(o.context, o.PackPackUserAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/packs/{packID}/users"] = pack.NewPackUserDelete(o.context, o.PackPackUserDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packs/{packID}/users"] = pack.NewPackUserIndex(o.context, o.PackPackUserIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/packs/{packID}/users"] = pack.NewPackUserPerm(o.context, o.PackPackUserPermHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/self"] = profile.NewProfileShow(o.context, o.ProfileProfileShowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/token"] = profile.NewProfileToken(o.context, o.ProfileProfileTokenHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/profile/self"] = profile.NewProfileUpdate(o.context, o.ProfileProfileUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams"] = team.NewTeamCreate(o.context, o.TeamTeamCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}"] = team.NewTeamDelete(o.context, o.TeamTeamDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams"] = team.NewTeamIndex(o.context, o.TeamTeamIndexHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams/{teamID}/mods"] = team.NewTeamModAppend(o.context, o.TeamTeamModAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}/mods"] = team.NewTeamModDelete(o.context, o.TeamTeamModDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}/mods"] = team.NewTeamModIndex(o.context, o.TeamTeamModIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}/mods"] = team.NewTeamModPerm(o.context, o.TeamTeamModPermHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams/{teamID}/packs"] = team.NewTeamPackAppend(o.context, o.TeamTeamPackAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}/packs"] = team.NewTeamPackDelete(o.context, o.TeamTeamPackDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}/packs"] = team.NewTeamPackIndex(o.context, o.TeamTeamPackIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}/packs"] = team.NewTeamPackPerm(o.context, o.TeamTeamPackPermHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}"] = team.NewTeamShow(o.context, o.TeamTeamShowHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}"] = team.NewTeamUpdate(o.context, o.TeamTeamUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams/{teamID}/users"] = team.NewTeamUserAppend(o.context, o.TeamTeamUserAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamID}/users"] = team.NewTeamUserDelete(o.context, o.TeamTeamUserDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamID}/users"] = team.NewTeamUserIndex(o.context, o.TeamTeamUserIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamID}/users"] = team.NewTeamUserPerm(o.context, o.TeamTeamUserPermHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = user.NewUserCreate(o.context, o.UserUserCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}"] = user.NewUserDelete(o.context, o.UserUserDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = user.NewUserIndex(o.context, o.UserUserIndexHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{userID}/mods"] = user.NewUserModAppend(o.context, o.UserUserModAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}/mods"] = user.NewUserModDelete(o.context, o.UserUserModDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/mods"] = user.NewUserModIndex(o.context, o.UserUserModIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}/mods"] = user.NewUserModPerm(o.context, o.UserUserModPermHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{userID}/packs"] = user.NewUserPackAppend(o.context, o.UserUserPackAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}/packs"] = user.NewUserPackDelete(o.context, o.UserUserPackDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/packs"] = user.NewUserPackIndex(o.context, o.UserUserPackIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}/packs"] = user.NewUserPackPerm(o.context, o.UserUserPackPermHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}"] = user.NewUserShow(o.context, o.UserUserShowHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{userID}/teams"] = user.NewUserTeamAppend(o.context, o.UserUserTeamAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userID}/teams"] = user.NewUserTeamDelete(o.context, o.UserUserTeamDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/teams"] = user.NewUserTeamIndex(o.context, o.UserUserTeamIndexHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}/teams"] = user.NewUserTeamPerm(o.context, o.UserUserTeamPermHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userID}"] = user.NewUserUpdate(o.context, o.UserUserUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/versions/{versionID}/builds"] = mod.NewVersionBuildAppend(o.context, o.ModVersionBuildAppendHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/versions/{versionID}/builds"] = mod.NewVersionBuildDelete(o.context, o.ModVersionBuildDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/versions/{versionID}/builds"] = mod.NewVersionBuildIndex(o.context, o.ModVersionBuildIndexHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mods/{modID}/versions"] = mod.NewVersionCreate(o.context, o.ModVersionCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mods/{modID}/versions/{versionID}"] = mod.NewVersionDelete(o.context, o.ModVersionDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/versions"] = mod.NewVersionIndex(o.context, o.ModVersionIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mods/{modID}/versions/{versionID}"] = mod.NewVersionShow(o.context, o.ModVersionShowHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mods/{modID}/versions/{versionID}"] = mod.NewVersionUpdate(o.context, o.ModVersionUpdateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *KleisterAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *KleisterAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *KleisterAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *KleisterAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
