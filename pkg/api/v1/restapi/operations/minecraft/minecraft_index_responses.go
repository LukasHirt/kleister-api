// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// MinecraftIndexOKCode is the HTTP code returned for type MinecraftIndexOK
const MinecraftIndexOKCode int = 200

/*MinecraftIndexOK A collection of Minecraft versions

swagger:response minecraftIndexOK
*/
type MinecraftIndexOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Minecraft `json:"body,omitempty"`
}

// NewMinecraftIndexOK creates MinecraftIndexOK with default headers values
func NewMinecraftIndexOK() *MinecraftIndexOK {

	return &MinecraftIndexOK{}
}

// WithPayload adds the payload to the minecraft index o k response
func (o *MinecraftIndexOK) WithPayload(payload []*models.Minecraft) *MinecraftIndexOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the minecraft index o k response
func (o *MinecraftIndexOK) SetPayload(payload []*models.Minecraft) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MinecraftIndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Minecraft, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// MinecraftIndexForbiddenCode is the HTTP code returned for type MinecraftIndexForbidden
const MinecraftIndexForbiddenCode int = 403

/*MinecraftIndexForbidden User is not authorized

swagger:response minecraftIndexForbidden
*/
type MinecraftIndexForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewMinecraftIndexForbidden creates MinecraftIndexForbidden with default headers values
func NewMinecraftIndexForbidden() *MinecraftIndexForbidden {

	return &MinecraftIndexForbidden{}
}

// WithPayload adds the payload to the minecraft index forbidden response
func (o *MinecraftIndexForbidden) WithPayload(payload *models.GeneralError) *MinecraftIndexForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the minecraft index forbidden response
func (o *MinecraftIndexForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MinecraftIndexForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*MinecraftIndexDefault Some error unrelated to the handler

swagger:response minecraftIndexDefault
*/
type MinecraftIndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewMinecraftIndexDefault creates MinecraftIndexDefault with default headers values
func NewMinecraftIndexDefault(code int) *MinecraftIndexDefault {
	if code <= 0 {
		code = 500
	}

	return &MinecraftIndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the minecraft index default response
func (o *MinecraftIndexDefault) WithStatusCode(code int) *MinecraftIndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the minecraft index default response
func (o *MinecraftIndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the minecraft index default response
func (o *MinecraftIndexDefault) WithPayload(payload *models.GeneralError) *MinecraftIndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the minecraft index default response
func (o *MinecraftIndexDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MinecraftIndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
