// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MinecraftBuildAppendHandlerFunc turns a function with the right signature into a minecraft build append handler
type MinecraftBuildAppendHandlerFunc func(MinecraftBuildAppendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MinecraftBuildAppendHandlerFunc) Handle(params MinecraftBuildAppendParams) middleware.Responder {
	return fn(params)
}

// MinecraftBuildAppendHandler interface for that can handle valid minecraft build append params
type MinecraftBuildAppendHandler interface {
	Handle(MinecraftBuildAppendParams) middleware.Responder
}

// NewMinecraftBuildAppend creates a new http.Handler for the minecraft build append operation
func NewMinecraftBuildAppend(ctx *middleware.Context, handler MinecraftBuildAppendHandler) *MinecraftBuildAppend {
	return &MinecraftBuildAppend{Context: ctx, Handler: handler}
}

/*MinecraftBuildAppend swagger:route POST /minecraft/{minecraftID}/builds minecraft minecraftBuildAppend

Assign a build to a Minecraft version

*/
type MinecraftBuildAppend struct {
	Context *middleware.Context
	Handler MinecraftBuildAppendHandler
}

func (o *MinecraftBuildAppend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMinecraftBuildAppendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
