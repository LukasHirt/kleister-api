// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// ListMinecraftsOKCode is the HTTP code returned for type ListMinecraftsOK
const ListMinecraftsOKCode int = 200

/*
ListMinecraftsOK A collection of Minecraft versions

swagger:response listMinecraftsOK
*/
type ListMinecraftsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Minecraft `json:"body,omitempty"`
}

// NewListMinecraftsOK creates ListMinecraftsOK with default headers values
func NewListMinecraftsOK() *ListMinecraftsOK {

	return &ListMinecraftsOK{}
}

// WithPayload adds the payload to the list minecrafts o k response
func (o *ListMinecraftsOK) WithPayload(payload []*models.Minecraft) *ListMinecraftsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list minecrafts o k response
func (o *ListMinecraftsOK) SetPayload(payload []*models.Minecraft) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMinecraftsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Minecraft, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListMinecraftsForbiddenCode is the HTTP code returned for type ListMinecraftsForbidden
const ListMinecraftsForbiddenCode int = 403

/*
ListMinecraftsForbidden User is not authorized

swagger:response listMinecraftsForbidden
*/
type ListMinecraftsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewListMinecraftsForbidden creates ListMinecraftsForbidden with default headers values
func NewListMinecraftsForbidden() *ListMinecraftsForbidden {

	return &ListMinecraftsForbidden{}
}

// WithPayload adds the payload to the list minecrafts forbidden response
func (o *ListMinecraftsForbidden) WithPayload(payload *models.GeneralError) *ListMinecraftsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list minecrafts forbidden response
func (o *ListMinecraftsForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMinecraftsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ListMinecraftsDefault Some error unrelated to the handler

swagger:response listMinecraftsDefault
*/
type ListMinecraftsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewListMinecraftsDefault creates ListMinecraftsDefault with default headers values
func NewListMinecraftsDefault(code int) *ListMinecraftsDefault {
	if code <= 0 {
		code = 500
	}

	return &ListMinecraftsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the list minecrafts default response
func (o *ListMinecraftsDefault) WithStatusCode(code int) *ListMinecraftsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the list minecrafts default response
func (o *ListMinecraftsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the list minecrafts default response
func (o *ListMinecraftsDefault) WithPayload(payload *models.GeneralError) *ListMinecraftsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list minecrafts default response
func (o *ListMinecraftsDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListMinecraftsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
