// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MinecraftIndexHandlerFunc turns a function with the right signature into a minecraft index handler
type MinecraftIndexHandlerFunc func(MinecraftIndexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MinecraftIndexHandlerFunc) Handle(params MinecraftIndexParams) middleware.Responder {
	return fn(params)
}

// MinecraftIndexHandler interface for that can handle valid minecraft index params
type MinecraftIndexHandler interface {
	Handle(MinecraftIndexParams) middleware.Responder
}

// NewMinecraftIndex creates a new http.Handler for the minecraft index operation
func NewMinecraftIndex(ctx *middleware.Context, handler MinecraftIndexHandler) *MinecraftIndex {
	return &MinecraftIndex{Context: ctx, Handler: handler}
}

/*MinecraftIndex swagger:route GET /minecraft minecraft minecraftIndex

Fetch the available Minecraft versions

*/
type MinecraftIndex struct {
	Context *middleware.Context
	Handler MinecraftIndexHandler
}

func (o *MinecraftIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMinecraftIndexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
