// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateMinecraftHandlerFunc turns a function with the right signature into a update minecraft handler
type UpdateMinecraftHandlerFunc func(UpdateMinecraftParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMinecraftHandlerFunc) Handle(params UpdateMinecraftParams) middleware.Responder {
	return fn(params)
}

// UpdateMinecraftHandler interface for that can handle valid update minecraft params
type UpdateMinecraftHandler interface {
	Handle(UpdateMinecraftParams) middleware.Responder
}

// NewUpdateMinecraft creates a new http.Handler for the update minecraft operation
func NewUpdateMinecraft(ctx *middleware.Context, handler UpdateMinecraftHandler) *UpdateMinecraft {
	return &UpdateMinecraft{Context: ctx, Handler: handler}
}

/*UpdateMinecraft swagger:route PUT /minecraft minecraft updateMinecraft

Update the available Minecraft versions

*/
type UpdateMinecraft struct {
	Context *middleware.Context
	Handler UpdateMinecraftHandler
}

func (o *UpdateMinecraft) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateMinecraftParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
