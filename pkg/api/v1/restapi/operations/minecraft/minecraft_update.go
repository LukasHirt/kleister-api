// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MinecraftUpdateHandlerFunc turns a function with the right signature into a minecraft update handler
type MinecraftUpdateHandlerFunc func(MinecraftUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MinecraftUpdateHandlerFunc) Handle(params MinecraftUpdateParams) middleware.Responder {
	return fn(params)
}

// MinecraftUpdateHandler interface for that can handle valid minecraft update params
type MinecraftUpdateHandler interface {
	Handle(MinecraftUpdateParams) middleware.Responder
}

// NewMinecraftUpdate creates a new http.Handler for the minecraft update operation
func NewMinecraftUpdate(ctx *middleware.Context, handler MinecraftUpdateHandler) *MinecraftUpdate {
	return &MinecraftUpdate{Context: ctx, Handler: handler}
}

/*MinecraftUpdate swagger:route PUT /minecraft minecraft minecraftUpdate

Update the available Minecraft versions

*/
type MinecraftUpdate struct {
	Context *middleware.Context
	Handler MinecraftUpdateHandler
}

func (o *MinecraftUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMinecraftUpdateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
