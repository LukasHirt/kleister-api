// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MinecraftBuildDeleteHandlerFunc turns a function with the right signature into a minecraft build delete handler
type MinecraftBuildDeleteHandlerFunc func(MinecraftBuildDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MinecraftBuildDeleteHandlerFunc) Handle(params MinecraftBuildDeleteParams) middleware.Responder {
	return fn(params)
}

// MinecraftBuildDeleteHandler interface for that can handle valid minecraft build delete params
type MinecraftBuildDeleteHandler interface {
	Handle(MinecraftBuildDeleteParams) middleware.Responder
}

// NewMinecraftBuildDelete creates a new http.Handler for the minecraft build delete operation
func NewMinecraftBuildDelete(ctx *middleware.Context, handler MinecraftBuildDeleteHandler) *MinecraftBuildDelete {
	return &MinecraftBuildDelete{Context: ctx, Handler: handler}
}

/*MinecraftBuildDelete swagger:route DELETE /minecraft/{minecraftID}/builds minecraft minecraftBuildDelete

Unlink a build from a Minecraft version

*/
type MinecraftBuildDelete struct {
	Context *middleware.Context
	Handler MinecraftBuildDeleteHandler
}

func (o *MinecraftBuildDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMinecraftBuildDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
