// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// MinecraftSearchOKCode is the HTTP code returned for type MinecraftSearchOK
const MinecraftSearchOKCode int = 200

/*MinecraftSearchOK A collection of Minecraft versions

swagger:response minecraftSearchOK
*/
type MinecraftSearchOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Minecraft `json:"body,omitempty"`
}

// NewMinecraftSearchOK creates MinecraftSearchOK with default headers values
func NewMinecraftSearchOK() *MinecraftSearchOK {

	return &MinecraftSearchOK{}
}

// WithPayload adds the payload to the minecraft search o k response
func (o *MinecraftSearchOK) WithPayload(payload []*models.Minecraft) *MinecraftSearchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the minecraft search o k response
func (o *MinecraftSearchOK) SetPayload(payload []*models.Minecraft) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MinecraftSearchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Minecraft, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// MinecraftSearchForbiddenCode is the HTTP code returned for type MinecraftSearchForbidden
const MinecraftSearchForbiddenCode int = 403

/*MinecraftSearchForbidden User is not authorized

swagger:response minecraftSearchForbidden
*/
type MinecraftSearchForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewMinecraftSearchForbidden creates MinecraftSearchForbidden with default headers values
func NewMinecraftSearchForbidden() *MinecraftSearchForbidden {

	return &MinecraftSearchForbidden{}
}

// WithPayload adds the payload to the minecraft search forbidden response
func (o *MinecraftSearchForbidden) WithPayload(payload *models.GeneralError) *MinecraftSearchForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the minecraft search forbidden response
func (o *MinecraftSearchForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MinecraftSearchForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*MinecraftSearchDefault Some error unrelated to the handler

swagger:response minecraftSearchDefault
*/
type MinecraftSearchDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewMinecraftSearchDefault creates MinecraftSearchDefault with default headers values
func NewMinecraftSearchDefault(code int) *MinecraftSearchDefault {
	if code <= 0 {
		code = 500
	}

	return &MinecraftSearchDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the minecraft search default response
func (o *MinecraftSearchDefault) WithStatusCode(code int) *MinecraftSearchDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the minecraft search default response
func (o *MinecraftSearchDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the minecraft search default response
func (o *MinecraftSearchDefault) WithPayload(payload *models.GeneralError) *MinecraftSearchDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the minecraft search default response
func (o *MinecraftSearchDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MinecraftSearchDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
