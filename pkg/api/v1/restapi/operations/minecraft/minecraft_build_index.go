// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MinecraftBuildIndexHandlerFunc turns a function with the right signature into a minecraft build index handler
type MinecraftBuildIndexHandlerFunc func(MinecraftBuildIndexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MinecraftBuildIndexHandlerFunc) Handle(params MinecraftBuildIndexParams) middleware.Responder {
	return fn(params)
}

// MinecraftBuildIndexHandler interface for that can handle valid minecraft build index params
type MinecraftBuildIndexHandler interface {
	Handle(MinecraftBuildIndexParams) middleware.Responder
}

// NewMinecraftBuildIndex creates a new http.Handler for the minecraft build index operation
func NewMinecraftBuildIndex(ctx *middleware.Context, handler MinecraftBuildIndexHandler) *MinecraftBuildIndex {
	return &MinecraftBuildIndex{Context: ctx, Handler: handler}
}

/*MinecraftBuildIndex swagger:route GET /minecraft/{minecraftID}/builds minecraft minecraftBuildIndex

Fetch the builds assigned to a Minecraft version

*/
type MinecraftBuildIndex struct {
	Context *middleware.Context
	Handler MinecraftBuildIndexHandler
}

func (o *MinecraftBuildIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMinecraftBuildIndexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
