// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kleister/kleister-api/pkg/api/v1/models"
)

// SearchMinecraftsOKCode is the HTTP code returned for type SearchMinecraftsOK
const SearchMinecraftsOKCode int = 200

/*SearchMinecraftsOK A collection of Minecraft versions

swagger:response searchMinecraftsOK
*/
type SearchMinecraftsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Minecraft `json:"body,omitempty"`
}

// NewSearchMinecraftsOK creates SearchMinecraftsOK with default headers values
func NewSearchMinecraftsOK() *SearchMinecraftsOK {

	return &SearchMinecraftsOK{}
}

// WithPayload adds the payload to the search minecrafts o k response
func (o *SearchMinecraftsOK) WithPayload(payload []*models.Minecraft) *SearchMinecraftsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search minecrafts o k response
func (o *SearchMinecraftsOK) SetPayload(payload []*models.Minecraft) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchMinecraftsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Minecraft, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SearchMinecraftsForbiddenCode is the HTTP code returned for type SearchMinecraftsForbidden
const SearchMinecraftsForbiddenCode int = 403

/*SearchMinecraftsForbidden User is not authorized

swagger:response searchMinecraftsForbidden
*/
type SearchMinecraftsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewSearchMinecraftsForbidden creates SearchMinecraftsForbidden with default headers values
func NewSearchMinecraftsForbidden() *SearchMinecraftsForbidden {

	return &SearchMinecraftsForbidden{}
}

// WithPayload adds the payload to the search minecrafts forbidden response
func (o *SearchMinecraftsForbidden) WithPayload(payload *models.GeneralError) *SearchMinecraftsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search minecrafts forbidden response
func (o *SearchMinecraftsForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchMinecraftsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*SearchMinecraftsDefault Some error unrelated to the handler

swagger:response searchMinecraftsDefault
*/
type SearchMinecraftsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewSearchMinecraftsDefault creates SearchMinecraftsDefault with default headers values
func NewSearchMinecraftsDefault(code int) *SearchMinecraftsDefault {
	if code <= 0 {
		code = 500
	}

	return &SearchMinecraftsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the search minecrafts default response
func (o *SearchMinecraftsDefault) WithStatusCode(code int) *SearchMinecraftsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the search minecrafts default response
func (o *SearchMinecraftsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the search minecrafts default response
func (o *SearchMinecraftsDefault) WithPayload(payload *models.GeneralError) *SearchMinecraftsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search minecrafts default response
func (o *SearchMinecraftsDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchMinecraftsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
