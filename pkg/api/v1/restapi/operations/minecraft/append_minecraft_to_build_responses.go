// Code generated by go-swagger; DO NOT EDIT.

package minecraft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/kleister/kleister-api/pkg/api/v1/models"
)

// AppendMinecraftToBuildOKCode is the HTTP code returned for type AppendMinecraftToBuildOK
const AppendMinecraftToBuildOKCode int = 200

/*AppendMinecraftToBuildOK A collection of assigned builds

swagger:response appendMinecraftToBuildOK
*/
type AppendMinecraftToBuildOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Build `json:"body,omitempty"`
}

// NewAppendMinecraftToBuildOK creates AppendMinecraftToBuildOK with default headers values
func NewAppendMinecraftToBuildOK() *AppendMinecraftToBuildOK {

	return &AppendMinecraftToBuildOK{}
}

// WithPayload adds the payload to the append minecraft to build o k response
func (o *AppendMinecraftToBuildOK) WithPayload(payload []*models.Build) *AppendMinecraftToBuildOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append minecraft to build o k response
func (o *AppendMinecraftToBuildOK) SetPayload(payload []*models.Build) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendMinecraftToBuildOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Build, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// AppendMinecraftToBuildForbiddenCode is the HTTP code returned for type AppendMinecraftToBuildForbidden
const AppendMinecraftToBuildForbiddenCode int = 403

/*AppendMinecraftToBuildForbidden User is not authorized

swagger:response appendMinecraftToBuildForbidden
*/
type AppendMinecraftToBuildForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendMinecraftToBuildForbidden creates AppendMinecraftToBuildForbidden with default headers values
func NewAppendMinecraftToBuildForbidden() *AppendMinecraftToBuildForbidden {

	return &AppendMinecraftToBuildForbidden{}
}

// WithPayload adds the payload to the append minecraft to build forbidden response
func (o *AppendMinecraftToBuildForbidden) WithPayload(payload *models.GeneralError) *AppendMinecraftToBuildForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append minecraft to build forbidden response
func (o *AppendMinecraftToBuildForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendMinecraftToBuildForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendMinecraftToBuildPreconditionFailedCode is the HTTP code returned for type AppendMinecraftToBuildPreconditionFailed
const AppendMinecraftToBuildPreconditionFailedCode int = 412

/*AppendMinecraftToBuildPreconditionFailed Failed to parse request body

swagger:response appendMinecraftToBuildPreconditionFailed
*/
type AppendMinecraftToBuildPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendMinecraftToBuildPreconditionFailed creates AppendMinecraftToBuildPreconditionFailed with default headers values
func NewAppendMinecraftToBuildPreconditionFailed() *AppendMinecraftToBuildPreconditionFailed {

	return &AppendMinecraftToBuildPreconditionFailed{}
}

// WithPayload adds the payload to the append minecraft to build precondition failed response
func (o *AppendMinecraftToBuildPreconditionFailed) WithPayload(payload *models.GeneralError) *AppendMinecraftToBuildPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append minecraft to build precondition failed response
func (o *AppendMinecraftToBuildPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendMinecraftToBuildPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendMinecraftToBuildUnprocessableEntityCode is the HTTP code returned for type AppendMinecraftToBuildUnprocessableEntity
const AppendMinecraftToBuildUnprocessableEntityCode int = 422

/*AppendMinecraftToBuildUnprocessableEntity Build is already appended

swagger:response appendMinecraftToBuildUnprocessableEntity
*/
type AppendMinecraftToBuildUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewAppendMinecraftToBuildUnprocessableEntity creates AppendMinecraftToBuildUnprocessableEntity with default headers values
func NewAppendMinecraftToBuildUnprocessableEntity() *AppendMinecraftToBuildUnprocessableEntity {

	return &AppendMinecraftToBuildUnprocessableEntity{}
}

// WithPayload adds the payload to the append minecraft to build unprocessable entity response
func (o *AppendMinecraftToBuildUnprocessableEntity) WithPayload(payload *models.ValidationError) *AppendMinecraftToBuildUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append minecraft to build unprocessable entity response
func (o *AppendMinecraftToBuildUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendMinecraftToBuildUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AppendMinecraftToBuildDefault Some error unrelated to the handler

swagger:response appendMinecraftToBuildDefault
*/
type AppendMinecraftToBuildDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendMinecraftToBuildDefault creates AppendMinecraftToBuildDefault with default headers values
func NewAppendMinecraftToBuildDefault(code int) *AppendMinecraftToBuildDefault {
	if code <= 0 {
		code = 500
	}

	return &AppendMinecraftToBuildDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the append minecraft to build default response
func (o *AppendMinecraftToBuildDefault) WithStatusCode(code int) *AppendMinecraftToBuildDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the append minecraft to build default response
func (o *AppendMinecraftToBuildDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the append minecraft to build default response
func (o *AppendMinecraftToBuildDefault) WithPayload(payload *models.GeneralError) *AppendMinecraftToBuildDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append minecraft to build default response
func (o *AppendMinecraftToBuildDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendMinecraftToBuildDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
