// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Build build
//
// swagger:model build
type Build struct {

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// forge
	// Read Only: true
	Forge *Forge `json:"forge,omitempty"`

	// forge id
	// Format: uuid
	ForgeID *strfmt.UUID `json:"forge_id,omitempty"`

	// hidden
	Hidden *bool `json:"hidden,omitempty"`

	// id
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// min java
	MinJava *string `json:"min_java,omitempty"`

	// min memory
	MinMemory *string `json:"min_memory,omitempty"`

	// minecraft
	// Read Only: true
	Minecraft *Minecraft `json:"minecraft,omitempty"`

	// minecraft id
	// Format: uuid
	MinecraftID *strfmt.UUID `json:"minecraft_id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pack
	// Read Only: true
	Pack *Pack `json:"pack,omitempty"`

	// pack id
	// Required: true
	// Format: uuid
	PackID *strfmt.UUID `json:"pack_id"`

	// private
	Private *bool `json:"private,omitempty"`

	// public
	Public *bool `json:"public,omitempty"`

	// published
	Published *bool `json:"published,omitempty"`

	// slug
	Slug *string `json:"slug,omitempty"`

	// updated at
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this build
func (m *Build) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinecraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinecraftID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateForge(formats strfmt.Registry) error {
	if swag.IsZero(m.Forge) { // not required
		return nil
	}

	if m.Forge != nil {
		if err := m.Forge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forge")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateForgeID(formats strfmt.Registry) error {
	if swag.IsZero(m.ForgeID) { // not required
		return nil
	}

	if err := validate.FormatOf("forge_id", "body", "uuid", m.ForgeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateMinecraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Minecraft) { // not required
		return nil
	}

	if m.Minecraft != nil {
		if err := m.Minecraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minecraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minecraft")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateMinecraftID(formats strfmt.Registry) error {
	if swag.IsZero(m.MinecraftID) { // not required
		return nil
	}

	if err := validate.FormatOf("minecraft_id", "body", "uuid", m.MinecraftID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Build) validatePack(formats strfmt.Registry) error {
	if swag.IsZero(m.Pack) { // not required
		return nil
	}

	if m.Pack != nil {
		if err := m.Pack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pack")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validatePackID(formats strfmt.Registry) error {

	if err := validate.Required("pack_id", "body", m.PackID); err != nil {
		return err
	}

	if err := validate.FormatOf("pack_id", "body", "uuid", m.PackID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this build based on the context it is used
func (m *Build) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinecraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Build) contextValidateForge(ctx context.Context, formats strfmt.Registry) error {

	if m.Forge != nil {
		if err := m.Forge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forge")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Build) contextValidateMinecraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Minecraft != nil {
		if err := m.Minecraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minecraft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minecraft")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidatePack(ctx context.Context, formats strfmt.Registry) error {

	if m.Pack != nil {
		if err := m.Pack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pack")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Build) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Build) UnmarshalBinary(b []byte) error {
	var res Build
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
