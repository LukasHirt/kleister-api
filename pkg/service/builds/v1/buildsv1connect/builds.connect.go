// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: builds/v1/builds.proto

package buildsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kleister/kleister-api/pkg/service/builds/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BuildsServiceName is the fully-qualified name of the BuildsService service.
	BuildsServiceName = "builds.v1.BuildsService"
)

// BuildsServiceClient is a client for the builds.v1.BuildsService service.
type BuildsServiceClient interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	ListVersions(context.Context, *connect_go.Request[v1.ListVersionsRequest]) (*connect_go.Response[v1.ListVersionsResponse], error)
	AttachVersion(context.Context, *connect_go.Request[v1.AttachVersionRequest]) (*connect_go.Response[v1.AttachVersionResponse], error)
	DropVersion(context.Context, *connect_go.Request[v1.DropVersionRequest]) (*connect_go.Response[v1.DropVersionResponse], error)
}

// NewBuildsServiceClient constructs a client for the builds.v1.BuildsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuildsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BuildsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &buildsServiceClient{
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/List",
			opts...,
		),
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/Create",
			opts...,
		),
		update: connect_go.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/Update",
			opts...,
		),
		show: connect_go.NewClient[v1.ShowRequest, v1.ShowResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/Show",
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/Delete",
			opts...,
		),
		listVersions: connect_go.NewClient[v1.ListVersionsRequest, v1.ListVersionsResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/ListVersions",
			opts...,
		),
		attachVersion: connect_go.NewClient[v1.AttachVersionRequest, v1.AttachVersionResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/AttachVersion",
			opts...,
		),
		dropVersion: connect_go.NewClient[v1.DropVersionRequest, v1.DropVersionResponse](
			httpClient,
			baseURL+"/builds.v1.BuildsService/DropVersion",
			opts...,
		),
	}
}

// buildsServiceClient implements BuildsServiceClient.
type buildsServiceClient struct {
	list          *connect_go.Client[v1.ListRequest, v1.ListResponse]
	create        *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	update        *connect_go.Client[v1.UpdateRequest, v1.UpdateResponse]
	show          *connect_go.Client[v1.ShowRequest, v1.ShowResponse]
	delete        *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
	listVersions  *connect_go.Client[v1.ListVersionsRequest, v1.ListVersionsResponse]
	attachVersion *connect_go.Client[v1.AttachVersionRequest, v1.AttachVersionResponse]
	dropVersion   *connect_go.Client[v1.DropVersionRequest, v1.DropVersionResponse]
}

// List calls builds.v1.BuildsService.List.
func (c *buildsServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls builds.v1.BuildsService.Create.
func (c *buildsServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls builds.v1.BuildsService.Update.
func (c *buildsServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Show calls builds.v1.BuildsService.Show.
func (c *buildsServiceClient) Show(ctx context.Context, req *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error) {
	return c.show.CallUnary(ctx, req)
}

// Delete calls builds.v1.BuildsService.Delete.
func (c *buildsServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ListVersions calls builds.v1.BuildsService.ListVersions.
func (c *buildsServiceClient) ListVersions(ctx context.Context, req *connect_go.Request[v1.ListVersionsRequest]) (*connect_go.Response[v1.ListVersionsResponse], error) {
	return c.listVersions.CallUnary(ctx, req)
}

// AttachVersion calls builds.v1.BuildsService.AttachVersion.
func (c *buildsServiceClient) AttachVersion(ctx context.Context, req *connect_go.Request[v1.AttachVersionRequest]) (*connect_go.Response[v1.AttachVersionResponse], error) {
	return c.attachVersion.CallUnary(ctx, req)
}

// DropVersion calls builds.v1.BuildsService.DropVersion.
func (c *buildsServiceClient) DropVersion(ctx context.Context, req *connect_go.Request[v1.DropVersionRequest]) (*connect_go.Response[v1.DropVersionResponse], error) {
	return c.dropVersion.CallUnary(ctx, req)
}

// BuildsServiceHandler is an implementation of the builds.v1.BuildsService service.
type BuildsServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	ListVersions(context.Context, *connect_go.Request[v1.ListVersionsRequest]) (*connect_go.Response[v1.ListVersionsResponse], error)
	AttachVersion(context.Context, *connect_go.Request[v1.AttachVersionRequest]) (*connect_go.Response[v1.AttachVersionResponse], error)
	DropVersion(context.Context, *connect_go.Request[v1.DropVersionRequest]) (*connect_go.Response[v1.DropVersionResponse], error)
}

// NewBuildsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuildsServiceHandler(svc BuildsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/builds.v1.BuildsService/List", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/builds.v1.BuildsService/Create", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/builds.v1.BuildsService/Update", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/builds.v1.BuildsService/Show", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/Show",
		svc.Show,
		opts...,
	))
	mux.Handle("/builds.v1.BuildsService/Delete", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/builds.v1.BuildsService/ListVersions", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/ListVersions",
		svc.ListVersions,
		opts...,
	))
	mux.Handle("/builds.v1.BuildsService/AttachVersion", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/AttachVersion",
		svc.AttachVersion,
		opts...,
	))
	mux.Handle("/builds.v1.BuildsService/DropVersion", connect_go.NewUnaryHandler(
		"/builds.v1.BuildsService/DropVersion",
		svc.DropVersion,
		opts...,
	))
	return "/builds.v1.BuildsService/", mux
}

// UnimplementedBuildsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuildsServiceHandler struct{}

func (UnimplementedBuildsServiceHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.List is not implemented"))
}

func (UnimplementedBuildsServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.Create is not implemented"))
}

func (UnimplementedBuildsServiceHandler) Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.Update is not implemented"))
}

func (UnimplementedBuildsServiceHandler) Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.Show is not implemented"))
}

func (UnimplementedBuildsServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.Delete is not implemented"))
}

func (UnimplementedBuildsServiceHandler) ListVersions(context.Context, *connect_go.Request[v1.ListVersionsRequest]) (*connect_go.Response[v1.ListVersionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.ListVersions is not implemented"))
}

func (UnimplementedBuildsServiceHandler) AttachVersion(context.Context, *connect_go.Request[v1.AttachVersionRequest]) (*connect_go.Response[v1.AttachVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.AttachVersion is not implemented"))
}

func (UnimplementedBuildsServiceHandler) DropVersion(context.Context, *connect_go.Request[v1.DropVersionRequest]) (*connect_go.Response[v1.DropVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("builds.v1.BuildsService.DropVersion is not implemented"))
}
