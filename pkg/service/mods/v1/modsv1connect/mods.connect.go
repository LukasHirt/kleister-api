// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mods/v1/mods.proto

package modsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kleister/kleister-api/pkg/service/mods/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ModsServiceName is the fully-qualified name of the ModsService service.
	ModsServiceName = "mods.v1.ModsService"
)

// ModsServiceClient is a client for the mods.v1.ModsService service.
type ModsServiceClient interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	AttachUser(context.Context, *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error)
	DropUser(context.Context, *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error)
	ListTeams(context.Context, *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error)
	AttachTeam(context.Context, *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error)
	DropTeam(context.Context, *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error)
}

// NewModsServiceClient constructs a client for the mods.v1.ModsService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ModsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &modsServiceClient{
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/List",
			opts...,
		),
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/Create",
			opts...,
		),
		update: connect_go.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/Update",
			opts...,
		),
		show: connect_go.NewClient[v1.ShowRequest, v1.ShowResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/Show",
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/Delete",
			opts...,
		),
		listUsers: connect_go.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/ListUsers",
			opts...,
		),
		attachUser: connect_go.NewClient[v1.AttachUserRequest, v1.AttachUserResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/AttachUser",
			opts...,
		),
		dropUser: connect_go.NewClient[v1.DropUserRequest, v1.DropUserResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/DropUser",
			opts...,
		),
		listTeams: connect_go.NewClient[v1.ListTeamsRequest, v1.ListTeamsResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/ListTeams",
			opts...,
		),
		attachTeam: connect_go.NewClient[v1.AttachTeamRequest, v1.AttachTeamResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/AttachTeam",
			opts...,
		),
		dropTeam: connect_go.NewClient[v1.DropTeamRequest, v1.DropTeamResponse](
			httpClient,
			baseURL+"/mods.v1.ModsService/DropTeam",
			opts...,
		),
	}
}

// modsServiceClient implements ModsServiceClient.
type modsServiceClient struct {
	list       *connect_go.Client[v1.ListRequest, v1.ListResponse]
	create     *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	update     *connect_go.Client[v1.UpdateRequest, v1.UpdateResponse]
	show       *connect_go.Client[v1.ShowRequest, v1.ShowResponse]
	delete     *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
	listUsers  *connect_go.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	attachUser *connect_go.Client[v1.AttachUserRequest, v1.AttachUserResponse]
	dropUser   *connect_go.Client[v1.DropUserRequest, v1.DropUserResponse]
	listTeams  *connect_go.Client[v1.ListTeamsRequest, v1.ListTeamsResponse]
	attachTeam *connect_go.Client[v1.AttachTeamRequest, v1.AttachTeamResponse]
	dropTeam   *connect_go.Client[v1.DropTeamRequest, v1.DropTeamResponse]
}

// List calls mods.v1.ModsService.List.
func (c *modsServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls mods.v1.ModsService.Create.
func (c *modsServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls mods.v1.ModsService.Update.
func (c *modsServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Show calls mods.v1.ModsService.Show.
func (c *modsServiceClient) Show(ctx context.Context, req *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error) {
	return c.show.CallUnary(ctx, req)
}

// Delete calls mods.v1.ModsService.Delete.
func (c *modsServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ListUsers calls mods.v1.ModsService.ListUsers.
func (c *modsServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// AttachUser calls mods.v1.ModsService.AttachUser.
func (c *modsServiceClient) AttachUser(ctx context.Context, req *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error) {
	return c.attachUser.CallUnary(ctx, req)
}

// DropUser calls mods.v1.ModsService.DropUser.
func (c *modsServiceClient) DropUser(ctx context.Context, req *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error) {
	return c.dropUser.CallUnary(ctx, req)
}

// ListTeams calls mods.v1.ModsService.ListTeams.
func (c *modsServiceClient) ListTeams(ctx context.Context, req *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error) {
	return c.listTeams.CallUnary(ctx, req)
}

// AttachTeam calls mods.v1.ModsService.AttachTeam.
func (c *modsServiceClient) AttachTeam(ctx context.Context, req *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error) {
	return c.attachTeam.CallUnary(ctx, req)
}

// DropTeam calls mods.v1.ModsService.DropTeam.
func (c *modsServiceClient) DropTeam(ctx context.Context, req *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error) {
	return c.dropTeam.CallUnary(ctx, req)
}

// ModsServiceHandler is an implementation of the mods.v1.ModsService service.
type ModsServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	AttachUser(context.Context, *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error)
	DropUser(context.Context, *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error)
	ListTeams(context.Context, *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error)
	AttachTeam(context.Context, *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error)
	DropTeam(context.Context, *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error)
}

// NewModsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModsServiceHandler(svc ModsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mods.v1.ModsService/List", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/Create", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/Update", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/Show", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/Show",
		svc.Show,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/Delete", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/ListUsers", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/ListUsers",
		svc.ListUsers,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/AttachUser", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/AttachUser",
		svc.AttachUser,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/DropUser", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/DropUser",
		svc.DropUser,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/ListTeams", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/ListTeams",
		svc.ListTeams,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/AttachTeam", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/AttachTeam",
		svc.AttachTeam,
		opts...,
	))
	mux.Handle("/mods.v1.ModsService/DropTeam", connect_go.NewUnaryHandler(
		"/mods.v1.ModsService/DropTeam",
		svc.DropTeam,
		opts...,
	))
	return "/mods.v1.ModsService/", mux
}

// UnimplementedModsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModsServiceHandler struct{}

func (UnimplementedModsServiceHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.List is not implemented"))
}

func (UnimplementedModsServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.Create is not implemented"))
}

func (UnimplementedModsServiceHandler) Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.Update is not implemented"))
}

func (UnimplementedModsServiceHandler) Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.Show is not implemented"))
}

func (UnimplementedModsServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.Delete is not implemented"))
}

func (UnimplementedModsServiceHandler) ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.ListUsers is not implemented"))
}

func (UnimplementedModsServiceHandler) AttachUser(context.Context, *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.AttachUser is not implemented"))
}

func (UnimplementedModsServiceHandler) DropUser(context.Context, *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.DropUser is not implemented"))
}

func (UnimplementedModsServiceHandler) ListTeams(context.Context, *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.ListTeams is not implemented"))
}

func (UnimplementedModsServiceHandler) AttachTeam(context.Context, *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.AttachTeam is not implemented"))
}

func (UnimplementedModsServiceHandler) DropTeam(context.Context, *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mods.v1.ModsService.DropTeam is not implemented"))
}
