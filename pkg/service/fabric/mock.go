// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/fabric/service.go

// Package fabric is a generated GoMock package.
package fabric

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fabric "github.com/kleister/kleister-api/pkg/internal/fabric"
	model "github.com/kleister/kleister-api/pkg/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AttachBuild mocks base method.
func (m *MockService) AttachBuild(arg0 context.Context, arg1 model.FabricBuildParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachBuild", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachBuild indicates an expected call of AttachBuild.
func (mr *MockServiceMockRecorder) AttachBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachBuild", reflect.TypeOf((*MockService)(nil).AttachBuild), arg0, arg1)
}

// DropBuild mocks base method.
func (m *MockService) DropBuild(arg0 context.Context, arg1 model.FabricBuildParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropBuild", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropBuild indicates an expected call of DropBuild.
func (mr *MockServiceMockRecorder) DropBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropBuild", reflect.TypeOf((*MockService)(nil).DropBuild), arg0, arg1)
}

// List mocks base method.
func (m *MockService) List(arg0 context.Context, arg1 model.ListParams) ([]*model.Fabric, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*model.Fabric)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), arg0, arg1)
}

// ListBuilds mocks base method.
func (m *MockService) ListBuilds(arg0 context.Context, arg1 model.FabricBuildParams) ([]*model.Build, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuilds", arg0, arg1)
	ret0, _ := ret[0].([]*model.Build)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBuilds indicates an expected call of ListBuilds.
func (mr *MockServiceMockRecorder) ListBuilds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilds", reflect.TypeOf((*MockService)(nil).ListBuilds), arg0, arg1)
}

// Show mocks base method.
func (m *MockService) Show(arg0 context.Context, arg1 string) (*model.Fabric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*model.Fabric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockServiceMockRecorder) Show(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockService)(nil).Show), arg0, arg1)
}

// Sync mocks base method.
func (m *MockService) Sync(arg0 context.Context, arg1 fabric.Versions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockServiceMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockService)(nil).Sync), arg0, arg1)
}

// WithPrincipal mocks base method.
func (m *MockService) WithPrincipal(arg0 *model.User) Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPrincipal", arg0)
	ret0, _ := ret[0].(Service)
	return ret0
}

// WithPrincipal indicates an expected call of WithPrincipal.
func (mr *MockServiceMockRecorder) WithPrincipal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPrincipal", reflect.TypeOf((*MockService)(nil).WithPrincipal), arg0)
}
