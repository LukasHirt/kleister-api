// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: packs/v1/packs.proto

package packsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kleister/kleister-api/pkg/service/packs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PacksServiceName is the fully-qualified name of the PacksService service.
	PacksServiceName = "packs.v1.PacksService"
)

// PacksServiceClient is a client for the packs.v1.PacksService service.
type PacksServiceClient interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	AttachUser(context.Context, *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error)
	DropUser(context.Context, *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error)
	ListTeams(context.Context, *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error)
	AttachTeam(context.Context, *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error)
	DropTeam(context.Context, *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error)
}

// NewPacksServiceClient constructs a client for the packs.v1.PacksService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPacksServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PacksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &packsServiceClient{
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/List",
			opts...,
		),
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/Create",
			opts...,
		),
		update: connect_go.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/Update",
			opts...,
		),
		show: connect_go.NewClient[v1.ShowRequest, v1.ShowResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/Show",
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/Delete",
			opts...,
		),
		listUsers: connect_go.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/ListUsers",
			opts...,
		),
		attachUser: connect_go.NewClient[v1.AttachUserRequest, v1.AttachUserResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/AttachUser",
			opts...,
		),
		dropUser: connect_go.NewClient[v1.DropUserRequest, v1.DropUserResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/DropUser",
			opts...,
		),
		listTeams: connect_go.NewClient[v1.ListTeamsRequest, v1.ListTeamsResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/ListTeams",
			opts...,
		),
		attachTeam: connect_go.NewClient[v1.AttachTeamRequest, v1.AttachTeamResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/AttachTeam",
			opts...,
		),
		dropTeam: connect_go.NewClient[v1.DropTeamRequest, v1.DropTeamResponse](
			httpClient,
			baseURL+"/packs.v1.PacksService/DropTeam",
			opts...,
		),
	}
}

// packsServiceClient implements PacksServiceClient.
type packsServiceClient struct {
	list       *connect_go.Client[v1.ListRequest, v1.ListResponse]
	create     *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	update     *connect_go.Client[v1.UpdateRequest, v1.UpdateResponse]
	show       *connect_go.Client[v1.ShowRequest, v1.ShowResponse]
	delete     *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
	listUsers  *connect_go.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	attachUser *connect_go.Client[v1.AttachUserRequest, v1.AttachUserResponse]
	dropUser   *connect_go.Client[v1.DropUserRequest, v1.DropUserResponse]
	listTeams  *connect_go.Client[v1.ListTeamsRequest, v1.ListTeamsResponse]
	attachTeam *connect_go.Client[v1.AttachTeamRequest, v1.AttachTeamResponse]
	dropTeam   *connect_go.Client[v1.DropTeamRequest, v1.DropTeamResponse]
}

// List calls packs.v1.PacksService.List.
func (c *packsServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls packs.v1.PacksService.Create.
func (c *packsServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls packs.v1.PacksService.Update.
func (c *packsServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Show calls packs.v1.PacksService.Show.
func (c *packsServiceClient) Show(ctx context.Context, req *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error) {
	return c.show.CallUnary(ctx, req)
}

// Delete calls packs.v1.PacksService.Delete.
func (c *packsServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ListUsers calls packs.v1.PacksService.ListUsers.
func (c *packsServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// AttachUser calls packs.v1.PacksService.AttachUser.
func (c *packsServiceClient) AttachUser(ctx context.Context, req *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error) {
	return c.attachUser.CallUnary(ctx, req)
}

// DropUser calls packs.v1.PacksService.DropUser.
func (c *packsServiceClient) DropUser(ctx context.Context, req *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error) {
	return c.dropUser.CallUnary(ctx, req)
}

// ListTeams calls packs.v1.PacksService.ListTeams.
func (c *packsServiceClient) ListTeams(ctx context.Context, req *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error) {
	return c.listTeams.CallUnary(ctx, req)
}

// AttachTeam calls packs.v1.PacksService.AttachTeam.
func (c *packsServiceClient) AttachTeam(ctx context.Context, req *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error) {
	return c.attachTeam.CallUnary(ctx, req)
}

// DropTeam calls packs.v1.PacksService.DropTeam.
func (c *packsServiceClient) DropTeam(ctx context.Context, req *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error) {
	return c.dropTeam.CallUnary(ctx, req)
}

// PacksServiceHandler is an implementation of the packs.v1.PacksService service.
type PacksServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	AttachUser(context.Context, *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error)
	DropUser(context.Context, *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error)
	ListTeams(context.Context, *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error)
	AttachTeam(context.Context, *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error)
	DropTeam(context.Context, *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error)
}

// NewPacksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPacksServiceHandler(svc PacksServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/packs.v1.PacksService/List", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/Create", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/Update", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/Show", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/Show",
		svc.Show,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/Delete", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/ListUsers", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/ListUsers",
		svc.ListUsers,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/AttachUser", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/AttachUser",
		svc.AttachUser,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/DropUser", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/DropUser",
		svc.DropUser,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/ListTeams", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/ListTeams",
		svc.ListTeams,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/AttachTeam", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/AttachTeam",
		svc.AttachTeam,
		opts...,
	))
	mux.Handle("/packs.v1.PacksService/DropTeam", connect_go.NewUnaryHandler(
		"/packs.v1.PacksService/DropTeam",
		svc.DropTeam,
		opts...,
	))
	return "/packs.v1.PacksService/", mux
}

// UnimplementedPacksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPacksServiceHandler struct{}

func (UnimplementedPacksServiceHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.List is not implemented"))
}

func (UnimplementedPacksServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.Create is not implemented"))
}

func (UnimplementedPacksServiceHandler) Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.Update is not implemented"))
}

func (UnimplementedPacksServiceHandler) Show(context.Context, *connect_go.Request[v1.ShowRequest]) (*connect_go.Response[v1.ShowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.Show is not implemented"))
}

func (UnimplementedPacksServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.Delete is not implemented"))
}

func (UnimplementedPacksServiceHandler) ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.ListUsers is not implemented"))
}

func (UnimplementedPacksServiceHandler) AttachUser(context.Context, *connect_go.Request[v1.AttachUserRequest]) (*connect_go.Response[v1.AttachUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.AttachUser is not implemented"))
}

func (UnimplementedPacksServiceHandler) DropUser(context.Context, *connect_go.Request[v1.DropUserRequest]) (*connect_go.Response[v1.DropUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.DropUser is not implemented"))
}

func (UnimplementedPacksServiceHandler) ListTeams(context.Context, *connect_go.Request[v1.ListTeamsRequest]) (*connect_go.Response[v1.ListTeamsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.ListTeams is not implemented"))
}

func (UnimplementedPacksServiceHandler) AttachTeam(context.Context, *connect_go.Request[v1.AttachTeamRequest]) (*connect_go.Response[v1.AttachTeamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.AttachTeam is not implemented"))
}

func (UnimplementedPacksServiceHandler) DropTeam(context.Context, *connect_go.Request[v1.DropTeamRequest]) (*connect_go.Response[v1.DropTeamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("packs.v1.PacksService.DropTeam is not implemented"))
}
