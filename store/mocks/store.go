package mocks

import "github.com/stretchr/testify/mock"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateBuild provides a mock function with given fields: _a0, _a1, _a2
func (_m *Store) CreateBuild(_a0 int, _a1 *model.Build, _a2 *model.User) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *model.Build, *model.User) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBuildVersion provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateBuildVersion(_a0 *model.BuildVersionParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.BuildVersionParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateClient provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateClient(_a0 *model.Client, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateClientPack provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateClientPack(_a0 *model.ClientPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ClientPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateForgeBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateForgeBuild(_a0 *model.ForgeBuildParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ForgeBuildParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMinecraftBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateMinecraftBuild(_a0 *model.MinecraftBuildParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MinecraftBuildParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMod provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateMod(_a0 *model.Mod, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Mod, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateModTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateModTeam(_a0 *model.ModTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ModTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateModUser provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateModUser(_a0 *model.ModUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ModUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePack provides a mock function with given fields: _a0, _a1
func (_m *Store) CreatePack(_a0 *model.Pack, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Pack, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePackClient provides a mock function with given fields: _a0, _a1
func (_m *Store) CreatePackClient(_a0 *model.PackClientParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackClientParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePackTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) CreatePackTeam(_a0 *model.PackTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePackUser provides a mock function with given fields: _a0, _a1
func (_m *Store) CreatePackUser(_a0 *model.PackUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateTeam(_a0 *model.Team, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Team, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeamMod provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateTeamMod(_a0 *model.TeamModParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamModParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeamPack provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateTeamPack(_a0 *model.TeamPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeamUser provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateTeamUser(_a0 *model.TeamUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateUser(_a0 *model.User, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserMod provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateUserMod(_a0 *model.UserModParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserModParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserPack provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateUserPack(_a0 *model.UserPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateUserTeam(_a0 *model.UserTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVersion provides a mock function with given fields: _a0, _a1, _a2
func (_m *Store) CreateVersion(_a0 int, _a1 *model.Version, _a2 *model.User) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *model.Version, *model.User) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVersionBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateVersionBuild(_a0 *model.VersionBuildParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.VersionBuildParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBuild provides a mock function with given fields: _a0, _a1, _a2
func (_m *Store) DeleteBuild(_a0 int, _a1 *model.Build, _a2 *model.User) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *model.Build, *model.User) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBuildVersion provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteBuildVersion(_a0 *model.BuildVersionParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.BuildVersionParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClient provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteClient(_a0 *model.Client, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClientPack provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteClientPack(_a0 *model.ClientPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ClientPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteForgeBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteForgeBuild(_a0 *model.ForgeBuildParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ForgeBuildParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMinecraftBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteMinecraftBuild(_a0 *model.MinecraftBuildParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MinecraftBuildParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMod provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteMod(_a0 *model.Mod, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Mod, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteModTeam(_a0 *model.ModTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ModTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModUser provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteModUser(_a0 *model.ModUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ModUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePack provides a mock function with given fields: _a0, _a1
func (_m *Store) DeletePack(_a0 *model.Pack, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Pack, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePackClient provides a mock function with given fields: _a0, _a1
func (_m *Store) DeletePackClient(_a0 *model.PackClientParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackClientParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePackTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) DeletePackTeam(_a0 *model.PackTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePackUser provides a mock function with given fields: _a0, _a1
func (_m *Store) DeletePackUser(_a0 *model.PackUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteTeam(_a0 *model.Team, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Team, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTeamMod provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteTeamMod(_a0 *model.TeamModParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamModParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTeamPack provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteTeamPack(_a0 *model.TeamPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTeamUser provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteTeamUser(_a0 *model.TeamUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteUser(_a0 *model.User, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserMod provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteUserMod(_a0 *model.UserModParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserModParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserPack provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteUserPack(_a0 *model.UserPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteUserTeam(_a0 *model.UserTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVersion provides a mock function with given fields: _a0, _a1, _a2
func (_m *Store) DeleteVersion(_a0 int, _a1 *model.Version, _a2 *model.User) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *model.Version, *model.User) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVersionBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) DeleteVersionBuild(_a0 *model.VersionBuildParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.VersionBuildParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) GetBuild(_a0 int, _a1 string) (*model.Build, *gorm.DB) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Build
	if rf, ok := ret.Get(0).(func(int, string) *model.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Build)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(int, string) *gorm.DB); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetBuildHasVersion provides a mock function with given fields: _a0
func (_m *Store) GetBuildHasVersion(_a0 *model.BuildVersionParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.BuildVersionParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBuildVersions provides a mock function with given fields: _a0
func (_m *Store) GetBuildVersions(_a0 *model.BuildVersionParams) (*model.BuildVersions, error) {
	ret := _m.Called(_a0)

	var r0 *model.BuildVersions
	if rf, ok := ret.Get(0).(func(*model.BuildVersionParams) *model.BuildVersions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BuildVersions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.BuildVersionParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuilds provides a mock function with given fields: _a0
func (_m *Store) GetBuilds(_a0 int) (*model.Builds, error) {
	ret := _m.Called(_a0)

	var r0 *model.Builds
	if rf, ok := ret.Get(0).(func(int) *model.Builds); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Builds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields: _a0
func (_m *Store) GetClient(_a0 string) (*model.Client, *gorm.DB) {
	ret := _m.Called(_a0)

	var r0 *model.Client
	if rf, ok := ret.Get(0).(func(string) *model.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(string) *gorm.DB); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetClientHasPack provides a mock function with given fields: _a0
func (_m *Store) GetClientHasPack(_a0 *model.ClientPackParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.ClientPackParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetClientPacks provides a mock function with given fields: _a0
func (_m *Store) GetClientPacks(_a0 *model.ClientPackParams) (*model.ClientPacks, error) {
	ret := _m.Called(_a0)

	var r0 *model.ClientPacks
	if rf, ok := ret.Get(0).(func(*model.ClientPackParams) *model.ClientPacks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClientPacks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.ClientPackParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClients provides a mock function with given fields:
func (_m *Store) GetClients() (*model.Clients, error) {
	ret := _m.Called()

	var r0 *model.Clients
	if rf, ok := ret.Get(0).(func() *model.Clients); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Clients)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForge provides a mock function with given fields: _a0
func (_m *Store) GetForge(_a0 string) (*model.Forge, *gorm.DB) {
	ret := _m.Called(_a0)

	var r0 *model.Forge
	if rf, ok := ret.Get(0).(func(string) *model.Forge); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Forge)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(string) *gorm.DB); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetForgeBuilds provides a mock function with given fields: _a0
func (_m *Store) GetForgeBuilds(_a0 *model.ForgeBuildParams) (*model.Builds, error) {
	ret := _m.Called(_a0)

	var r0 *model.Builds
	if rf, ok := ret.Get(0).(func(*model.ForgeBuildParams) *model.Builds); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Builds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.ForgeBuildParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForgeHasBuild provides a mock function with given fields: _a0
func (_m *Store) GetForgeHasBuild(_a0 *model.ForgeBuildParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.ForgeBuildParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetForges provides a mock function with given fields:
func (_m *Store) GetForges() (*model.Forges, error) {
	ret := _m.Called()

	var r0 *model.Forges
	if rf, ok := ret.Get(0).(func() *model.Forges); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Forges)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinecraft provides a mock function with given fields: _a0
func (_m *Store) GetMinecraft(_a0 string) (*model.Minecraft, *gorm.DB) {
	ret := _m.Called(_a0)

	var r0 *model.Minecraft
	if rf, ok := ret.Get(0).(func(string) *model.Minecraft); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Minecraft)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(string) *gorm.DB); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetMinecraftBuilds provides a mock function with given fields: _a0
func (_m *Store) GetMinecraftBuilds(_a0 *model.MinecraftBuildParams) (*model.Builds, error) {
	ret := _m.Called(_a0)

	var r0 *model.Builds
	if rf, ok := ret.Get(0).(func(*model.MinecraftBuildParams) *model.Builds); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Builds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.MinecraftBuildParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinecraftHasBuild provides a mock function with given fields: _a0
func (_m *Store) GetMinecraftHasBuild(_a0 *model.MinecraftBuildParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.MinecraftBuildParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetMinecrafts provides a mock function with given fields:
func (_m *Store) GetMinecrafts() (*model.Minecrafts, error) {
	ret := _m.Called()

	var r0 *model.Minecrafts
	if rf, ok := ret.Get(0).(func() *model.Minecrafts); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Minecrafts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMod provides a mock function with given fields: _a0
func (_m *Store) GetMod(_a0 string) (*model.Mod, *gorm.DB) {
	ret := _m.Called(_a0)

	var r0 *model.Mod
	if rf, ok := ret.Get(0).(func(string) *model.Mod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Mod)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(string) *gorm.DB); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetModHasTeam provides a mock function with given fields: _a0
func (_m *Store) GetModHasTeam(_a0 *model.ModTeamParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.ModTeamParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetModHasUser provides a mock function with given fields: _a0
func (_m *Store) GetModHasUser(_a0 *model.ModUserParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.ModUserParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetModTeams provides a mock function with given fields: _a0
func (_m *Store) GetModTeams(_a0 *model.ModTeamParams) (*model.TeamMods, error) {
	ret := _m.Called(_a0)

	var r0 *model.TeamMods
	if rf, ok := ret.Get(0).(func(*model.ModTeamParams) *model.TeamMods); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamMods)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.ModTeamParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModUsers provides a mock function with given fields: _a0
func (_m *Store) GetModUsers(_a0 *model.ModUserParams) (*model.UserMods, error) {
	ret := _m.Called(_a0)

	var r0 *model.UserMods
	if rf, ok := ret.Get(0).(func(*model.ModUserParams) *model.UserMods); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserMods)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.ModUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMods provides a mock function with given fields:
func (_m *Store) GetMods() (*model.Mods, error) {
	ret := _m.Called()

	var r0 *model.Mods
	if rf, ok := ret.Get(0).(func() *model.Mods); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Mods)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPack provides a mock function with given fields: _a0
func (_m *Store) GetPack(_a0 string) (*model.Pack, *gorm.DB) {
	ret := _m.Called(_a0)

	var r0 *model.Pack
	if rf, ok := ret.Get(0).(func(string) *model.Pack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pack)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(string) *gorm.DB); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetPackClients provides a mock function with given fields: _a0
func (_m *Store) GetPackClients(_a0 *model.PackClientParams) (*model.ClientPacks, error) {
	ret := _m.Called(_a0)

	var r0 *model.ClientPacks
	if rf, ok := ret.Get(0).(func(*model.PackClientParams) *model.ClientPacks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClientPacks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.PackClientParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackHasClient provides a mock function with given fields: _a0
func (_m *Store) GetPackHasClient(_a0 *model.PackClientParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.PackClientParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetPackHasTeam provides a mock function with given fields: _a0
func (_m *Store) GetPackHasTeam(_a0 *model.PackTeamParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.PackTeamParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetPackHasUser provides a mock function with given fields: _a0
func (_m *Store) GetPackHasUser(_a0 *model.PackUserParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.PackUserParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetPackTeams provides a mock function with given fields: _a0
func (_m *Store) GetPackTeams(_a0 *model.PackTeamParams) (*model.TeamPacks, error) {
	ret := _m.Called(_a0)

	var r0 *model.TeamPacks
	if rf, ok := ret.Get(0).(func(*model.PackTeamParams) *model.TeamPacks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamPacks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.PackTeamParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackUsers provides a mock function with given fields: _a0
func (_m *Store) GetPackUsers(_a0 *model.PackUserParams) (*model.UserPacks, error) {
	ret := _m.Called(_a0)

	var r0 *model.UserPacks
	if rf, ok := ret.Get(0).(func(*model.PackUserParams) *model.UserPacks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserPacks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.PackUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPacks provides a mock function with given fields:
func (_m *Store) GetPacks() (*model.Packs, error) {
	ret := _m.Called()

	var r0 *model.Packs
	if rf, ok := ret.Get(0).(func() *model.Packs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Packs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolderBuild provides a mock function with given fields: _a0, _a1
func (_m *Store) GetSolderBuild(_a0 string, _a1 string) (*model.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Build
	if rf, ok := ret.Get(0).(func(string, string) *model.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolderPack provides a mock function with given fields: _a0
func (_m *Store) GetSolderPack(_a0 string) (*model.Pack, error) {
	ret := _m.Called(_a0)

	var r0 *model.Pack
	if rf, ok := ret.Get(0).(func(string) *model.Pack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolderPacks provides a mock function with given fields:
func (_m *Store) GetSolderPacks() (*model.Packs, error) {
	ret := _m.Called()

	var r0 *model.Packs
	if rf, ok := ret.Get(0).(func() *model.Packs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Packs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeam provides a mock function with given fields: _a0
func (_m *Store) GetTeam(_a0 string) (*model.Team, *gorm.DB) {
	ret := _m.Called(_a0)

	var r0 *model.Team
	if rf, ok := ret.Get(0).(func(string) *model.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(string) *gorm.DB); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetTeamHasMod provides a mock function with given fields: _a0
func (_m *Store) GetTeamHasMod(_a0 *model.TeamModParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.TeamModParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetTeamHasPack provides a mock function with given fields: _a0
func (_m *Store) GetTeamHasPack(_a0 *model.TeamPackParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.TeamPackParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetTeamHasUser provides a mock function with given fields: _a0
func (_m *Store) GetTeamHasUser(_a0 *model.TeamUserParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.TeamUserParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetTeamMods provides a mock function with given fields: _a0
func (_m *Store) GetTeamMods(_a0 *model.TeamModParams) (*model.TeamMods, error) {
	ret := _m.Called(_a0)

	var r0 *model.TeamMods
	if rf, ok := ret.Get(0).(func(*model.TeamModParams) *model.TeamMods); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamMods)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.TeamModParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamPacks provides a mock function with given fields: _a0
func (_m *Store) GetTeamPacks(_a0 *model.TeamPackParams) (*model.TeamPacks, error) {
	ret := _m.Called(_a0)

	var r0 *model.TeamPacks
	if rf, ok := ret.Get(0).(func(*model.TeamPackParams) *model.TeamPacks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamPacks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.TeamPackParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamUsers provides a mock function with given fields: _a0
func (_m *Store) GetTeamUsers(_a0 *model.TeamUserParams) (*model.TeamUsers, error) {
	ret := _m.Called(_a0)

	var r0 *model.TeamUsers
	if rf, ok := ret.Get(0).(func(*model.TeamUserParams) *model.TeamUsers); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamUsers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.TeamUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeams provides a mock function with given fields:
func (_m *Store) GetTeams() (*model.Teams, error) {
	ret := _m.Called()

	var r0 *model.Teams
	if rf, ok := ret.Get(0).(func() *model.Teams); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Teams)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *Store) GetUser(_a0 string) (*model.User, *gorm.DB) {
	ret := _m.Called(_a0)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(string) *gorm.DB); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetUserHasMod provides a mock function with given fields: _a0
func (_m *Store) GetUserHasMod(_a0 *model.UserModParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.UserModParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetUserHasPack provides a mock function with given fields: _a0
func (_m *Store) GetUserHasPack(_a0 *model.UserPackParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.UserPackParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetUserHasTeam provides a mock function with given fields: _a0
func (_m *Store) GetUserHasTeam(_a0 *model.UserTeamParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.UserTeamParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetUserMods provides a mock function with given fields: _a0
func (_m *Store) GetUserMods(_a0 *model.UserModParams) (*model.UserMods, error) {
	ret := _m.Called(_a0)

	var r0 *model.UserMods
	if rf, ok := ret.Get(0).(func(*model.UserModParams) *model.UserMods); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserMods)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.UserModParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPacks provides a mock function with given fields: _a0
func (_m *Store) GetUserPacks(_a0 *model.UserPackParams) (*model.UserPacks, error) {
	ret := _m.Called(_a0)

	var r0 *model.UserPacks
	if rf, ok := ret.Get(0).(func(*model.UserPackParams) *model.UserPacks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserPacks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.UserPackParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTeams provides a mock function with given fields: _a0
func (_m *Store) GetUserTeams(_a0 *model.UserTeamParams) (*model.TeamUsers, error) {
	ret := _m.Called(_a0)

	var r0 *model.TeamUsers
	if rf, ok := ret.Get(0).(func(*model.UserTeamParams) *model.TeamUsers); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamUsers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.UserTeamParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *Store) GetUsers() (*model.Users, error) {
	ret := _m.Called()

	var r0 *model.Users
	if rf, ok := ret.Get(0).(func() *model.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields: _a0, _a1
func (_m *Store) GetVersion(_a0 int, _a1 string) (*model.Version, *gorm.DB) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Version
	if rf, ok := ret.Get(0).(func(int, string) *model.Version); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Version)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(int, string) *gorm.DB); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// GetVersionBuilds provides a mock function with given fields: _a0
func (_m *Store) GetVersionBuilds(_a0 *model.VersionBuildParams) (*model.BuildVersions, error) {
	ret := _m.Called(_a0)

	var r0 *model.BuildVersions
	if rf, ok := ret.Get(0).(func(*model.VersionBuildParams) *model.BuildVersions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BuildVersions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.VersionBuildParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionHasBuild provides a mock function with given fields: _a0
func (_m *Store) GetVersionHasBuild(_a0 *model.VersionBuildParams) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.VersionBuildParams) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetVersions provides a mock function with given fields: _a0
func (_m *Store) GetVersions(_a0 int) (*model.Versions, error) {
	ret := _m.Called(_a0)

	var r0 *model.Versions
	if rf, ok := ret.Get(0).(func(int) *model.Versions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Versions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncForge provides a mock function with given fields: _a0, _a1
func (_m *Store) SyncForge(_a0 *forge.Number, _a1 *model.User) (*model.Forge, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Forge
	if rf, ok := ret.Get(0).(func(*forge.Number, *model.User) *model.Forge); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Forge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*forge.Number, *model.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncMinecraft provides a mock function with given fields: _a0, _a1
func (_m *Store) SyncMinecraft(_a0 *minecraft.Version, _a1 *model.User) (*model.Minecraft, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Minecraft
	if rf, ok := ret.Get(0).(func(*minecraft.Version, *model.User) *model.Minecraft); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Minecraft)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*minecraft.Version, *model.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuild provides a mock function with given fields: _a0, _a1, _a2
func (_m *Store) UpdateBuild(_a0 int, _a1 *model.Build, _a2 *model.User) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *model.Build, *model.User) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClient provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateClient(_a0 *model.Client, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMod provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateMod(_a0 *model.Mod, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Mod, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateModTeam(_a0 *model.ModTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ModTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModUser provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateModUser(_a0 *model.ModUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ModUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePack provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdatePack(_a0 *model.Pack, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Pack, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePackTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdatePackTeam(_a0 *model.PackTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePackUser provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdatePackUser(_a0 *model.PackUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateTeam(_a0 *model.Team, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Team, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeamMod provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateTeamMod(_a0 *model.TeamModParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamModParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeamPack provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateTeamPack(_a0 *model.TeamPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeamUser provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateTeamUser(_a0 *model.TeamUserParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TeamUserParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateUser(_a0 *model.User, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserMod provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateUserMod(_a0 *model.UserModParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserModParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPack provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateUserPack(_a0 *model.UserPackParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserPackParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserTeam provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateUserTeam(_a0 *model.UserTeamParams, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserTeamParams, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVersion provides a mock function with given fields: _a0, _a1, _a2
func (_m *Store) UpdateVersion(_a0 int, _a1 *model.Version, _a2 *model.User) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *model.Version, *model.User) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
